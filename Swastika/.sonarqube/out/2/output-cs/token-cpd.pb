™ê
DG:\_github\Swastika-Heart\src\Swastika\Common\Helper\CommonHelper.cs
	namespace 	
Swastika
 
. 
Common 
. 
Helper  
{ 
public 

static 
class 
CommonHelper $
{ 
private 
static 
readonly 
char  $
[$ %
]% &
_base62chars' 3
=4 5
$str L
. 
ToCharArray 
( 
) 
; 
private 
static 
readonly 
Random  &
_random' .
=/ 0
new1 4
Random5 ;
(; <
)< =
;= >
public$$ 
static$$ 
RSAParameters$$ #
GenerateKey$$$ /
($$/ 0
)$$0 1
{%% 	
using&& 
(&& 
var&& 
key&& 
=&& 
new&&  $
RSACryptoServiceProvider&&! 9
(&&9 :
$num&&: >
)&&> ?
)&&? @
{'' 
return(( 
key(( 
.(( 
ExportParameters(( +
(((+ ,
true((, 0
)((0 1
;((1 2
})) 
}** 	
public11 
static11 
string11 
	GetBase6211 &
(11& '
int11' *
length11+ 1
)111 2
{22 	
var33 
sb33 
=33 
new33 
StringBuilder33 &
(33& '
length33' -
)33- .
;33. /
for55 
(55 
int55 
i55 
=55 
$num55 
;55 
i55 
<55 
length55  &
;55& '
i55( )
++55) +
)55+ ,
sb66 
.66 
Append66 
(66 
_base62chars66 &
[66& '
_random66' .
.66. /
Next66/ 3
(663 4
$num664 6
)666 7
]667 8
)668 9
;669 :
return88 
sb88 
.88 
ToString88 
(88 
)88  
;88  !
}99 	
public@@ 
static@@ 
string@@ 
GetFullPath@@ (
(@@( )
string@@) /
[@@/ 0
]@@0 1
subPaths@@2 :
)@@: ;
{AA 	
stringBB 
resultBB 
=BB 
stringBB "
.BB" #
EmptyBB# (
;BB( )
stringCC 
	strFormatCC 
=CC 
stringCC %
.CC% &
EmptyCC& +
;CC+ ,
forDD 
(DD 
intDD 
iDD 
=DD 
$numDD 
;DD 
iDD 
<DD 
subPathsDD  (
.DD( )
LengthDD) /
;DD/ 0
iDD1 2
++DD2 4
)DD4 5
{EE 
	strFormatGG 
+=GG 
$strGG !
+GG" #
iGG$ %
+GG& '
$strGG( +
+GG, -
(GG. /
iGG/ 0
<GG1 2
subPathsGG3 ;
.GG; <
LengthGG< B
-GGC D
$numGGE F
?GGG H
$strGGI L
:GGM N
stringGGO U
.GGU V
EmptyGGV [
)GG[ \
;GG\ ]
}HH 
returnII 
stringII 
.II 
FormatII  
(II  !
	strFormatII! *
,II* +
subPathsII, 4
)II4 5
.II5 6
ReplaceII6 =
(II= >
$strII> B
,IIB C
$strIID G
)IIG H
;IIH I
}JJ 	
publicQQ 
staticQQ 
stringQQ 
GetRandomNameQQ *
(QQ* +
stringQQ+ 1
filenameQQ2 :
)QQ: ;
{RR 	
stringSS 
extSS 
=SS 
filenameSS !
.SS! "
SplitSS" '
(SS' (
$charSS( +
)SS+ ,
[SS, -
$numSS- .
]SS. /
;SS/ 0
returnTT 
stringTT 
.TT 
FormatTT  
(TT  !
$strTT! *
,TT* +
GuidTT, 0
.TT0 1
NewGuidTT1 8
(TT8 9
)TT9 :
.TT: ;
ToStringTT; C
(TTC D
$strTTD G
)TTG H
,TTH I
extTTJ M
)TTM N
;TTN O
}UU 	
public\\ 
static\\ 
async\\ 
System\\ "
.\\" #
	Threading\\# ,
.\\, -
Tasks\\- 2
.\\2 3
Task\\3 7
<\\7 8
string\\8 >
>\\> ?
GetWebResponseAsync\\@ S
(\\S T
string\\T Z
url\\[ ^
)\\^ _
{]] 	
HttpWebRequest^^ 

webRequest^^ %
=^^& '
(^^( )
HttpWebRequest^^) 7
)^^7 8

WebRequest^^8 B
.^^B C
Create^^C I
(^^I J
url^^J M
)^^M N
;^^N O
using__ 
(__ 
WebResponse__ 
response__ '
=__( )
await__* /

webRequest__0 :
.__: ;
GetResponseAsync__; K
(__K L
)__L M
.__M N
ConfigureAwait__N \
(__\ ]
false__] b
)__b c
)__c d
{`` 
usingaa 
(aa 
Streamaa 
	resStreamaa '
=aa( )
responseaa* 2
.aa2 3
GetResponseStreamaa3 D
(aaD E
)aaE F
)aaF G
{bb 
StreamReadercc  
readercc! '
=cc( )
newcc* -
StreamReadercc. :
(cc: ;
	resStreamcc; D
,ccD E
EncodingccF N
.ccN O
UTF8ccO S
)ccS T
;ccT U
returndd 
readerdd !
.dd! "
	ReadToEnddd" +
(dd+ ,
)dd, -
;dd- .
}ee 
}ff 
}gg 	
publicnn 
staticnn 
Streamnn 
	LoadImagenn &
(nn& '
stringnn' -

strImage64nn. 8
)nn8 9
{oo 	
tryrr 
{ss 
stringtt 
imgDatatt 
=tt  

strImage64tt! +
.tt+ ,
	Substringtt, 5
(tt5 6

strImage64tt6 @
.tt@ A
IndexOfttA H
(ttH I
$charttI L
)ttL M
+ttN O
$numttP Q
)ttQ R
;ttR S
byteuu 
[uu 
]uu 

imageBytesuu !
=uu" #
Convertuu$ +
.uu+ ,
FromBase64Stringuu, <
(uu< =
imgDatauu= D
)uuD E
;uuE F
returnvv 
newvv 
MemoryStreamvv '
(vv' (

imageBytesvv( 2
,vv2 3
$numvv4 5
,vv5 6

imageBytesvv7 A
.vvA B
LengthvvB H
)vvH I
;vvI J
}ww 
catchxx 
{yy 
returnzz 
nullzz 
;zz 
}{{ 
}|| 	
public
ÉÉ 
static
ÉÉ 
string
ÉÉ #
ParseJsonPropertyName
ÉÉ 2
(
ÉÉ2 3
string
ÉÉ3 9
input
ÉÉ: ?
)
ÉÉ? @
{
ÑÑ 	
if
ÖÖ 
(
ÖÖ 
!
ÖÖ 
string
ÖÖ 
.
ÖÖ 
IsNullOrEmpty
ÖÖ %
(
ÖÖ% &
input
ÖÖ& +
)
ÖÖ+ ,
)
ÖÖ, -
{
ÜÜ 
return
áá 
Char
áá 
.
áá 
ToLower
áá #
(
áá# $
input
áá$ )
[
áá) *
$num
áá* +
]
áá+ ,
)
áá, -
+
áá. /
input
áá0 5
.
áá5 6
	Substring
áá6 ?
(
áá? @
$num
áá@ A
)
ááA B
;
ááB C
}
àà 
else
ââ 
{
ää 
return
ãã 
string
ãã 
.
ãã 
Empty
ãã #
;
ãã# $
}
åå 
}
çç 	
public
îî 
static
îî 
string
îî 
ReadFromFile
îî )
(
îî) *
string
îî* 0
filename
îî1 9
)
îî9 :
{
ïï 	
string
ññ 
s
ññ 
=
ññ 
$str
ññ 
;
ññ 
try
óó 
{
òò 

FileStream
ôô 
file
ôô 
=
ôô  !
new
ôô" %

FileStream
ôô& 0
(
ôô0 1
filename
ôô1 9
,
ôô9 :
FileMode
ôô; C
.
ôôC D
Open
ôôD H
,
ôôH I

FileAccess
ôôJ T
.
ôôT U
Read
ôôU Y
)
ôôY Z
;
ôôZ [
StreamReader
öö 
sr
öö 
=
öö  !
new
öö" %
StreamReader
öö& 2
(
öö2 3
file
öö3 7
)
öö7 8
;
öö8 9
s
õõ 
=
õõ 
sr
õõ 
.
õõ 
	ReadToEnd
õõ  
(
õõ  !
)
õõ! "
;
õõ" #
sr
úú 
.
úú 
Dispose
úú 
(
úú 
)
úú 
;
úú 
file
ùù 
.
ùù 
Dispose
ùù 
(
ùù 
)
ùù 
;
ùù 
}
ûû 
catch
üü 
{
†† 
s
°° 
=
°° 
$str
°° 
;
°° 
}
¢¢ 
return
££ 
s
££ 
;
££ 
}
§§ 	
public
´´ 
static
´´ 
bool
´´ 

RemoveFile
´´ %
(
´´% &
string
´´& ,
filePath
´´- 5
)
´´5 6
{
¨¨ 	
bool
≠≠ 
result
≠≠ 
=
≠≠ 
false
≠≠ 
;
≠≠  
try
ÆÆ 
{
ØØ 
if
∞∞ 
(
∞∞ 
File
∞∞ 
.
∞∞ 
Exists
∞∞ 
(
∞∞  
filePath
∞∞  (
)
∞∞( )
)
∞∞) *
{
±± 
File
≤≤ 
.
≤≤ 
Delete
≤≤ 
(
≤≤  
filePath
≤≤  (
)
≤≤( )
;
≤≤) *
result
≥≥ 
=
≥≥ 
true
≥≥ !
;
≥≥! "
}
¥¥ 
}
µµ 
catch
∂∂ 
(
∂∂ 
	Exception
∂∂ 
e
∂∂ 
)
∂∂ 
{
∑∑ 
throw
∏∏ 
;
∏∏ 
}
ππ 
return
∫∫ 
result
∫∫ 
;
∫∫ 
}
ªª 	
public
ƒƒ 
static
ƒƒ 
bool
ƒƒ 
SaveFileBase64
ƒƒ )
(
ƒƒ) *
string
ƒƒ* 0
folder
ƒƒ1 7
,
ƒƒ7 8
string
ƒƒ9 ?
filename
ƒƒ@ H
,
ƒƒH I
string
ƒƒJ P
	strBase64
ƒƒQ Z
)
ƒƒZ [
{
≈≈ 	
try
»» 
{
…… 
string
   
fullPath
   
=
    !
GetFullPath
  " -
(
  - .
new
  . 1
string
  2 8
[
  8 9
]
  9 :
{
ÀÀ 
folder
ÃÃ 
,
ÃÃ 
filename
ÕÕ 
}
ŒŒ 
)
ŒŒ 
;
ŒŒ 
string
œœ 
fileData
œœ 
=
œœ  !
	strBase64
œœ" +
.
œœ+ ,
	Substring
œœ, 5
(
œœ5 6
	strBase64
œœ6 ?
.
œœ? @
IndexOf
œœ@ G
(
œœG H
$char
œœH K
)
œœK L
+
œœM N
$num
œœO P
)
œœP Q
;
œœQ R
byte
–– 
[
–– 
]
–– 
bytes
–– 
=
–– 
Convert
–– &
.
––& '
FromBase64String
––' 7
(
––7 8
fileData
––8 @
)
––@ A
;
––A B
if
““ 
(
““ 
!
““ 
	Directory
““ 
.
““ 
Exists
““ %
(
““% &
folder
““& ,
)
““, -
)
““- .
{
”” 
	Directory
‘‘ 
.
‘‘ 
CreateDirectory
‘‘ -
(
‘‘- .
folder
‘‘. 4
)
‘‘4 5
;
‘‘5 6
}
’’ 
if
◊◊ 
(
◊◊ 
File
◊◊ 
.
◊◊ 
Exists
◊◊ 
(
◊◊  
fullPath
◊◊  (
)
◊◊( )
)
◊◊) *
{
ÿÿ 
File
ŸŸ 
.
ŸŸ 
Delete
ŸŸ 
(
ŸŸ  
fullPath
ŸŸ  (
)
ŸŸ( )
;
ŸŸ) *
}
⁄⁄ 

FileStream
‹‹ 
fs
‹‹ 
=
‹‹ 
new
‹‹  #

FileStream
‹‹$ .
(
‹‹. /
fullPath
‹‹/ 7
,
‹‹7 8
FileMode
‹‹9 A
.
‹‹A B
Create
‹‹B H
)
‹‹H I
;
‹‹I J
BinaryWriter
›› 
w
›› 
=
››  
new
››! $
BinaryWriter
››% 1
(
››1 2
fs
››2 4
)
››4 5
;
››5 6
try
ﬁﬁ 
{
ﬂﬂ 
w
‡‡ 
.
‡‡ 
Write
‡‡ 
(
‡‡ 
bytes
‡‡ !
)
‡‡! "
;
‡‡" #
}
·· 
finally
‚‚ 
{
„„ 
fs
‰‰ 
.
‰‰ 
Close
‰‰ 
(
‰‰ 
)
‰‰ 
;
‰‰ 
w
ÂÂ 
.
ÂÂ 
Close
ÂÂ 
(
ÂÂ 
)
ÂÂ 
;
ÂÂ 
}
ÊÊ 
return
ÁÁ 
true
ÁÁ 
;
ÁÁ 
}
ËË 
catch
ÈÈ 
{
ÍÍ 
return
ÎÎ 
false
ÎÎ 
;
ÎÎ 
}
ÏÏ 
}
ÌÌ 	
public
ıı 
static
ıı 
async
ıı 
System
ıı "
.
ıı" #
	Threading
ıı# ,
.
ıı, -
Tasks
ıı- 2
.
ıı2 3
Task
ıı3 7
<
ıı7 8
string
ıı8 >
>
ıı> ?
UploadFileAsync
ıı@ O
(
ııO P
string
ııP V
fullPath
ııW _
,
ıı_ `
	IFormFile
ııa j
file
ıık o
)
ııo p
{
ˆˆ 	
try
˜˜ 
{
¯¯ 
if
˘˘ 
(
˘˘ 
!
˘˘ 
	Directory
˘˘ 
.
˘˘ 
Exists
˘˘ %
(
˘˘% &
fullPath
˘˘& .
)
˘˘. /
)
˘˘/ 0
{
˙˙ 
	Directory
˚˚ 
.
˚˚ 
CreateDirectory
˚˚ -
(
˚˚- .
fullPath
˚˚. 6
)
˚˚6 7
;
˚˚7 8
}
¸¸ 
if
˛˛ 
(
˛˛ 
file
˛˛ 
!=
˛˛ 
null
˛˛  
)
˛˛  !
{
ˇˇ 
string
ÇÇ 
fileName
ÇÇ #
=
ÇÇ$ %
string
ÇÇ& ,
.
ÇÇ, -
Format
ÇÇ- 3
(
ÇÇ3 4
$str
ÇÇ4 =
,
ÇÇ= >
Guid
ÉÉ 
.
ÉÉ 
NewGuid
ÉÉ $
(
ÉÉ$ %
)
ÉÉ% &
.
ÉÉ& '
ToString
ÉÉ' /
(
ÉÉ/ 0
$str
ÉÉ0 3
)
ÉÉ3 4
,
ÉÉ4 5
file
ÑÑ 
.
ÑÑ 
FileName
ÑÑ %
.
ÑÑ% &
Split
ÑÑ& +
(
ÑÑ+ ,
$char
ÑÑ, /
)
ÑÑ/ 0
.
ÑÑ0 1
Last
ÑÑ1 5
(
ÑÑ5 6
)
ÑÑ6 7
)
ÑÑ7 8
;
ÑÑ8 9
using
ÖÖ 
(
ÖÖ 
var
ÖÖ 

fileStream
ÖÖ )
=
ÖÖ* +
new
ÖÖ, /

FileStream
ÖÖ0 :
(
ÖÖ: ;
Path
ÖÖ; ?
.
ÖÖ? @
Combine
ÖÖ@ G
(
ÖÖG H
fullPath
ÖÖH P
,
ÖÖP Q
fileName
ÖÖR Z
)
ÖÖZ [
,
ÖÖ[ \
FileMode
ÖÖ] e
.
ÖÖe f
Create
ÖÖf l
,
ÖÖl m

FileAccess
ÖÖn x
.
ÖÖx y
	ReadWriteÖÖy Ç
)ÖÖÇ É
)ÖÖÉ Ñ
{
ÜÜ 
await
áá 
file
áá "
.
áá" #
CopyToAsync
áá# .
(
áá. /

fileStream
áá/ 9
)
áá9 :
.
áá: ;
ConfigureAwait
áá; I
(
ááI J
false
ááJ O
)
ááO P
;
ááP Q
return
àà 
fileName
àà '
;
àà' (
}
ââ 
}
ää 
else
ãã 
{
åå 
return
çç 
string
çç !
.
çç! "
Empty
çç" '
;
çç' (
}
éé 
}
èè 
catch
êê 
{
ëë 
return
íí 
string
íí 
.
íí 
Empty
íí #
;
íí# $
}
ìì 
}
îî 	
public
õõ 
static
õõ 
void
õõ 
WriteBytesToFile
õõ +
(
õõ+ ,
string
õõ, 2
fullPath
õõ3 ;
,
õõ; <
string
õõ= C
	strBase64
õõD M
)
õõM N
{
úú 	
string
ùù 
fileData
ùù 
=
ùù 
	strBase64
ùù '
.
ùù' (
	Substring
ùù( 1
(
ùù1 2
	strBase64
ùù2 ;
.
ùù; <
IndexOf
ùù< C
(
ùùC D
$char
ùùD G
)
ùùG H
+
ùùI J
$num
ùùK L
)
ùùL M
;
ùùM N
byte
ûû 
[
ûû 
]
ûû 
bytes
ûû 
=
ûû 
Convert
ûû "
.
ûû" #
FromBase64String
ûû# 3
(
ûû3 4
fileData
ûû4 <
)
ûû< =
;
ûû= >
if
üü 
(
üü 
File
üü 
.
üü 
Exists
üü 
(
üü 
fullPath
üü $
)
üü$ %
)
üü% &
{
†† 
File
°° 
.
°° 
Delete
°° 
(
°° 
fullPath
°° $
)
°°$ %
;
°°% &
}
¢¢ 

FileStream
§§ 
fs
§§ 
=
§§ 
new
§§ 

FileStream
§§  *
(
§§* +
fullPath
§§+ 3
,
§§3 4
FileMode
§§5 =
.
§§= >
Create
§§> D
)
§§D E
;
§§E F
BinaryWriter
•• 
w
•• 
=
•• 
new
••  
BinaryWriter
••! -
(
••- .
fs
••. 0
)
••0 1
;
••1 2
try
¶¶ 
{
ßß 
w
®® 
.
®® 
Write
®® 
(
®® 
bytes
®® 
)
®® 
;
®® 
}
©© 
finally
™™ 
{
´´ 
fs
¨¨ 
.
¨¨ 
Close
¨¨ 
(
¨¨ 
)
¨¨ 
;
¨¨ 
w
≠≠ 
.
≠≠ 
Close
≠≠ 
(
≠≠ 
)
≠≠ 
;
≠≠ 
}
ÆÆ 
}
ØØ 	
}
ÀÀ 
}ÃÃ ı

>G:\_github\Swastika-Heart\src\Swastika\Common\Helper\Helper.cs
	namespace 	
Swastika
 
. 
UI 
. 
Base 
{		 
public 

static 
class 
	ApiHelper !
<! "
T" #
># $
{ 
public 
static 
	ApiResult 
<  
T  !
>! "
	GetResult# ,
(, -
int- 0
status1 7
,7 8
T9 :
data; ?
,? @
stringA G
responseKeyH S
,S T
ListU Y
<Y Z
stringZ `
>` a
errorsb h
)h i
{ 	
	ApiResult 
< 
T 
> 
result 
=  !
new" %
	ApiResult& /
</ 0
T0 1
>1 2
(2 3
)3 4
{ 
Status 
= 
status 
,  
ResponseKey 
= 
responseKey )
,) *
Data 
= 
data 
, 
Errors 
= 
errors 
,  
}   
;   
return"" 
result"" 
;"" 
}## 	
}$$ 
}%% Ç=
AG:\_github\Swastika-Heart\src\Swastika\Common\Helper\SEOHelper.cs
	namespace 	
Swastika
 
. 
Common 
. 
Helper  
{		 
public 

static 
class 
	SeoHelper !
{ 
public 
static 
string "
DeleteSpecialCharaters 3
(3 4
string4 :
str; >
)> ?
{ 	
const 
string 
replaceChar $
=% &
$str' )
;) *
string 
[ 
] 
pattern 
= 
{  
$str! $
,$ %
$str& )
,) *
$str+ /
,/ 0
$str1 4
,4 5
$str6 9
,9 :
$str; >
}? @
;@ A
foreach 
( 
string 
item  
in! #
pattern$ +
)+ ,
{ 
str 
= 
str 
. 
Replace !
(! "
item" &
,& '
replaceChar( 3
)3 4
;4 5
} 
return 
str 
; 
} 	
public&& 
static&& 
string&& 
GetSEOString&& )
(&&) *
string&&* 0
s&&1 2
)&&2 3
{'' 	
return(( 
!(( 
string(( 
.(( 
IsNullOrEmpty(( (
(((( )
s(() *
)((* +
?((, -
WhiteSpaceToHyphen((. @
(((@ A
ConvertToUnSign((A P
(((P Q"
DeleteSpecialCharaters((Q g
(((g h
s((h i
)((i j
)((j k
)((k l
:((m n
s((o p
;((p q
})) 	
public44 
static44 
string44 
ConvertToUnSign44 ,
(44, -
string44- 3
text444 8
)448 9
{55 	
if66 
(66 
text66 
!=66 
null66 
)66 
{77 
for88 
(88 
int88 
i88 
=88 
$num88 
;88  
i88! "
<88# $
$num88% '
;88' (
i88) *
++88* ,
)88, -
{99 
text:: 
=:: 
text:: 
.::  
Replace::  '
(::' (
(::( )
(::) *
char::* .
)::. /
i::/ 0
)::0 1
.::1 2
ToString::2 :
(::: ;
)::; <
,::< =
$str::> @
)::@ A
;::A B
};; 
for== 
(== 
int== 
i== 
=== 
$num== 
;==  
i==! "
<==# $
$num==% '
;==' (
i==) *
++==* ,
)==, -
{>> 
text?? 
=?? 
text?? 
.??  
Replace??  '
(??' (
(??( )
(??) *
char??* .
)??. /
i??/ 0
)??0 1
.??1 2
ToString??2 :
(??: ;
)??; <
,??< =
$str??> @
)??@ A
;??A B
}@@ 
forBB 
(BB 
intBB 
iBB 
=BB 
$numBB 
;BB  
iBB! "
<BB# $
$numBB% '
;BB' (
iBB) *
++BB* ,
)BB, -
{CC 
textDD 
=DD 
textDD 
.DD  
ReplaceDD  '
(DD' (
(DD( )
(DD) *
charDD* .
)DD. /
iDD/ 0
)DD0 1
.DD1 2
ToStringDD2 :
(DD: ;
)DD; <
,DD< =
$strDD> @
)DD@ A
;DDA B
}EE 
forGG 
(GG 
intGG 
iGG 
=GG 
$numGG  
;GG  !
iGG" #
<GG$ %
$numGG& )
;GG) *
iGG+ ,
++GG, .
)GG. /
{HH 
textII 
=II 
textII 
.II  
ReplaceII  '
(II' (
(II( )
(II) *
charII* .
)II. /
iII/ 0
)II0 1
.II1 2
ToStringII2 :
(II: ;
)II; <
,II< =
$strII> @
)II@ A
;IIA B
}JJ 
}KK 
elseLL 
{MM 
textNN 
=NN 
$strNN 
;NN 
}OO 
SystemRR 
.RR 
TextRR 
.RR 
RegularExpressionsRR *
.RR* +
RegexRR+ 0
regexRR1 6
=RR7 8
newRR9 <
SystemRR= C
.RRC D
TextRRD H
.RRH I
RegularExpressionsRRI [
.RR[ \
RegexRR\ a
(RRa b
$str	RRb Ö
)
RRÖ Ü
;
RRÜ á
stringTT 
strFormDTT 
=TT 
textTT "
.TT" #
	NormalizeTT# ,
(TT, -
SystemTT- 3
.TT3 4
TextTT4 8
.TT8 9
NormalizationFormTT9 J
.TTJ K
FormDTTK P
)TTP Q
;TTQ R
returnVV 
regexVV 
.VV 
ReplaceVV  
(VV  !
strFormDVV! )
,VV) *
StringVV+ 1
.VV1 2
EmptyVV2 7
)VV7 8
.VV8 9
ReplaceVV9 @
(VV@ A
$charVVA I
,VVI J
$charVVK N
)VVN O
.VVO P
ReplaceVVP W
(VVW X
$charVVX `
,VV` a
$charVVb e
)VVe f
;VVf g
}WW 	
publicaa 
staticaa 
stringaa 
WhiteSpaceToHyphenaa /
(aa/ 0
stringaa0 6
straa7 :
)aa: ;
{bb 	
charcc 
replaceCharcc 
=cc 
$charcc "
;cc" #
stringdd 
patterndd 
=dd 
$strdd "
;dd" #
MatchCollectionee 
matchsee "
=ee# $
Regexee% *
.ee* +
Matchesee+ 2
(ee2 3
stree3 6
,ee6 7
patternee8 ?
,ee? @
RegexOptionseeA M
.eeM N

IgnoreCaseeeN X
)eeX Y
;eeY Z
foreachff 
(ff 
Matchff 
mff 
inff 
matchsff  &
)ff& '
{gg 
strhh 
=hh 
strhh 
.hh 
Replacehh !
(hh! "
mhh" #
.hh# $
Valuehh$ )
[hh) *
$numhh* +
]hh+ ,
,hh, -
replaceCharhh. 9
)hh9 :
;hh: ;
}ii 
replaceCharjj 
=jj 
$charjj 
;jj 
patternkk 
=kk 
$strkk 
;kk 
matchsll 
=ll 
Regexll 
.ll 
Matchesll "
(ll" #
strll# &
,ll& '
patternll( /
,ll/ 0
RegexOptionsll1 =
.ll= >

IgnoreCasell> H
)llH I
;llI J
foreachmm 
(mm 
Matchmm 
mmm 
inmm 
matchsmm  &
)mm& '
{nn 
stroo 
=oo 
stroo 
.oo 
Replaceoo !
(oo! "
moo" #
.oo# $
Valueoo$ )
[oo) *
$numoo* +
]oo+ ,
,oo, -
replaceCharoo. 9
)oo9 :
;oo: ;
}pp 
returnqq 
strqq 
.qq 
ToLowerqq 
(qq 
)qq  
;qq  !
}rr 	
}ss 
}tt ≈
HG:\_github\Swastika-Heart\src\Swastika\Common\Helper\UnitOfWorkHelper.cs
	namespace 	
Swastika
 
. 
Common 
. 
Helper  
{		 
public

 

class

 
UnitOfWorkHelper

 !
<

! "

TDbContext

" ,
>

, -
where

. 3

TDbContext

4 >
:

? @
	DbContext

A J
{ 
public 
static 

TDbContext  
InitContext! ,
(, -
)- .
{ 	
Type 
	classType 
= 
typeof #
(# $

TDbContext$ .
). /
;/ 0
ConstructorInfo 
classConstructor ,
=- .
	classType/ 8
.8 9
GetConstructor9 G
(G H
newH K
TypeL P
[P Q
]Q R
{S T
}U V
)V W
;W X

TDbContext 
context 
=  
(! "

TDbContext" ,
), -
classConstructor- =
.= >
Invoke> D
(D E
newE H
objectI O
[O P
]P Q
{R S
}T U
)U V
;V W
return 
context 
; 
} 	
public 
static 
void 
HandleTransaction ,
(, -
bool- 1
	isSucceed2 ;
,; <
bool= A
isRootB H
,H I!
IDbContextTransactionJ _
transaction` k
)k l
{ 	
if 
( 
	isSucceed 
) 
{ 
if 
( 
isRoot 
) 
{ 
transaction 
.  
Commit  &
(& '
)' (
;( )
}   
}!! 
else"" 
{## 
if$$ 
($$ 
isRoot$$ 
)$$ 
{%% 
transaction'' 
.''  
Rollback''  (
(''( )
)'') *
;''* +
}(( 
})) 
}** 	
public,, 
static,, 
void,, 
InitTransaction,, *
(,,* +

TDbContext,,+ 5
_context,,6 >
,,,> ?!
IDbContextTransaction,,@ U
_transaction,,V b
,,,b c
out,,d g

TDbContext,,h r
context,,s z
,,,z {
out,,| #
IDbContextTransaction
,,Ä ï
transaction
,,ñ °
,
,,° ¢
out
,,£ ¶
bool
,,ß ´
isRoot
,,¨ ≤
)
,,≤ ≥
{-- 	
isRoot.. 
=.. 
_context.. 
==..  
null..! %
;..% &
context// 
=// 
_context// 
??// !
InitContext//" -
(//- .
)//. /
;/// 0
transaction00 
=00 
_transaction00 &
??00' )
context00* 1
.001 2
Database002 :
.00: ;
BeginTransaction00; K
(00K L
)00L M
;00M N
}11 	
}22 
}33 ∂
>G:\_github\Swastika-Heart\src\Swastika\Common\Utility\Const.cs
	namespace 	
Swastika
 
. 
Common 
. 
Utility !
{ 
public 

static 
class 
Const 
{ 
public 
const 
string $
CONST_DEFAULT_CONNECTION 4
=5 6
$str7 J
;J K
public 
const 
string !
CONST_CHAT_CONNECTION 1
=2 3
$str4 D
;D E
public 
const 
string !
CONST_FILE_APPSETTING 1
=2 3
$str4 F
;F G
public 
const 
string )
CONST_PATH_HOME_ACCESS_DENIED 9
=: ;
$str< Q
;Q R
public   
const   
string   !
CONST_PATH_HOME_ERROR   1
=  2 3
$str  4 A
;  A B
public%% 
const%% 
string%% !
CONST_SECTION_LOGGING%% 1
=%%2 3
$str%%4 =
;%%= >
public** 
const** 
string** 
CONST_ROUTE_DEFAULT** /
=**0 1
$str**2 ;
;**; <
public// 
const// 
string// 
CONST_APPID// '
=//( )
$str//* ;
;//; <
public44 
const44 
string44 
CONST_APPSECRET44 +
=44, -
$str44. ?
;44? @
public99 
const99 
string99 0
$CONST_DOMAIN_NOTIFICATION_KEY_COMMIT99 @
=99A B
$str99C K
;99K L
public>> 
const>> 
string>> 6
*CONST_DOMAIN_NOTIFICATION_KEY_COMMIT_VALUE>> F
=>>G H
$str>>I t
;>>t u
publicCC 
constCC 
stringCC %
CONST_DOMAIN_NOTIFICATIONCC 5
=CC6 7
$strCC8 L
;CCL M
publicHH 
constHH 
stringHH .
"CONST_DEFAULT_EXTENSIONS_FILE_PATHHH >
=HH? @
$strHHA [
;HH[ \
publicMM 
constMM 
stringMM -
!CONST_DEFAULT_EXTENSION_FILE_NAMEMM =
=MM> ?
$strMM@ Q
;MMQ R
}NN 
}OO Å
=G:\_github\Swastika-Heart\src\Swastika\Common\Utility\Enum.cs
	namespace 	
Swastika
 
. 
Common 
. 
Utility !
{ 
public 

class 
Enums 
{ 
public		 
enum		 
SWStatus		 
{

 	
Deleted 
= 
$num 
, 
Preview 
= 
$num 
, 
	Published 
= 
$num 
, 
Draft 
= 
$num 
, 
Schedule 
= 
$num 
} 	
public 
enum 
ResponseKey 
{ 	
NotFound 
, 
OK 
, 

BadRequest 
} 	
} 
} Œ
JG:\_github\Swastika-Heart\src\Swastika\Domain\Core\Models\SignalRModels.cs
	namespace 	
Swastika
 
. 
Domain 
. 
Core 
. 
Models %
{ 
public 

class 
SignalRClient 
{ 
public 
string 
UserId 
{ 
get "
;" #
set$ '
;' (
}) *
public 
string 
NickName 
{  
get! $
;$ %
set& )
;) *
}+ ,
public$$ 
string$$ 
ConnectionId$$ "
{$$# $
get$$% (
;$$( )
set$$* -
;$$- .
}$$/ 0
public,, 
DateTime,, 

JoinedDate,, "
{,,# $
get,,% (
;,,( )
set,,* -
;,,- .
},,/ 0
}-- 
}.. Ù
MG:\_github\Swastika-Heart\src\Swastika\Domain\Core\Models\SupportedCulture.cs
	namespace 	
Swastika
 
. 
Domain 
. 
Core 
. 
Models %
{ 
public 

class 
SupportedCulture !
{ 
[ 	
JsonProperty	 
( 
$str 
) 
] 
public 
int 
Id 
{ 
get 
; 
set  
;  !
}" #
[ 	
JsonProperty	 
( 
$str &
)& '
]' (
public 
string 
Specificulture $
{% &
get' *
;* +
set, /
;/ 0
}1 2
[&& 	
JsonProperty&&	 
(&& 
$str&& 
)&& 
]&& 
public'' 
string'' 
Lcid'' 
{'' 
get''  
;''  !
set''" %
;''% &
}''' (
[// 	
JsonProperty//	 
(// 
$str// 
)// 
]// 
public00 
string00 
Alias00 
{00 
get00 !
;00! "
set00# &
;00& '
}00( )
[88 	
JsonProperty88	 
(88 
$str88  
)88  !
]88! "
public99 
string99 
FullName99 
{99  
get99! $
;99$ %
set99& )
;99) *
}99+ ,
[AA 	
JsonPropertyAA	 
(AA 
$strAA #
)AA# $
]AA$ %
publicBB 
stringBB 
DescriptionBB !
{BB" #
getBB$ '
;BB' (
setBB) ,
;BB, -
}BB. /
[JJ 	
JsonPropertyJJ	 
(JJ 
$strJJ 
)JJ 
]JJ 
publicKK 
stringKK 
IconKK 
{KK 
getKK  
;KK  !
setKK" %
;KK% &
}KK' (
[SS 	
JsonPropertySS	 
(SS 
$strSS #
)SS# $
]SS$ %
publicTT 
boolTT 
IsSupportedTT 
{TT  !
getTT" %
;TT% &
setTT' *
;TT* +
}TT, -
}UU 
}VV ı
TG:\_github\Swastika-Heart\src\Swastika\Domain\Core\Repository\DefaultRepositories.cs
	namespace 	
Swastika
 
. 
Domain 
. 
Data 
. 

Repository )
{		 
public 

class 
DefaultRepository "
<" #

TDbContext# -
,- .
TModel/ 5
,5 6
TView7 <
>< =
:> ?
Swastika 
. 
Domain 
. 
Data 
. 

Repository '
.' (
ViewRepositoryBase( :
<: ;

TDbContext; E
,E F
TModelG M
,M N
TViewO T
>T U
where 

TDbContext 
: 
	DbContext $
where 
TModel 
: 
class 
where 
TView 
: 
Swastika 
. 
Domain %
.% &
Data& *
.* +

ViewModels+ 5
.5 6
ViewModelBase6 C
<C D

TDbContextD N
,N O
TModelP V
,V W
TViewX ]
>] ^
{ 
private 
static 
volatile 
DefaultRepository  1
<1 2

TDbContext2 <
,< =
TModel> D
,D E
TViewF K
>K L
instanceM U
;U V
private 
static 
readonly 
object  &
syncRoot' /
=0 1
new2 5
Object6 <
(< =
)= >
;> ?
private$$ 
DefaultRepository$$ !
($$! "
)$$" #
{%% 	
}&& 	
public.. 
static.. 
DefaultRepository.. '
<..' (

TDbContext..( 2
,..2 3
TModel..4 :
,..: ;
TView..< A
>..A B
Instance..C K
{..L M
get// 
{// 
if00 
(00 
instance00 
==00 
null00  $
)00$ %
{11 
lock22 
(22 
syncRoot22 "
)22" #
{33 
if44 
(44 
instance44 $
==44% '
null44( ,
)44, -
instance55 $
=55% &
new55' *
DefaultRepository55+ <
<55< =

TDbContext55= G
,55G H
TModel55I O
,55O P
TView55Q V
>55V W
(55W X
)55X Y
;55Y Z
}66 
}77 
return99 
instance99 
;99  
}:: 
};; 	
}<< 
}== ◊´
SG:\_github\Swastika-Heart\src\Swastika\Domain\Core\Repository\ViewRepositoryBase.cs
	namespace 	
Swastika
 
. 
Domain 
. 
Data 
. 

Repository )
{ 
public 

abstract 
class 
ViewRepositoryBase ,
<, -

TDbContext- 7
,7 8
TModel9 ?
,? @
TViewA F
>F G
where 

TDbContext 
: 
	DbContext $
where 
TModel 
: 
class 
where 
TView 
: 

ViewModels  
.  !
ViewModelBase! .
<. /

TDbContext/ 9
,9 :
TModel; A
,A B
TViewC H
>H I
{   
	protected$$ 
ViewRepositoryBase$$ $
($$$ %
)$$% &
{%% 	
}'' 	
public00 
virtual00 
bool00 
CheckIsExists00 )
(00) *
TModel00* 0
entity001 7
,007 8

TDbContext009 C
_context00D L
=00M N
null00O S
,00S T!
IDbContextTransaction00U j
_transaction00k w
=00x y
null00z ~
)00~ 
{11 	
UnitOfWorkHelper22 
<22 

TDbContext22 '
>22' (
.22( )
InitTransaction22) 8
(228 9
_context229 A
,22A B
_transaction22C O
,22O P
out22Q T

TDbContext22U _
context22` g
,22g h
out22i l"
IDbContextTransaction	22m Ç
transaction
22É é
,
22é è
out
22ê ì
bool
22î ò
isRoot
22ô ü
)
22ü †
;
22† °
try33 
{44 
return66 
context66 
.66 
Set66 "
<66" #
TModel66# )
>66) *
(66* +
)66+ ,
.66, -
Any66- 0
(660 1
e661 2
=>663 5
e666 7
==668 :
entity66; A
)66A B
;66B C
}:: 
catch;; 
(;; 
	Exception;; 
ex;; 
);;  
{<< 
LogErrorMessage== 
(==  
ex==  "
)==" #
;==# $
if>> 
(>> 
isRoot>> 
)>> 
{?? 
transaction@@ 
.@@  
Rollback@@  (
(@@( )
)@@) *
;@@* +
}AA 
returnBB 
falseBB 
;BB 
}CC 
finallyDD 
{EE 
ifFF 
(FF 
isRootFF 
)FF 
{GG 
transactionII 
.II  
DisposeII  '
(II' (
)II( )
;II) *
contextJJ 
.JJ 
DisposeJJ #
(JJ# $
)JJ$ %
;JJ% &
}KK 
}LL 
}MM 	
publicVV 
boolVV 
CheckIsExistsVV !
(VV! "
SystemVV" (
.VV( )
FuncVV) -
<VV- .
TModelVV. 4
,VV4 5
boolVV6 :
>VV: ;
	predicateVV< E
,VVE F

TDbContextVVG Q
_contextVVR Z
=VV[ \
nullVV] a
,VVa b!
IDbContextTransactionVVc x
_transaction	VVy Ö
=
VVÜ á
null
VVà å
)
VVå ç
{WW 	
UnitOfWorkHelperXX 
<XX 

TDbContextXX '
>XX' (
.XX( )
InitTransactionXX) 8
(XX8 9
_contextXX9 A
,XXA B
_transactionXXC O
,XXO P
outXXQ T

TDbContextXXU _
contextXX` g
,XXg h
outXXi l"
IDbContextTransaction	XXm Ç
transaction
XXÉ é
,
XXé è
out
XXê ì
bool
XXî ò
isRoot
XXô ü
)
XXü †
;
XX† °
tryYY 
{ZZ 
return\\ 
context\\ 
.\\ 
Set\\ "
<\\" #
TModel\\# )
>\\) *
(\\* +
)\\+ ,
.\\, -
Any\\- 0
(\\0 1
	predicate\\1 :
)\\: ;
;\\; <
}`` 
catchaa 
(aa 
	Exceptionaa 
exaa 
)aa  
{bb 
LogErrorMessagecc 
(cc  
excc  "
)cc" #
;cc# $
ifdd 
(dd 
isRootdd 
)dd 
{ee 
transactionff 
.ff  
Rollbackff  (
(ff( )
)ff) *
;ff* +
}gg 
returnhh 
falsehh 
;hh 
}ii 
finallyjj 
{kk 
ifll 
(ll 
isRootll 
)ll 
{mm 
transactionoo 
.oo  
Disposeoo  '
(oo' (
)oo( )
;oo) *
contextpp 
.pp 
Disposepp #
(pp# $
)pp$ %
;pp% &
}qq 
}rr 
}ss 	
public|| 
virtual|| 
RepositoryResponse|| )
<||) *
TView||* /
>||/ 0
CreateModel||1 <
(||< =
TView||= B
view||C G
,}} 	

TDbContext}}
 
_context}} 
=}} 
null}}  $
,}}$ %!
IDbContextTransaction}}& ;
_transaction}}< H
=}}I J
null}}K O
)}}O P
{~~ 	
bool 
isRoot 
= 
_context "
==# %
null& *
;* +

TDbContext
ÄÄ 
context
ÄÄ 
=
ÄÄ  
_context
ÄÄ! )
??
ÄÄ* ,
InitContext
ÄÄ- 8
(
ÄÄ8 9
)
ÄÄ9 :
;
ÄÄ: ;
var
ÅÅ 
transaction
ÅÅ 
=
ÅÅ 
_transaction
ÅÅ *
??
ÅÅ+ -
context
ÅÅ. 5
.
ÅÅ5 6
Database
ÅÅ6 >
.
ÅÅ> ?
BeginTransaction
ÅÅ? O
(
ÅÅO P
)
ÅÅP Q
;
ÅÅQ R 
RepositoryResponse
ÇÇ 
<
ÇÇ 
TView
ÇÇ $
>
ÇÇ$ %
result
ÇÇ& ,
=
ÇÇ- .
new
ÇÇ/ 2 
RepositoryResponse
ÇÇ3 E
<
ÇÇE F
TView
ÇÇF K
>
ÇÇK L
(
ÇÇL M
)
ÇÇM N
{
ÇÇO P
	IsSucceed
ÇÇQ Z
=
ÇÇ[ \
true
ÇÇ] a
}
ÇÇb c
;
ÇÇc d
try
ÉÉ 
{
ÑÑ 
context
ÖÖ 
.
ÖÖ 
Entry
ÖÖ 
(
ÖÖ 
view
ÖÖ "
.
ÖÖ" #
Model
ÖÖ# (
)
ÖÖ( )
.
ÖÖ) *
State
ÖÖ* /
=
ÖÖ0 1
EntityState
ÖÖ2 =
.
ÖÖ= >
Added
ÖÖ> C
;
ÖÖC D
result
ÜÜ 
.
ÜÜ 
	IsSucceed
ÜÜ  
=
ÜÜ! "
context
ÜÜ# *
.
ÜÜ* +
SaveChanges
ÜÜ+ 6
(
ÜÜ6 7
)
ÜÜ7 8
>
ÜÜ9 :
$num
ÜÜ; <
;
ÜÜ< =
result
áá 
.
áá 
Data
áá 
=
áá 
view
áá "
;
áá" #
UnitOfWorkHelper
àà  
<
àà  !

TDbContext
àà! +
>
àà+ ,
.
àà, -
HandleTransaction
àà- >
(
àà> ?
result
àà? E
.
ààE F
	IsSucceed
ààF O
,
ààO P
isRoot
ààQ W
,
ààW X
transaction
ààY d
)
ààd e
;
ààe f
return
ââ 
result
ââ 
;
ââ 
}
ää 
catch
ãã 
(
ãã 
	Exception
ãã 
ex
ãã 
)
ãã  
{
åå 
LogErrorMessage
çç 
(
çç  
ex
çç  "
)
çç" #
;
çç# $
result
éé 
.
éé 
	IsSucceed
éé  
=
éé! "
false
éé# (
;
éé( )
result
èè 
.
èè 
	Exception
èè  
=
èè! "
ex
èè# %
;
èè% &
if
êê 
(
êê 
isRoot
êê 
)
êê 
{
ëë 
transaction
íí 
.
íí  
Rollback
íí  (
(
íí( )
)
íí) *
;
íí* +
}
ìì 
return
îî 
result
îî 
;
îî 
}
ïï 
finally
ññ 
{
óó 
if
òò 
(
òò 
isRoot
òò 
)
òò 
{
ôô 
transaction
õõ 
.
õõ  
Dispose
õõ  '
(
õõ' (
)
õõ( )
;
õõ) *
context
úú 
.
úú 
Dispose
úú #
(
úú# $
)
úú$ %
;
úú% &
}
ùù 
}
ûû 
}
üü 	
public
®® 
virtual
®® 
async
®® 
Task
®® !
<
®®! " 
RepositoryResponse
®®" 4
<
®®4 5
TView
®®5 :
>
®®: ;
>
®®; <
CreateModelAsync
®®= M
(
®®M N
TView
®®N S
view
®®T X
,
©© 	

TDbContext
©©
 
_context
©© 
=
©© 
null
©©  $
,
©©$ %#
IDbContextTransaction
©©& ;
_transaction
©©< H
=
©©I J
null
©©K O
)
©©O P
{
™™ 	
UnitOfWorkHelper
´´ 
<
´´ 

TDbContext
´´ '
>
´´' (
.
´´( )
InitTransaction
´´) 8
(
´´8 9
_context
´´9 A
,
´´A B
_transaction
´´C O
,
´´O P
out
´´Q T

TDbContext
´´U _
context
´´` g
,
´´g h
out
´´i l$
IDbContextTransaction´´m Ç
transaction´´É é
,´´é è
out´´ê ì
bool´´î ò
isRoot´´ô ü
)´´ü †
;´´† ° 
RepositoryResponse
¨¨ 
<
¨¨ 
TView
¨¨ $
>
¨¨$ %
result
¨¨& ,
=
¨¨- .
new
¨¨/ 2 
RepositoryResponse
¨¨3 E
<
¨¨E F
TView
¨¨F K
>
¨¨K L
(
¨¨L M
)
¨¨M N
{
¨¨O P
	IsSucceed
¨¨Q Z
=
¨¨[ \
true
¨¨] a
}
¨¨b c
;
¨¨c d
try
≠≠ 
{
ÆÆ 
context
ØØ 
.
ØØ 
Entry
ØØ 
(
ØØ 
view
ØØ "
.
ØØ" #
Model
ØØ# (
)
ØØ( )
.
ØØ) *
State
ØØ* /
=
ØØ0 1
EntityState
ØØ2 =
.
ØØ= >
Added
ØØ> C
;
ØØC D
result
∞∞ 
.
∞∞ 
	IsSucceed
∞∞  
=
∞∞! "
await
∞∞# (
context
∞∞) 0
.
∞∞0 1
SaveChangesAsync
∞∞1 A
(
∞∞A B
)
∞∞B C
.
∞∞C D
ConfigureAwait
∞∞D R
(
∞∞R S
false
∞∞S X
)
∞∞X Y
>
∞∞Z [
$num
∞∞\ ]
;
∞∞] ^
result
±± 
.
±± 
Data
±± 
=
±± 
view
±± "
;
±±" #
UnitOfWorkHelper
≤≤  
<
≤≤  !

TDbContext
≤≤! +
>
≤≤+ ,
.
≤≤, -
HandleTransaction
≤≤- >
(
≤≤> ?
result
≤≤? E
.
≤≤E F
	IsSucceed
≤≤F O
,
≤≤O P
isRoot
≤≤Q W
,
≤≤W X
transaction
≤≤Y d
)
≤≤d e
;
≤≤e f
return
≥≥ 
result
≥≥ 
;
≥≥ 
}
¥¥ 
catch
µµ 
(
µµ 
	Exception
µµ 
ex
µµ 
)
µµ  
{
∂∂ 
return
∑∑ 
HandleException
∑∑ &
<
∑∑& '
TView
∑∑' ,
>
∑∑, -
(
∑∑- .
ex
∑∑. 0
,
∑∑0 1
isRoot
∑∑2 8
,
∑∑8 9
transaction
∑∑: E
)
∑∑E F
;
∑∑F G
}
∏∏ 
finally
ππ 
{
∫∫ 
if
ªª 
(
ªª 
isRoot
ªª 
)
ªª 
{
ºº 
transaction
ææ 
.
ææ  
Dispose
ææ  '
(
ææ' (
)
ææ( )
;
ææ) *
context
øø 
.
øø 
Dispose
øø #
(
øø# $
)
øø$ %
;
øø% &
}
¿¿ 
}
¡¡ 
}
¬¬ 	
public
ÀÀ 
virtual
ÀÀ  
RepositoryResponse
ÀÀ )
<
ÀÀ) *
TView
ÀÀ* /
>
ÀÀ/ 0
	EditModel
ÀÀ1 :
(
ÀÀ: ;
TView
ÀÀ; @
view
ÀÀA E
,
ÃÃ 	

TDbContext
ÃÃ
 
_context
ÃÃ 
=
ÃÃ 
null
ÃÃ  $
,
ÃÃ$ %#
IDbContextTransaction
ÃÃ& ;
_transaction
ÃÃ< H
=
ÃÃI J
null
ÃÃK O
)
ÃÃO P
{
ÕÕ 	
UnitOfWorkHelper
ŒŒ 
<
ŒŒ 

TDbContext
ŒŒ '
>
ŒŒ' (
.
ŒŒ( )
InitTransaction
ŒŒ) 8
(
ŒŒ8 9
_context
ŒŒ9 A
,
ŒŒA B
_transaction
ŒŒC O
,
ŒŒO P
out
ŒŒQ T

TDbContext
ŒŒU _
context
ŒŒ` g
,
ŒŒg h
out
ŒŒi l$
IDbContextTransactionŒŒm Ç
transactionŒŒÉ é
,ŒŒé è
outŒŒê ì
boolŒŒî ò
isRootŒŒô ü
)ŒŒü †
;ŒŒ† ° 
RepositoryResponse
œœ 
<
œœ 
TView
œœ $
>
œœ$ %
result
œœ& ,
=
œœ- .
new
œœ/ 2 
RepositoryResponse
œœ3 E
<
œœE F
TView
œœF K
>
œœK L
(
œœL M
)
œœM N
{
œœO P
	IsSucceed
œœQ Z
=
œœ[ \
true
œœ] a
}
œœb c
;
œœc d
try
–– 
{
—— 
context
”” 
.
”” 
Set
”” 
<
”” 
TModel
”” "
>
””" #
(
””# $
)
””$ %
.
””% &
Update
””& ,
(
””, -
view
””- 1
.
””1 2
Model
””2 7
)
””7 8
;
””8 9
result
‘‘ 
.
‘‘ 
	IsSucceed
‘‘  
=
‘‘! "
context
‘‘# *
.
‘‘* +
SaveChanges
‘‘+ 6
(
‘‘6 7
)
‘‘7 8
>
‘‘9 :
$num
‘‘; <
;
‘‘< =
result
’’ 
.
’’ 
Data
’’ 
=
’’ 
view
’’ "
;
’’" #
UnitOfWorkHelper
÷÷  
<
÷÷  !

TDbContext
÷÷! +
>
÷÷+ ,
.
÷÷, -
HandleTransaction
÷÷- >
(
÷÷> ?
result
÷÷? E
.
÷÷E F
	IsSucceed
÷÷F O
,
÷÷O P
isRoot
÷÷Q W
,
÷÷W X
transaction
÷÷Y d
)
÷÷d e
;
÷÷e f
return
ÿÿ 
result
ÿÿ 
;
ÿÿ 
}
ŸŸ 
catch
⁄⁄ 
(
⁄⁄ 
	Exception
⁄⁄ 
ex
⁄⁄ 
)
⁄⁄  
{
€€ 
return
‹‹ 
HandleException
‹‹ &
<
‹‹& '
TView
‹‹' ,
>
‹‹, -
(
‹‹- .
ex
‹‹. 0
,
‹‹0 1
isRoot
‹‹2 8
,
‹‹8 9
transaction
‹‹: E
)
‹‹E F
;
‹‹F G
}
›› 
finally
ﬁﬁ 
{
ﬂﬂ 
if
‡‡ 
(
‡‡ 
isRoot
‡‡ 
)
‡‡ 
{
·· 
transaction
„„ 
.
„„  
Dispose
„„  '
(
„„' (
)
„„( )
;
„„) *
context
‰‰ 
.
‰‰ 
Dispose
‰‰ #
(
‰‰# $
)
‰‰$ %
;
‰‰% &
}
ÂÂ 
}
ÊÊ 
}
ÁÁ 	
public
 
virtual
 
async
 
Task
 !
<
! " 
RepositoryResponse
" 4
<
4 5
TView
5 :
>
: ;
>
; <
EditModelAsync
= K
(
K L
TView
L Q
view
R V
,
V W

TDbContext
X b
_context
c k
=
l m
null
n r
,
r s$
IDbContextTransactiont â
_transactionä ñ
=ó ò
nullô ù
)ù û
{
ÒÒ 	
UnitOfWorkHelper
ÚÚ 
<
ÚÚ 

TDbContext
ÚÚ '
>
ÚÚ' (
.
ÚÚ( )
InitTransaction
ÚÚ) 8
(
ÚÚ8 9
_context
ÚÚ9 A
,
ÚÚA B
_transaction
ÚÚC O
,
ÚÚO P
out
ÚÚQ T

TDbContext
ÚÚU _
context
ÚÚ` g
,
ÚÚg h
out
ÚÚi l$
IDbContextTransactionÚÚm Ç
transactionÚÚÉ é
,ÚÚé è
outÚÚê ì
boolÚÚî ò
isRootÚÚô ü
)ÚÚü †
;ÚÚ† ° 
RepositoryResponse
ÛÛ 
<
ÛÛ 
TView
ÛÛ $
>
ÛÛ$ %
result
ÛÛ& ,
=
ÛÛ- .
new
ÛÛ/ 2 
RepositoryResponse
ÛÛ3 E
<
ÛÛE F
TView
ÛÛF K
>
ÛÛK L
(
ÛÛL M
)
ÛÛM N
{
ÛÛO P
	IsSucceed
ÛÛQ Z
=
ÛÛ[ \
true
ÛÛ] a
}
ÛÛb c
;
ÛÛc d
try
ÙÙ 
{
ıı 
context
˜˜ 
.
˜˜ 
Set
˜˜ 
<
˜˜ 
TModel
˜˜ "
>
˜˜" #
(
˜˜# $
)
˜˜$ %
.
˜˜% &
Update
˜˜& ,
(
˜˜, -
view
˜˜- 1
.
˜˜1 2
Model
˜˜2 7
)
˜˜7 8
;
˜˜8 9
result
¯¯ 
.
¯¯ 
	IsSucceed
¯¯  
=
¯¯! "
await
¯¯# (
context
¯¯) 0
.
¯¯0 1
SaveChangesAsync
¯¯1 A
(
¯¯A B
)
¯¯B C
.
¯¯C D
ConfigureAwait
¯¯D R
(
¯¯R S
false
¯¯S X
)
¯¯X Y
>
¯¯Z [
$num
¯¯\ ]
;
¯¯] ^
result
˘˘ 
.
˘˘ 
Data
˘˘ 
=
˘˘ 
view
˘˘ "
;
˘˘" #
UnitOfWorkHelper
˙˙  
<
˙˙  !

TDbContext
˙˙! +
>
˙˙+ ,
.
˙˙, -
HandleTransaction
˙˙- >
(
˙˙> ?
result
˙˙? E
.
˙˙E F
	IsSucceed
˙˙F O
,
˙˙O P
isRoot
˙˙Q W
,
˙˙W X
transaction
˙˙Y d
)
˙˙d e
;
˙˙e f
return
˚˚ 
result
˚˚ 
;
˚˚ 
}
¸¸ 
catch
˝˝ 
(
˝˝ 
	Exception
˝˝ 
ex
˝˝ 
)
˝˝  
{
˛˛ 
return
ˇˇ 
HandleException
ˇˇ &
<
ˇˇ& '
TView
ˇˇ' ,
>
ˇˇ, -
(
ˇˇ- .
ex
ˇˇ. 0
,
ˇˇ0 1
isRoot
ˇˇ2 8
,
ˇˇ8 9
transaction
ˇˇ: E
)
ˇˇE F
;
ˇˇF G
}
ÄÄ 
finally
ÅÅ 
{
ÇÇ 
if
ÉÉ 
(
ÉÉ 
isRoot
ÉÉ 
)
ÉÉ 
{
ÑÑ 
context
ÜÜ 
.
ÜÜ 
Dispose
ÜÜ #
(
ÜÜ# $
)
ÜÜ$ %
;
ÜÜ% &
}
áá 
}
àà 
}
ââ 	
public
íí 
virtual
íí  
RepositoryResponse
íí )
<
íí) *
TView
íí* /
>
íí/ 0
GetSingleModel
íí1 ?
(
íí? @

Expression
ìì 
<
ìì 
Func
ìì 
<
ìì 
TModel
ìì 
,
ìì 
bool
ìì  $
>
ìì$ %
>
ìì% &
	predicate
ìì' 0
,
îî 	

TDbContext
îî
 
_context
îî 
=
îî 
null
îî  $
,
îî$ %#
IDbContextTransaction
îî& ;
_transaction
îî< H
=
îîI J
null
îîK O
)
îîO P
{
ïï 	
UnitOfWorkHelper
ññ 
<
ññ 

TDbContext
ññ '
>
ññ' (
.
ññ( )
InitTransaction
ññ) 8
(
ññ8 9
_context
ññ9 A
,
ññA B
_transaction
ññC O
,
ññO P
out
ññQ T

TDbContext
ññU _
context
ññ` g
,
ññg h
out
ññi l$
IDbContextTransactionññm Ç
transactionññÉ é
,ññé è
outññê ì
boolññî ò
isRootññô ü
)ññü †
;ññ† °
try
óó 
{
òò 
context
ôô 
=
ôô 
_context
ôô "
??
ôô# %
InitContext
ôô& 1
(
ôô1 2
)
ôô2 3
;
ôô3 4
transaction
öö 
=
öö 
_transaction
öö *
??
öö+ -
context
öö. 5
.
öö5 6
Database
öö6 >
.
öö> ?
BeginTransaction
öö? O
(
ööO P
)
ööP Q
;
ööQ R
TModel
úú 
model
úú 
=
úú 
context
úú &
.
úú& '
Set
úú' *
<
úú* +
TModel
úú+ 1
>
úú1 2
(
úú2 3
)
úú3 4
.
úú4 5
SingleOrDefault
úú5 D
(
úúD E
	predicate
úúE N
)
úúN O
;
úúO P
if
ùù 
(
ùù 
model
ùù 
!=
ùù 
null
ùù !
)
ùù! "
{
ûû 
context
üü 
.
üü 
Entry
üü !
(
üü! "
model
üü" '
)
üü' (
.
üü( )
State
üü) .
=
üü/ 0
EntityState
üü1 <
.
üü< =
Detached
üü= E
;
üüE F
var
†† 

viewResult
†† "
=
††# $
	ParseView
††% .
(
††. /
model
††/ 4
,
††4 5
context
††6 =
,
††= >
transaction
††? J
)
††J K
;
††K L
return
°° 
new
°°  
RepositoryResponse
°° 1
<
°°1 2
TView
°°2 7
>
°°7 8
(
°°8 9
)
°°9 :
{
¢¢ 
	IsSucceed
££ !
=
££" #
true
££$ (
,
££( )
Data
§§ 
=
§§ 

viewResult
§§ )
}
•• 
;
•• 
}
¶¶ 
else
ßß 
{
®® 
return
©© 
new
©©  
RepositoryResponse
©© 1
<
©©1 2
TView
©©2 7
>
©©7 8
(
©©8 9
)
©©9 :
{
™™ 
	IsSucceed
´´ !
=
´´" #
false
´´$ )
,
´´) *
Data
¨¨ 
=
¨¨ 
default
¨¨ &
(
¨¨& '
TView
¨¨' ,
)
¨¨, -
}
≠≠ 
;
≠≠ 
}
ÆÆ 
}
ØØ 
catch
∞∞ 
(
∞∞ 
	Exception
∞∞ 
ex
∞∞ 
)
∞∞  
{
±± 
return
≤≤ 
HandleException
≤≤ &
<
≤≤& '
TView
≤≤' ,
>
≤≤, -
(
≤≤- .
ex
≤≤. 0
,
≤≤0 1
isRoot
≤≤2 8
,
≤≤8 9
transaction
≤≤: E
)
≤≤E F
;
≤≤F G
}
≥≥ 
finally
¥¥ 
{
µµ 
if
∂∂ 
(
∂∂ 
isRoot
∂∂ 
)
∂∂ 
{
∑∑ 
context
ππ 
?
ππ 
.
ππ 
Dispose
ππ $
(
ππ$ %
)
ππ% &
;
ππ& '
}
∫∫ 
}
ªª 
}
ºº 	
public
≈≈ 
virtual
≈≈ 
async
≈≈ 
Task
≈≈ !
<
≈≈! " 
RepositoryResponse
≈≈" 4
<
≈≈4 5
TView
≈≈5 :
>
≈≈: ;
>
≈≈; <!
GetSingleModelAsync
≈≈= P
(
≈≈P Q

Expression
∆∆ 
<
∆∆ 
Func
∆∆ 
<
∆∆ 
TModel
∆∆ 
,
∆∆ 
bool
∆∆  $
>
∆∆$ %
>
∆∆% &
	predicate
∆∆' 0
,
«« 	

TDbContext
««
 
_context
«« 
=
«« 
null
««  $
,
««$ %#
IDbContextTransaction
««& ;
_transaction
««< H
=
««I J
null
««K O
)
««O P
{
»» 	
UnitOfWorkHelper
…… 
<
…… 

TDbContext
…… '
>
……' (
.
……( )
InitTransaction
……) 8
(
……8 9
_context
……9 A
,
……A B
_transaction
……C O
,
……O P
out
……Q T

TDbContext
……U _
context
……` g
,
……g h
out
……i l$
IDbContextTransaction……m Ç
transaction……É é
,……é è
out……ê ì
bool……î ò
isRoot……ô ü
)……ü †
;……† °
try
   
{
ÀÀ 
TModel
ÃÃ 
model
ÃÃ 
=
ÃÃ 
await
ÃÃ $
context
ÃÃ% ,
.
ÃÃ, -
Set
ÃÃ- 0
<
ÃÃ0 1
TModel
ÃÃ1 7
>
ÃÃ7 8
(
ÃÃ8 9
)
ÃÃ9 :
.
ÃÃ: ;"
SingleOrDefaultAsync
ÃÃ; O
(
ÃÃO P
	predicate
ÃÃP Y
)
ÃÃY Z
.
ÃÃZ [
ConfigureAwait
ÃÃ[ i
(
ÃÃi j
false
ÃÃj o
)
ÃÃo p
;
ÃÃp q
if
ÕÕ 
(
ÕÕ 
model
ÕÕ 
!=
ÕÕ 
null
ÕÕ !
)
ÕÕ! "
{
ŒŒ 
context
œœ 
.
œœ 
Entry
œœ !
(
œœ! "
model
œœ" '
)
œœ' (
.
œœ( )
State
œœ) .
=
œœ/ 0
EntityState
œœ1 <
.
œœ< =
Detached
œœ= E
;
œœE F
var
—— 

viewResult
—— "
=
——# $
	ParseView
——% .
(
——. /
model
——/ 4
,
——4 5
context
——6 =
,
——= >
transaction
——? J
)
——J K
;
——K L
return
““ 
new
““  
RepositoryResponse
““ 1
<
““1 2
TView
““2 7
>
““7 8
(
““8 9
)
““9 :
{
”” 
	IsSucceed
‘‘ !
=
‘‘" #
true
‘‘$ (
,
‘‘( )
Data
’’ 
=
’’ 

viewResult
’’ )
}
÷÷ 
;
÷÷ 
}
◊◊ 
else
ÿÿ 
{
ŸŸ 
return
⁄⁄ 
new
⁄⁄  
RepositoryResponse
⁄⁄ 1
<
⁄⁄1 2
TView
⁄⁄2 7
>
⁄⁄7 8
(
⁄⁄8 9
)
⁄⁄9 :
{
€€ 
	IsSucceed
‹‹ !
=
‹‹" #
false
‹‹$ )
,
‹‹) *
Data
›› 
=
›› 
default
›› &
(
››& '
TView
››' ,
)
››, -
}
ﬁﬁ 
;
ﬁﬁ 
}
ﬂﬂ 
}
‡‡ 
catch
·· 
(
·· 
	Exception
·· 
ex
·· 
)
··  
{
‚‚ 
return
„„ 
HandleException
„„ &
<
„„& '
TView
„„' ,
>
„„, -
(
„„- .
ex
„„. 0
,
„„0 1
isRoot
„„2 8
,
„„8 9
transaction
„„: E
)
„„E F
;
„„F G
}
‰‰ 
finally
ÂÂ 
{
ÊÊ 
if
ÁÁ 
(
ÁÁ 
isRoot
ÁÁ 
)
ÁÁ 
{
ËË 
context
ÍÍ 
.
ÍÍ 
Dispose
ÍÍ #
(
ÍÍ# $
)
ÍÍ$ %
;
ÍÍ% &
}
ÎÎ 
}
ÏÏ 
}
ÌÌ 	
public
ÛÛ 
virtual
ÛÛ 

TDbContext
ÛÛ !
InitContext
ÛÛ" -
(
ÛÛ- .
)
ÛÛ. /
{
ÙÙ 	
Type
ıı 
	classType
ıı 
=
ıı 
typeof
ıı #
(
ıı# $

TDbContext
ıı$ .
)
ıı. /
;
ıı/ 0
ConstructorInfo
ˆˆ 
classConstructor
ˆˆ ,
=
ˆˆ- .
	classType
ˆˆ/ 8
.
ˆˆ8 9
GetConstructor
ˆˆ9 G
(
ˆˆG H
new
ˆˆH K
Type
ˆˆL P
[
ˆˆP Q
]
ˆˆQ R
{
ˆˆS T
}
ˆˆU V
)
ˆˆV W
;
ˆˆW X

TDbContext
˜˜ 
context
˜˜ 
=
˜˜  
(
˜˜! "

TDbContext
˜˜" ,
)
˜˜, -
classConstructor
˜˜- =
.
˜˜= >
Invoke
˜˜> D
(
˜˜D E
new
˜˜E H
object
˜˜I O
[
˜˜O P
]
˜˜P Q
{
˜˜R S
}
˜˜T U
)
˜˜U V
;
˜˜V W
return
˘˘ 
context
˘˘ 
;
˘˘ 
}
˙˙ 	
public
ÄÄ 
virtual
ÄÄ 
void
ÄÄ 
LogErrorMessage
ÄÄ +
(
ÄÄ+ ,
	Exception
ÄÄ, 5
ex
ÄÄ6 8
)
ÄÄ8 9
{
ÅÅ 	
}
ÇÇ 	
public
èè 
virtual
èè 
PaginationModel
èè &
<
èè& '
TView
èè' ,
>
èè, -
ParsePagingQuery
èè. >
(
èè> ?

IQueryable
èè? I
<
èèI J
TModel
èèJ P
>
èèP Q
query
èèR W
,
êê 	
string
êê
 !
orderByPropertyName
êê $
,
êê$ %
OrderByDirection
êê& 6
	direction
êê7 @
,
ëë 	
int
ëë
 
?
ëë 
pageSize
ëë 
,
ëë 
int
ëë 
?
ëë 
	pageIndex
ëë '
,
íí 	

TDbContext
íí
 
context
íí 
,
íí #
IDbContextTransaction
íí 3
transaction
íí4 ?
)
íí? @
{
ìì 	
List
îî 
<
îî 
TModel
îî 
>
îî 
lstModel
îî !
=
îî" #
new
îî$ '
List
îî( ,
<
îî, -
TModel
îî- 3
>
îî3 4
(
îî4 5
)
îî5 6
;
îî6 7
PaginationModel
ññ 
<
ññ 
TView
ññ !
>
ññ! "
result
ññ# )
=
ññ* +
new
ññ, /
PaginationModel
ññ0 ?
<
ññ? @
TView
ññ@ E
>
ññE F
(
ññF G
)
ññG H
{
óó 

TotalItems
òò 
=
òò 
query
òò "
.
òò" #
Count
òò# (
(
òò( )
)
òò) *
,
òò* +
	PageIndex
ôô 
=
ôô 
	pageIndex
ôô %
??
ôô& (
$num
ôô) *
}
öö 
;
öö 
dynamic
õõ 
orderBy
õõ 
=
õõ 
	GetLambda
õõ '
(
õõ' (!
orderByPropertyName
õõ( ;
)
õõ; <
;
õõ< =

IQueryable
úú 
<
úú 
TModel
úú 
>
úú 
sorted
úú %
=
úú& '
null
úú( ,
;
úú, -
try
ùù 
{
ûû 
result
üü 
.
üü 
PageSize
üü 
=
üü  !
pageSize
üü" *
??
üü+ -
result
üü. 4
.
üü4 5

TotalItems
üü5 ?
;
üü? @
if
°° 
(
°° 
pageSize
°° 
.
°° 
HasValue
°° %
)
°°% &
{
¢¢ 
result
££ 
.
££ 
	TotalPage
££ $
=
££% &
(
££' (
result
££( .
.
££. /

TotalItems
££/ 9
/
££: ;
pageSize
££< D
.
££D E
Value
££E J
)
££J K
+
££L M
(
££N O
result
££O U
.
££U V

TotalItems
££V `
%
££a b
pageSize
££c k
.
££k l
Value
££l q
>
££r s
$num
££t u
?
££v w
$num
££x y
:
££z {
$num
££| }
)
££} ~
;
££~ 
}
§§ 
switch
¶¶ 
(
¶¶ 
	direction
¶¶ !
)
¶¶! "
{
ßß 
case
®® 
OrderByDirection
®® )
.
®®) *

Descending
®®* 4
:
®®4 5
sorted
©© 
=
©©  
	Queryable
©©! *
.
©©* +
OrderByDescending
©©+ <
(
©©< =
query
©©= B
,
©©B C
orderBy
©©D K
)
©©K L
;
©©L M
if
™™ 
(
™™ 
pageSize
™™ $
.
™™$ %
HasValue
™™% -
)
™™- .
{
´´ 
lstModel
¨¨ $
=
¨¨% &
sorted
¨¨' -
.
¨¨- .
Skip
¨¨. 2
(
¨¨2 3
	pageIndex
¨¨3 <
.
¨¨< =
Value
¨¨= B
*
¨¨C D
pageSize
¨¨E M
.
¨¨M N
Value
¨¨N S
)
¨¨S T
.
≠≠ 
Take
≠≠ !
(
≠≠! "
pageSize
≠≠" *
.
≠≠* +
Value
≠≠+ 0
)
≠≠0 1
.
ÆÆ 
ToList
ÆÆ #
(
ÆÆ# $
)
ÆÆ$ %
;
ÆÆ% &
}
ØØ 
else
∞∞ 
{
±± 
lstModel
≤≤ $
=
≤≤% &
sorted
≤≤' -
.
≤≤- .
ToList
≤≤. 4
(
≤≤4 5
)
≤≤5 6
;
≤≤6 7
}
≥≥ 
break
¥¥ 
;
¥¥ 
default
∂∂ 
:
∂∂ 
sorted
∑∑ 
=
∑∑  
	Queryable
∑∑! *
.
∑∑* +
OrderBy
∑∑+ 2
(
∑∑2 3
query
∑∑3 8
,
∑∑8 9
orderBy
∑∑: A
)
∑∑A B
;
∑∑B C
if
∏∏ 
(
∏∏ 
pageSize
∏∏ $
.
∏∏$ %
HasValue
∏∏% -
)
∏∏- .
{
ππ 
lstModel
∫∫ $
=
∫∫% &
sorted
∫∫' -
.
ªª 
Skip
ªª !
(
ªª! "
	pageIndex
ªª" +
.
ªª+ ,
Value
ªª, 1
*
ªª2 3
pageSize
ªª4 <
.
ªª< =
Value
ªª= B
)
ªªB C
.
ºº 
Take
ºº !
(
ºº! "
pageSize
ºº" *
.
ºº* +
Value
ºº+ 0
)
ºº0 1
.
ΩΩ 
ToList
ΩΩ #
(
ΩΩ# $
)
ΩΩ$ %
;
ΩΩ% &
}
ææ 
else
øø 
{
¿¿ 
lstModel
¡¡ $
=
¡¡% &
sorted
¡¡' -
.
¡¡- .
ToList
¡¡. 4
(
¡¡4 5
)
¡¡5 6
;
¡¡6 7
}
¬¬ 
break
√√ 
;
√√ 
}
ƒƒ 
lstModel
≈≈ 
.
≈≈ 
ForEach
≈≈  
(
≈≈  !
model
≈≈! &
=>
≈≈' )
context
≈≈* 1
.
≈≈1 2
Entry
≈≈2 7
(
≈≈7 8
model
≈≈8 =
)
≈≈= >
.
≈≈> ?
State
≈≈? D
=
≈≈E F
EntityState
≈≈G R
.
≈≈R S
Detached
≈≈S [
)
≈≈[ \
;
≈≈\ ]
var
∆∆ 
lstView
∆∆ 
=
∆∆ 
	ParseView
∆∆ '
(
∆∆' (
lstModel
∆∆( 0
,
∆∆0 1
context
∆∆2 9
,
∆∆9 :
transaction
∆∆; F
)
∆∆F G
;
∆∆G H
result
«« 
.
«« 
Items
«« 
=
«« 
lstView
«« &
;
««& '
return
»» 
result
»» 
;
»» 
}
…… 
catch
   
(
   
	Exception
   
ex
   
)
    
{
ÀÀ 
LogErrorMessage
ÃÃ 
(
ÃÃ  
ex
ÃÃ  "
)
ÃÃ" #
;
ÃÃ# $
return
ÕÕ 
null
ÕÕ 
;
ÕÕ 
}
ŒŒ 
}
œœ 	
public
‹‹ 
virtual
‹‹ 
async
‹‹ 
Task
‹‹ !
<
‹‹! "
PaginationModel
‹‹" 1
<
‹‹1 2
TView
‹‹2 7
>
‹‹7 8
>
‹‹8 9#
ParsePagingQueryAsync
‹‹: O
(
‹‹O P

IQueryable
‹‹P Z
<
‹‹Z [
TModel
‹‹[ a
>
‹‹a b
query
‹‹c h
,
›› 	
string
››
 !
orderByPropertyName
›› $
,
››$ %
OrderByDirection
››& 6
	direction
››7 @
,
ﬁﬁ 	
int
ﬁﬁ
 
?
ﬁﬁ 
pageSize
ﬁﬁ 
,
ﬁﬁ 
int
ﬁﬁ 
?
ﬁﬁ 
	pageIndex
ﬁﬁ '
,
ﬂﬂ 	

TDbContext
ﬂﬂ
 
context
ﬂﬂ 
,
ﬂﬂ #
IDbContextTransaction
ﬂﬂ 3
transaction
ﬂﬂ4 ?
)
ﬂﬂ? @
{
‡‡ 	
List
·· 
<
·· 
TModel
·· 
>
·· 
lstModel
·· !
=
··" #
new
··$ '
List
··( ,
<
··, -
TModel
··- 3
>
··3 4
(
··4 5
)
··5 6
;
··6 7
PaginationModel
„„ 
<
„„ 
TView
„„ !
>
„„! "
result
„„# )
=
„„* +
new
„„, /
PaginationModel
„„0 ?
<
„„? @
TView
„„@ E
>
„„E F
(
„„F G
)
„„G H
{
‰‰ 

TotalItems
ÂÂ 
=
ÂÂ 
query
ÂÂ "
.
ÂÂ" #
Count
ÂÂ# (
(
ÂÂ( )
)
ÂÂ) *
,
ÂÂ* +
	PageIndex
ÊÊ 
=
ÊÊ 
	pageIndex
ÊÊ %
??
ÊÊ& (
$num
ÊÊ) *
}
ÁÁ 
;
ÁÁ 
dynamic
ËË 
orderBy
ËË 
=
ËË 
	GetLambda
ËË '
(
ËË' (!
orderByPropertyName
ËË( ;
)
ËË; <
;
ËË< =

IQueryable
ÈÈ 
<
ÈÈ 
TModel
ÈÈ 
>
ÈÈ 
sorted
ÈÈ %
=
ÈÈ& '
null
ÈÈ( ,
;
ÈÈ, -
try
ÍÍ 
{
ÎÎ 
result
ÏÏ 
.
ÏÏ 
PageSize
ÏÏ 
=
ÏÏ  !
pageSize
ÏÏ" *
??
ÏÏ+ -
result
ÏÏ. 4
.
ÏÏ4 5

TotalItems
ÏÏ5 ?
;
ÏÏ? @
if
ÓÓ 
(
ÓÓ 
pageSize
ÓÓ 
.
ÓÓ 
HasValue
ÓÓ %
)
ÓÓ% &
{
ÔÔ 
result
 
.
 
	TotalPage
 $
=
% &
(
' (
result
( .
.
. /

TotalItems
/ 9
/
: ;
pageSize
< D
.
D E
Value
E J
)
J K
+
L M
(
N O
result
O U
.
U V

TotalItems
V `
%
a b
pageSize
c k
.
k l
Value
l q
>
r s
$num
t u
?
v w
$num
x y
:
z {
$num
| }
)
} ~
;
~ 
}
ÒÒ 
switch
ÛÛ 
(
ÛÛ 
	direction
ÛÛ !
)
ÛÛ! "
{
ÙÙ 
case
ıı 
OrderByDirection
ıı )
.
ıı) *

Descending
ıı* 4
:
ıı4 5
sorted
ˆˆ 
=
ˆˆ  
	Queryable
ˆˆ! *
.
ˆˆ* +
OrderByDescending
ˆˆ+ <
(
ˆˆ< =
query
ˆˆ= B
,
ˆˆB C
orderBy
ˆˆD K
)
ˆˆK L
;
ˆˆL M
if
˜˜ 
(
˜˜ 
pageSize
˜˜ $
.
˜˜$ %
HasValue
˜˜% -
)
˜˜- .
{
¯¯ 
lstModel
˘˘ $
=
˘˘% &
await
˘˘' ,
sorted
˘˘- 3
.
˘˘3 4
Skip
˘˘4 8
(
˘˘8 9
	pageIndex
˘˘9 B
.
˘˘B C
Value
˘˘C H
*
˘˘I J
pageSize
˘˘K S
.
˘˘S T
Value
˘˘T Y
)
˘˘Y Z
.
˙˙ 
Take
˙˙ !
(
˙˙! "
pageSize
˙˙" *
.
˙˙* +
Value
˙˙+ 0
)
˙˙0 1
.
˚˚ 
ToListAsync
˚˚ (
(
˚˚( )
)
˚˚) *
.
˚˚* +
ConfigureAwait
˚˚+ 9
(
˚˚9 :
false
˚˚: ?
)
˚˚? @
;
˚˚@ A
}
¸¸ 
else
˝˝ 
{
˛˛ 
lstModel
ˇˇ $
=
ˇˇ% &
sorted
ˇˇ' -
.
ˇˇ- .
ToList
ˇˇ. 4
(
ˇˇ4 5
)
ˇˇ5 6
;
ˇˇ6 7
}
ÄÄ 
break
ÅÅ 
;
ÅÅ 
default
ÉÉ 
:
ÉÉ 
sorted
ÑÑ 
=
ÑÑ  
	Queryable
ÑÑ! *
.
ÑÑ* +
OrderBy
ÑÑ+ 2
(
ÑÑ2 3
query
ÑÑ3 8
,
ÑÑ8 9
orderBy
ÑÑ: A
)
ÑÑA B
;
ÑÑB C
if
ÖÖ 
(
ÖÖ 
pageSize
ÖÖ $
.
ÖÖ$ %
HasValue
ÖÖ% -
)
ÖÖ- .
{
ÜÜ 
lstModel
áá $
=
áá% &
await
áá' ,
sorted
áá- 3
.
àà 
Skip
àà !
(
àà! "
	pageIndex
àà" +
.
àà+ ,
Value
àà, 1
*
àà2 3
pageSize
àà4 <
.
àà< =
Value
àà= B
)
ààB C
.
ââ 
Take
ââ !
(
ââ! "
pageSize
ââ" *
.
ââ* +
Value
ââ+ 0
)
ââ0 1
.
ää 
ToListAsync
ää (
(
ää( )
)
ää) *
.
ää* +
ConfigureAwait
ää+ 9
(
ää9 :
false
ää: ?
)
ää? @
;
ää@ A
}
ãã 
else
åå 
{
çç 
lstModel
éé $
=
éé% &
await
éé' ,
sorted
éé- 3
.
éé3 4
ToListAsync
éé4 ?
(
éé? @
)
éé@ A
.
ééA B
ConfigureAwait
ééB P
(
ééP Q
false
ééQ V
)
ééV W
;
ééW X
}
èè 
break
êê 
;
êê 
}
ëë 
lstModel
íí 
.
íí 
ForEach
íí  
(
íí  !
model
íí! &
=>
íí' )
context
íí* 1
.
íí1 2
Entry
íí2 7
(
íí7 8
model
íí8 =
)
íí= >
.
íí> ?
State
íí? D
=
ííE F
EntityState
ííG R
.
ííR S
Detached
ííS [
)
íí[ \
;
íí\ ]
var
ìì 
lstView
ìì 
=
ìì 
	ParseView
ìì '
(
ìì' (
lstModel
ìì( 0
,
ìì0 1
context
ìì2 9
,
ìì9 :
transaction
ìì; F
)
ììF G
;
ììG H
result
îî 
.
îî 
Items
îî 
=
îî 
lstView
îî &
;
îî& '
return
ïï 
result
ïï 
;
ïï 
}
ññ 
catch
óó 
(
óó 
	Exception
óó 
ex
óó 
)
óó  
{
òò 
LogErrorMessage
ôô 
(
ôô  
ex
ôô  "
)
ôô" #
;
ôô# $
return
öö 
null
öö 
;
öö 
}
õõ 
}
úú 	
public
•• 
virtual
•• 
List
•• 
<
•• 
TView
•• !
>
••! "
	ParseView
••# ,
(
••, -
List
••- 1
<
••1 2
TModel
••2 8
>
••8 9
	lstModels
••: C
,
••C D

TDbContext
••E O
_context
••P X
=
••Y Z
null
••[ _
,
••_ `#
IDbContextTransaction
••a v
_transaction••w É
=••Ñ Ö
null••Ü ä
)••ä ã
{
¶¶ 	
List
ßß 
<
ßß 
TView
ßß 
>
ßß 
lstView
ßß 
=
ßß  !
new
ßß" %
List
ßß& *
<
ßß* +
TView
ßß+ 0
>
ßß0 1
(
ßß1 2
)
ßß2 3
;
ßß3 4
foreach
®® 
(
®® 
var
®® 
model
®® 
in
®® !
	lstModels
®®" +
)
®®+ ,
{
©© 
lstView
™™ 
.
™™ 
Add
™™ 
(
™™ 
	ParseView
™™ %
(
™™% &
model
™™& +
,
™™+ ,
_context
™™- 5
,
™™5 6
_transaction
™™7 C
)
™™C D
)
™™D E
;
™™E F
}
´´ 
return
≠≠ 
lstView
≠≠ 
;
≠≠ 
}
ÆÆ 	
public
∑∑ 
virtual
∑∑ 
TView
∑∑ 
	ParseView
∑∑ &
(
∑∑& '
TModel
∑∑' -
model
∑∑. 3
,
∑∑3 4

TDbContext
∑∑5 ?
_context
∑∑@ H
=
∑∑I J
null
∑∑K O
,
∑∑O P#
IDbContextTransaction
∑∑Q f
_transaction
∑∑g s
=
∑∑t u
null
∑∑v z
)
∑∑z {
{
∏∏ 	
Type
ππ 
	classType
ππ 
=
ππ 
typeof
ππ #
(
ππ# $
TView
ππ$ )
)
ππ) *
;
ππ* +
ConstructorInfo
∫∫ 
classConstructor
∫∫ ,
=
∫∫- .
	classType
∫∫/ 8
.
∫∫8 9
GetConstructor
∫∫9 G
(
∫∫G H
new
∫∫H K
Type
∫∫L P
[
∫∫P Q
]
∫∫Q R
{
∫∫S T
model
∫∫U Z
.
∫∫Z [
GetType
∫∫[ b
(
∫∫b c
)
∫∫c d
,
∫∫d e
typeof
∫∫f l
(
∫∫l m

TDbContext
∫∫m w
)
∫∫w x
,
∫∫x y
typeof∫∫z Ä
(∫∫Ä Å%
IDbContextTransaction∫∫Å ñ
)∫∫ñ ó
}∫∫ò ô
)∫∫ô ö
;∫∫ö õ
if
ªª 
(
ªª 
classConstructor
ªª  
!=
ªª! #
null
ªª$ (
)
ªª( )
{
ºº 
return
ΩΩ 
(
ΩΩ 
TView
ΩΩ 
)
ΩΩ 
classConstructor
ΩΩ .
.
ΩΩ. /
Invoke
ΩΩ/ 5
(
ΩΩ5 6
new
ΩΩ6 9
object
ΩΩ: @
[
ΩΩ@ A
]
ΩΩA B
{
ΩΩC D
model
ΩΩE J
,
ΩΩJ K
_context
ΩΩL T
,
ΩΩT U
_transaction
ΩΩV b
}
ΩΩc d
)
ΩΩd e
;
ΩΩe f
}
ææ 
else
øø 
{
¿¿ 
classConstructor
¡¡  
=
¡¡! "
	classType
¡¡# ,
.
¡¡, -
GetConstructor
¡¡- ;
(
¡¡; <
new
¡¡< ?
Type
¡¡@ D
[
¡¡D E
]
¡¡E F
{
¡¡G H
model
¡¡I N
.
¡¡N O
GetType
¡¡O V
(
¡¡V W
)
¡¡W X
}
¡¡Y Z
)
¡¡Z [
;
¡¡[ \
return
¬¬ 
(
¬¬ 
TView
¬¬ 
)
¬¬ 
classConstructor
¬¬ .
.
¬¬. /
Invoke
¬¬/ 5
(
¬¬5 6
new
¬¬6 9
object
¬¬: @
[
¬¬@ A
]
¬¬A B
{
¬¬C D
model
¬¬E J
}
¬¬K L
)
¬¬L M
;
¬¬M N
}
√√ 
}
ƒƒ 	
public
…… 
virtual
…… 
void
……  
RegisterAutoMapper
…… .
(
……. /
)
……/ 0
{
   	
Mapper
ÀÀ 
.
ÀÀ 

Initialize
ÀÀ 
(
ÀÀ 
cfg
ÀÀ !
=>
ÀÀ" $
{
ÃÃ 
cfg
ÕÕ 
.
ÕÕ 
	CreateMap
ÕÕ 
<
ÕÕ 
TModel
ÕÕ $
,
ÕÕ$ %
TView
ÕÕ& +
>
ÕÕ+ ,
(
ÕÕ, -
)
ÕÕ- .
;
ÕÕ. /
cfg
ŒŒ 
.
ŒŒ 
	CreateMap
ŒŒ 
<
ŒŒ 
TView
ŒŒ #
,
ŒŒ# $
TModel
ŒŒ% +
>
ŒŒ+ ,
(
ŒŒ, -
)
ŒŒ- .
;
ŒŒ. /
}
œœ 
)
œœ 
;
œœ 
}
–– 	
public
⁄⁄ 
virtual
⁄⁄  
RepositoryResponse
⁄⁄ )
<
⁄⁄) *
List
⁄⁄* .
<
⁄⁄. /
TView
⁄⁄/ 4
>
⁄⁄4 5
>
⁄⁄5 6
GetModelList
⁄⁄7 C
(
⁄⁄C D

TDbContext
⁄⁄D N
_context
⁄⁄O W
=
⁄⁄X Y
null
⁄⁄Z ^
,
⁄⁄^ _#
IDbContextTransaction
⁄⁄` u
_transaction⁄⁄v Ç
=⁄⁄É Ñ
null⁄⁄Ö â
)⁄⁄â ä
{
€€ 	
bool
‹‹ 
isRoot
‹‹ 
=
‹‹ 
_context
‹‹ "
==
‹‹# %
null
‹‹& *
;
‹‹* +
var
›› 
context
›› 
=
›› 
_context
›› "
??
››# %
InitContext
››& 1
(
››1 2
)
››2 3
;
››3 4
var
ﬁﬁ 
transaction
ﬁﬁ 
=
ﬁﬁ 
_transaction
ﬁﬁ *
??
ﬁﬁ+ -
context
ﬁﬁ. 5
.
ﬁﬁ5 6
Database
ﬁﬁ6 >
.
ﬁﬁ> ?
BeginTransaction
ﬁﬁ? O
(
ﬁﬁO P
)
ﬁﬁP Q
;
ﬁﬁQ R
List
ﬂﬂ 
<
ﬂﬂ 
TView
ﬂﬂ 
>
ﬂﬂ 
result
ﬂﬂ 
=
ﬂﬂ  
new
ﬂﬂ! $
List
ﬂﬂ% )
<
ﬂﬂ) *
TView
ﬂﬂ* /
>
ﬂﬂ/ 0
(
ﬂﬂ0 1
)
ﬂﬂ1 2
;
ﬂﬂ2 3
try
‡‡ 
{
·· 
var
‚‚ 
lstModel
‚‚ 
=
‚‚ 
context
‚‚ &
.
‚‚& '
Set
‚‚' *
<
‚‚* +
TModel
‚‚+ 1
>
‚‚1 2
(
‚‚2 3
)
‚‚3 4
.
‚‚4 5
ToList
‚‚5 ;
(
‚‚; <
)
‚‚< =
;
‚‚= >
lstModel
‰‰ 
.
‰‰ 
ForEach
‰‰  
(
‰‰  !
model
‰‰! &
=>
‰‰' )
context
‰‰* 1
.
‰‰1 2
Entry
‰‰2 7
(
‰‰7 8
model
‰‰8 =
)
‰‰= >
.
‰‰> ?
State
‰‰? D
=
‰‰E F
EntityState
‰‰G R
.
‰‰R S
Detached
‰‰S [
)
‰‰[ \
;
‰‰\ ]
result
ÂÂ 
=
ÂÂ 
	ParseView
ÂÂ "
(
ÂÂ" #
lstModel
ÂÂ# +
,
ÂÂ+ ,
context
ÂÂ- 4
,
ÂÂ4 5
transaction
ÂÂ6 A
)
ÂÂA B
;
ÂÂB C
return
ÊÊ 
new
ÊÊ  
RepositoryResponse
ÊÊ -
<
ÊÊ- .
List
ÊÊ. 2
<
ÊÊ2 3
TView
ÊÊ3 8
>
ÊÊ8 9
>
ÊÊ9 :
(
ÊÊ: ;
)
ÊÊ; <
{
ÁÁ 
	IsSucceed
ËË 
=
ËË 
true
ËË  $
,
ËË$ %
Data
ÈÈ 
=
ÈÈ 
result
ÈÈ !
}
ÍÍ 
;
ÍÍ 
}
ÎÎ 
catch
ÏÏ 
(
ÏÏ 
	Exception
ÏÏ 
ex
ÏÏ 
)
ÏÏ  
{
ÌÌ 
return
ÓÓ 
HandleException
ÓÓ &
<
ÓÓ& '
List
ÓÓ' +
<
ÓÓ+ ,
TView
ÓÓ, 1
>
ÓÓ1 2
>
ÓÓ2 3
(
ÓÓ3 4
ex
ÓÓ4 6
,
ÓÓ6 7
isRoot
ÓÓ8 >
,
ÓÓ> ?
transaction
ÓÓ@ K
)
ÓÓK L
;
ÓÓL M
}
ÔÔ 
finally
 
{
ÒÒ 
if
ÚÚ 
(
ÚÚ 
isRoot
ÚÚ 
)
ÚÚ 
{
ÛÛ 
context
ıı 
.
ıı 
Dispose
ıı #
(
ıı# $
)
ıı$ %
;
ıı% &
}
ˆˆ 
}
˜˜ 
}
¯¯ 	
public
ÑÑ 
virtual
ÑÑ  
RepositoryResponse
ÑÑ )
<
ÑÑ) *
PaginationModel
ÑÑ* 9
<
ÑÑ9 :
TView
ÑÑ: ?
>
ÑÑ? @
>
ÑÑ@ A
GetModelList
ÑÑB N
(
ÑÑN O
string
ÖÖ !
orderByPropertyName
ÖÖ "
,
ÖÖ" #
OrderByDirection
ÖÖ$ 4
	direction
ÖÖ5 >
,
ÖÖ> ?
int
ÖÖ@ C
?
ÖÖC D
pageSize
ÖÖE M
,
ÖÖM N
int
ÖÖO R
?
ÖÖR S
	pageIndex
ÖÖT ]
,
ÜÜ 	

TDbContext
ÜÜ
 
_context
ÜÜ 
=
ÜÜ 
null
ÜÜ  $
,
ÜÜ$ %#
IDbContextTransaction
ÜÜ& ;
_transaction
ÜÜ< H
=
ÜÜI J
null
ÜÜK O
)
ÜÜO P
{
áá 	
bool
àà 
isRoot
àà 
=
àà 
_context
àà "
==
àà# %
null
àà& *
;
àà* +
var
ââ 
context
ââ 
=
ââ 
_context
ââ "
??
ââ# %
InitContext
ââ& 1
(
ââ1 2
)
ââ2 3
;
ââ3 4
var
ää 
transaction
ää 
=
ää 
_transaction
ää *
??
ää+ -
context
ää. 5
.
ää5 6
Database
ää6 >
.
ää> ?
BeginTransaction
ää? O
(
ääO P
)
ääP Q
;
ääQ R
try
åå 
{
çç 
var
éé 
query
éé 
=
éé 
context
éé #
.
éé# $
Set
éé$ '
<
éé' (
TModel
éé( .
>
éé. /
(
éé/ 0
)
éé0 1
;
éé1 2
var
êê 
result
êê 
=
êê 
ParsePagingQuery
êê -
(
êê- .
query
êê. 3
,
êê3 4!
orderByPropertyName
êê5 H
,
êêH I
	direction
êêJ S
,
êêS T
pageSize
êêU ]
,
êê] ^
	pageIndex
êê_ h
,
ëë 
context
ëë 
,
ëë 
transaction
ëë &
)
ëë& '
;
ëë' (
return
ìì 
new
ìì  
RepositoryResponse
ìì -
<
ìì- .
PaginationModel
ìì. =
<
ìì= >
TView
ìì> C
>
ììC D
>
ììD E
(
ììE F
)
ììF G
{
îî 
	IsSucceed
ïï 
=
ïï 
true
ïï  $
,
ïï$ %
Data
ññ 
=
ññ 
result
ññ !
}
óó 
;
óó 
}
òò 
catch
ôô 
(
ôô 
	Exception
ôô 
ex
ôô 
)
ôô  
{
öö 
return
õõ 
HandleException
õõ &
<
õõ& '
PaginationModel
õõ' 6
<
õõ6 7
TView
õõ7 <
>
õõ< =
>
õõ= >
(
õõ> ?
ex
õõ? A
,
õõA B
isRoot
õõC I
,
õõI J
transaction
õõK V
)
õõV W
;
õõW X
}
úú 
finally
ùù 
{
ûû 
if
üü 
(
üü 
isRoot
üü 
)
üü 
{
†† 
context
¢¢ 
.
¢¢ 
Dispose
¢¢ #
(
¢¢# $
)
¢¢$ %
;
¢¢% &
}
££ 
}
§§ 
}
•• 	
public
≠≠ 
virtual
≠≠ 
async
≠≠ 
Task
≠≠ !
<
≠≠! " 
RepositoryResponse
≠≠" 4
<
≠≠4 5
List
≠≠5 9
<
≠≠9 :
TView
≠≠: ?
>
≠≠? @
>
≠≠@ A
>
≠≠A B
GetModelListAsync
≠≠C T
(
≠≠T U

TDbContext
≠≠U _
_context
≠≠` h
=
≠≠i j
null
≠≠k o
,
≠≠o p$
IDbContextTransaction≠≠q Ü
_transaction≠≠á ì
=≠≠î ï
null≠≠ñ ö
)≠≠ö õ
{
ÆÆ 	
bool
ØØ 
isRoot
ØØ 
=
ØØ 
_context
ØØ "
==
ØØ# %
null
ØØ& *
;
ØØ* +
var
∞∞ 
context
∞∞ 
=
∞∞ 
_context
∞∞ "
??
∞∞# %
InitContext
∞∞& 1
(
∞∞1 2
)
∞∞2 3
;
∞∞3 4
var
±± 
transaction
±± 
=
±± 
_transaction
±± *
??
±±+ -
context
±±. 5
.
±±5 6
Database
±±6 >
.
±±> ?
BeginTransaction
±±? O
(
±±O P
)
±±P Q
;
±±Q R
List
≤≤ 
<
≤≤ 
TView
≤≤ 
>
≤≤ 
result
≤≤ 
=
≤≤  
new
≤≤! $
List
≤≤% )
<
≤≤) *
TView
≤≤* /
>
≤≤/ 0
(
≤≤0 1
)
≤≤1 2
;
≤≤2 3
try
≥≥ 
{
¥¥ 
var
µµ 
lstModel
µµ 
=
µµ 
await
µµ $
context
µµ% ,
.
µµ, -
Set
µµ- 0
<
µµ0 1
TModel
µµ1 7
>
µµ7 8
(
µµ8 9
)
µµ9 :
.
µµ: ;
ToListAsync
µµ; F
(
µµF G
)
µµG H
.
µµH I
ConfigureAwait
µµI W
(
µµW X
false
µµX ]
)
µµ] ^
;
µµ^ _
lstModel
∑∑ 
.
∑∑ 
ForEach
∑∑  
(
∑∑  !
model
∑∑! &
=>
∑∑' )
context
∑∑* 1
.
∑∑1 2
Entry
∑∑2 7
(
∑∑7 8
model
∑∑8 =
)
∑∑= >
.
∑∑> ?
State
∑∑? D
=
∑∑E F
EntityState
∑∑G R
.
∑∑R S
Detached
∑∑S [
)
∑∑[ \
;
∑∑\ ]
result
∏∏ 
=
∏∏ 
	ParseView
∏∏ "
(
∏∏" #
lstModel
∏∏# +
,
∏∏+ ,
_context
∏∏- 5
,
∏∏5 6
_transaction
∏∏7 C
)
∏∏C D
;
∏∏D E
return
ππ 
new
ππ  
RepositoryResponse
ππ -
<
ππ- .
List
ππ. 2
<
ππ2 3
TView
ππ3 8
>
ππ8 9
>
ππ9 :
(
ππ: ;
)
ππ; <
{
∫∫ 
	IsSucceed
ªª 
=
ªª 
true
ªª  $
,
ªª$ %
Data
ºº 
=
ºº 
result
ºº !
}
ΩΩ 
;
ΩΩ 
}
ææ 
catch
øø 
(
øø 
	Exception
øø 
ex
øø 
)
øø  
{
¿¿ 
return
¡¡ 
HandleException
¡¡ &
<
¡¡& '
List
¡¡' +
<
¡¡+ ,
TView
¡¡, 1
>
¡¡1 2
>
¡¡2 3
(
¡¡3 4
ex
¡¡4 6
,
¡¡6 7
isRoot
¡¡8 >
,
¡¡> ?
transaction
¡¡@ K
)
¡¡K L
;
¡¡L M
}
¬¬ 
finally
√√ 
{
ƒƒ 
if
≈≈ 
(
≈≈ 
isRoot
≈≈ 
)
≈≈ 
{
∆∆ 
context
»» 
.
»» 
Dispose
»» #
(
»»# $
)
»»$ %
;
»»% &
}
…… 
}
   
}
ÀÀ 	
public
◊◊ 
virtual
◊◊ 
async
◊◊ 
Task
◊◊ !
<
◊◊! " 
RepositoryResponse
◊◊" 4
<
◊◊4 5
PaginationModel
◊◊5 D
<
◊◊D E
TView
◊◊E J
>
◊◊J K
>
◊◊K L
>
◊◊L M
GetModelListAsync
◊◊N _
(
◊◊_ `
string
ÿÿ !
orderByPropertyName
ÿÿ "
,
ÿÿ" #
OrderByDirection
ÿÿ$ 4
	direction
ÿÿ5 >
,
ÿÿ> ?
int
ÿÿ@ C
?
ÿÿC D
pageSize
ÿÿE M
,
ÿÿM N
int
ÿÿO R
?
ÿÿR S
	pageIndex
ÿÿT ]
,
ŸŸ 	

TDbContext
ŸŸ
 
_context
ŸŸ 
=
ŸŸ 
null
ŸŸ  $
,
ŸŸ$ %#
IDbContextTransaction
ŸŸ& ;
_transaction
ŸŸ< H
=
ŸŸI J
null
ŸŸK O
)
ŸŸO P
{
⁄⁄ 	
bool
€€ 
isRoot
€€ 
=
€€ 
_context
€€ "
==
€€# %
null
€€& *
;
€€* +
var
‹‹ 
context
‹‹ 
=
‹‹ 
_context
‹‹ "
??
‹‹# %
InitContext
‹‹& 1
(
‹‹1 2
)
‹‹2 3
;
‹‹3 4
var
›› 
transaction
›› 
=
›› 
_transaction
›› *
??
››+ -
context
››. 5
.
››5 6
Database
››6 >
.
››> ?
BeginTransaction
››? O
(
››O P
)
››P Q
;
››Q R
try
ﬂﬂ 
{
‡‡ 
var
·· 
query
·· 
=
·· 
context
·· #
.
··# $
Set
··$ '
<
··' (
TModel
··( .
>
··. /
(
··/ 0
)
··0 1
;
··1 2
var
„„ 
result
„„ 
=
„„ 
await
„„ "#
ParsePagingQueryAsync
„„# 8
(
„„8 9
query
„„9 >
,
„„> ?!
orderByPropertyName
„„@ S
,
„„S T
	direction
„„U ^
,
„„^ _
pageSize
„„` h
,
„„h i
	pageIndex
„„j s
,
„„s t
context
„„u |
,
„„| }
transaction„„~ â
)„„â ä
.„„ä ã
ConfigureAwait„„ã ô
(„„ô ö
false„„ö ü
)„„ü †
;„„† °
return
‰‰ 
new
‰‰  
RepositoryResponse
‰‰ -
<
‰‰- .
PaginationModel
‰‰. =
<
‰‰= >
TView
‰‰> C
>
‰‰C D
>
‰‰D E
(
‰‰E F
)
‰‰F G
{
ÂÂ 
	IsSucceed
ÊÊ 
=
ÊÊ 
true
ÊÊ  $
,
ÊÊ$ %
Data
ÁÁ 
=
ÁÁ 
result
ÁÁ !
}
ËË 
;
ËË 
}
ÈÈ 
catch
ÍÍ 
(
ÍÍ 
	Exception
ÍÍ 
ex
ÍÍ 
)
ÍÍ  
{
ÎÎ 
return
ÏÏ 
HandleException
ÏÏ &
<
ÏÏ& '
PaginationModel
ÏÏ' 6
<
ÏÏ6 7
TView
ÏÏ7 <
>
ÏÏ< =
>
ÏÏ= >
(
ÏÏ> ?
ex
ÏÏ? A
,
ÏÏA B
isRoot
ÏÏC I
,
ÏÏI J
transaction
ÏÏK V
)
ÏÏV W
;
ÏÏW X
}
ÌÌ 
finally
ÓÓ 
{
ÔÔ 
if
 
(
 
isRoot
 
)
 
{
ÒÒ 
context
ÛÛ 
.
ÛÛ 
Dispose
ÛÛ #
(
ÛÛ# $
)
ÛÛ$ %
;
ÛÛ% &
}
ÙÙ 
}
ıı 
}
ˆˆ 	
public
ÉÉ 
virtual
ÉÉ  
RepositoryResponse
ÉÉ )
<
ÉÉ) *
List
ÉÉ* .
<
ÉÉ. /
TView
ÉÉ/ 4
>
ÉÉ4 5
>
ÉÉ5 6
GetModelListBy
ÉÉ7 E
(
ÉÉE F

Expression
ÉÉF P
<
ÉÉP Q
Func
ÉÉQ U
<
ÉÉU V
TModel
ÉÉV \
,
ÉÉ\ ]
bool
ÉÉ^ b
>
ÉÉb c
>
ÉÉc d
	predicate
ÉÉe n
,
ÑÑ 	

TDbContext
ÑÑ
 
_context
ÑÑ 
=
ÑÑ 
null
ÑÑ  $
,
ÑÑ$ %#
IDbContextTransaction
ÑÑ& ;
_transaction
ÑÑ< H
=
ÑÑI J
null
ÑÑK O
)
ÑÑO P
{
ÖÖ 	
UnitOfWorkHelper
ÜÜ 
<
ÜÜ 

TDbContext
ÜÜ '
>
ÜÜ' (
.
ÜÜ( )
InitTransaction
ÜÜ) 8
(
ÜÜ8 9
_context
ÜÜ9 A
,
ÜÜA B
_transaction
ÜÜC O
,
ÜÜO P
out
ÜÜQ T

TDbContext
ÜÜU _
context
ÜÜ` g
,
ÜÜg h
out
ÜÜi l$
IDbContextTransactionÜÜm Ç
transactionÜÜÉ é
,ÜÜé è
outÜÜê ì
boolÜÜî ò
isRootÜÜô ü
)ÜÜü †
;ÜÜ† °
try
áá 
{
àà 
var
ââ 
lstModel
ââ 
=
ââ 
context
ââ &
.
ââ& '
Set
ââ' *
<
ââ* +
TModel
ââ+ 1
>
ââ1 2
(
ââ2 3
)
ââ3 4
.
ââ4 5
Where
ââ5 :
(
ââ: ;
	predicate
ââ; D
)
ââD E
.
ââE F
ToList
ââF L
(
ââL M
)
ââM N
;
ââN O
lstModel
ää 
.
ää 
ForEach
ää  
(
ää  !
model
ää! &
=>
ää' )
context
ää* 1
.
ää1 2
Entry
ää2 7
(
ää7 8
model
ää8 =
)
ää= >
.
ää> ?
State
ää? D
=
ääE F
EntityState
ääG R
.
ääR S
Detached
ääS [
)
ää[ \
;
ää\ ]
var
ãã 
lstViewResult
ãã !
=
ãã" #
	ParseView
ãã$ -
(
ãã- .
lstModel
ãã. 6
,
ãã6 7
_context
ãã8 @
,
ãã@ A
_transaction
ããB N
)
ããN O
;
ããO P
return
åå 
new
åå  
RepositoryResponse
åå -
<
åå- .
List
åå. 2
<
åå2 3
TView
åå3 8
>
åå8 9
>
åå9 :
(
åå: ;
)
åå; <
{
çç 
	IsSucceed
éé 
=
éé 
true
éé  $
,
éé$ %
Data
èè 
=
èè 
lstViewResult
èè (
}
êê 
;
êê 
}
ëë 
catch
íí 
(
íí 
	Exception
íí 
ex
íí 
)
íí  
{
ìì 
return
îî 
HandleException
îî &
<
îî& '
List
îî' +
<
îî+ ,
TView
îî, 1
>
îî1 2
>
îî2 3
(
îî3 4
ex
îî4 6
,
îî6 7
isRoot
îî8 >
,
îî> ?
transaction
îî@ K
)
îîK L
;
îîL M
}
ïï 
finally
ññ 
{
óó 
if
òò 
(
òò 
isRoot
òò 
)
òò 
{
ôô 
context
õõ 
.
õõ 
Dispose
õõ #
(
õõ# $
)
õõ$ %
;
õõ% &
}
úú 
}
ùù 
}
ûû 	
public
´´ 
virtual
´´  
RepositoryResponse
´´ )
<
´´) *
PaginationModel
´´* 9
<
´´9 :
TView
´´: ?
>
´´? @
>
´´@ A
GetModelListBy
´´B P
(
´´P Q

Expression
¨¨ 
<
¨¨ 
Func
¨¨ 
<
¨¨ 
TModel
¨¨ 
,
¨¨ 
bool
¨¨  $
>
¨¨$ %
>
¨¨% &
	predicate
¨¨' 0
,
¨¨0 1
string
¨¨2 8!
orderByPropertyName
¨¨9 L
,
¨¨L M
OrderByDirection
¨¨N ^
	direction
¨¨_ h
,
¨¨h i
int
¨¨j m
?
¨¨m n
pageSize
¨¨o w
,
¨¨w x
int
¨¨y |
?
¨¨| }
	pageIndex¨¨~ á
,
≠≠ 	

TDbContext
≠≠
 
_context
≠≠ 
=
≠≠ 
null
≠≠  $
,
≠≠$ %#
IDbContextTransaction
≠≠& ;
_transaction
≠≠< H
=
≠≠I J
null
≠≠K O
)
≠≠O P
{
ÆÆ 	
UnitOfWorkHelper
ØØ 
<
ØØ 

TDbContext
ØØ '
>
ØØ' (
.
ØØ( )
InitTransaction
ØØ) 8
(
ØØ8 9
_context
ØØ9 A
,
ØØA B
_transaction
ØØC O
,
ØØO P
out
ØØQ T

TDbContext
ØØU _
context
ØØ` g
,
ØØg h
out
ØØi l$
IDbContextTransactionØØm Ç
transactionØØÉ é
,ØØé è
outØØê ì
boolØØî ò
isRootØØô ü
)ØØü †
;ØØ† °
try
∞∞ 
{
±± 
var
≤≤ 
query
≤≤ 
=
≤≤ 
context
≤≤ #
.
≤≤# $
Set
≤≤$ '
<
≤≤' (
TModel
≤≤( .
>
≤≤. /
(
≤≤/ 0
)
≤≤0 1
.
≤≤1 2
Where
≤≤2 7
(
≤≤7 8
	predicate
≤≤8 A
)
≤≤A B
;
≤≤B C
var
≥≥ 
result
≥≥ 
=
≥≥ 
ParsePagingQuery
≥≥ -
(
≥≥- .
query
≥≥. 3
,
¥¥ !
orderByPropertyName
¥¥ %
,
¥¥% &
	direction
¥¥' 0
,
µµ 
pageSize
µµ 
,
µµ 
	pageIndex
µµ %
,
∂∂ 
context
∂∂ 
,
∂∂ 
transaction
∂∂ &
)
∂∂& '
;
∂∂' (
return
∑∑ 
new
∑∑  
RepositoryResponse
∑∑ -
<
∑∑- .
PaginationModel
∑∑. =
<
∑∑= >
TView
∑∑> C
>
∑∑C D
>
∑∑D E
(
∑∑E F
)
∑∑F G
{
∏∏ 
	IsSucceed
ππ 
=
ππ 
true
ππ  $
,
ππ$ %
Data
∫∫ 
=
∫∫ 
result
∫∫ !
}
ªª 
;
ªª 
}
ºº 
catch
ΩΩ 
(
ΩΩ 
	Exception
ΩΩ 
ex
ΩΩ 
)
ΩΩ  
{
ææ 
return
øø 
HandleException
øø &
<
øø& '
PaginationModel
øø' 6
<
øø6 7
TView
øø7 <
>
øø< =
>
øø= >
(
øø> ?
ex
øø? A
,
øøA B
isRoot
øøC I
,
øøI J
transaction
øøK V
)
øøV W
;
øøW X
}
¿¿ 
finally
¡¡ 
{
¬¬ 
if
√√ 
(
√√ 
isRoot
√√ 
)
√√ 
{
ƒƒ 
context
∆∆ 
.
∆∆ 
Dispose
∆∆ #
(
∆∆# $
)
∆∆$ %
;
∆∆% &
}
«« 
}
»» 
}
…… 	
public
““ 
virtual
““ 
async
““ 
Task
““ !
<
““! " 
RepositoryResponse
““" 4
<
““4 5
List
““5 9
<
““9 :
TView
““: ?
>
““? @
>
““@ A
>
““A B!
GetModelListByAsync
““C V
(
““V W

Expression
““W a
<
““a b
Func
““b f
<
““f g
TModel
““g m
,
““m n
bool
““o s
>
““s t
>
““t u
	predicate
““v 
,
”” 	

TDbContext
””
 
_context
”” 
=
”” 
null
””  $
,
””$ %#
IDbContextTransaction
””& ;
_transaction
””< H
=
””I J
null
””K O
)
””O P
{
‘‘ 	
UnitOfWorkHelper
’’ 
<
’’ 

TDbContext
’’ '
>
’’' (
.
’’( )
InitTransaction
’’) 8
(
’’8 9
_context
’’9 A
,
’’A B
_transaction
’’C O
,
’’O P
out
’’Q T

TDbContext
’’U _
context
’’` g
,
’’g h
out
’’i l$
IDbContextTransaction’’m Ç
transaction’’É é
,’’é è
out’’ê ì
bool’’î ò
isRoot’’ô ü
)’’ü †
;’’† °
try
◊◊ 
{
ÿÿ 
var
ŸŸ 
query
ŸŸ 
=
ŸŸ 
context
ŸŸ #
.
ŸŸ# $
Set
ŸŸ$ '
<
ŸŸ' (
TModel
ŸŸ( .
>
ŸŸ. /
(
ŸŸ/ 0
)
ŸŸ0 1
.
ŸŸ1 2
Where
ŸŸ2 7
(
ŸŸ7 8
	predicate
ŸŸ8 A
)
ŸŸA B
;
ŸŸB C
var
⁄⁄ 
lstModel
⁄⁄ 
=
⁄⁄ 
await
⁄⁄ $
query
⁄⁄% *
.
⁄⁄* +
ToListAsync
⁄⁄+ 6
(
⁄⁄6 7
)
⁄⁄7 8
.
⁄⁄8 9
ConfigureAwait
⁄⁄9 G
(
⁄⁄G H
false
⁄⁄H M
)
⁄⁄M N
;
⁄⁄N O
lstModel
€€ 
.
€€ 
ForEach
€€  
(
€€  !
model
€€! &
=>
€€' )
context
€€* 1
.
€€1 2
Entry
€€2 7
(
€€7 8
model
€€8 =
)
€€= >
.
€€> ?
State
€€? D
=
€€E F
EntityState
€€G R
.
€€R S
Detached
€€S [
)
€€[ \
;
€€\ ]
var
‹‹ 
result
‹‹ 
=
‹‹ 
	ParseView
‹‹ &
(
‹‹& '
lstModel
‹‹' /
,
‹‹/ 0
_context
‹‹1 9
,
‹‹9 :
_transaction
‹‹; G
)
‹‹G H
;
‹‹H I
return
›› 
new
››  
RepositoryResponse
›› -
<
››- .
List
››. 2
<
››2 3
TView
››3 8
>
››8 9
>
››9 :
(
››: ;
)
››; <
{
ﬁﬁ 
	IsSucceed
ﬂﬂ 
=
ﬂﬂ 
true
ﬂﬂ  $
,
ﬂﬂ$ %
Data
‡‡ 
=
‡‡ 
result
‡‡ !
}
·· 
;
·· 
}
‚‚ 
catch
„„ 
(
„„ 
	Exception
„„ 
ex
„„ 
)
„„  
{
‰‰ 
return
ÂÂ 
HandleException
ÂÂ &
<
ÂÂ& '
List
ÂÂ' +
<
ÂÂ+ ,
TView
ÂÂ, 1
>
ÂÂ1 2
>
ÂÂ2 3
(
ÂÂ3 4
ex
ÂÂ4 6
,
ÂÂ6 7
isRoot
ÂÂ8 >
,
ÂÂ> ?
transaction
ÂÂ@ K
)
ÂÂK L
;
ÂÂL M
}
ÊÊ 
finally
ÁÁ 
{
ËË 
if
ÈÈ 
(
ÈÈ 
isRoot
ÈÈ 
)
ÈÈ 
{
ÍÍ 
context
ÏÏ 
.
ÏÏ 
Dispose
ÏÏ #
(
ÏÏ# $
)
ÏÏ$ %
;
ÏÏ% &
}
ÌÌ 
}
ÓÓ 
}
ÔÔ 	
public
¸¸ 
virtual
¸¸ 
async
¸¸ 
Task
¸¸ !
<
¸¸! " 
RepositoryResponse
¸¸" 4
<
¸¸4 5
PaginationModel
¸¸5 D
<
¸¸D E
TView
¸¸E J
>
¸¸J K
>
¸¸K L
>
¸¸L M!
GetModelListByAsync
¸¸N a
(
¸¸a b

Expression
˝˝ 
<
˝˝ 
Func
˝˝ 
<
˝˝ 
TModel
˝˝ 
,
˝˝ 
bool
˝˝  $
>
˝˝$ %
>
˝˝% &
	predicate
˝˝' 0
,
˝˝0 1
string
˝˝2 8!
orderByPropertyName
˝˝9 L
,
˛˛ 	
OrderByDirection
˛˛
 
	direction
˛˛ $
,
˛˛$ %
int
˛˛& )
?
˛˛) *
pageSize
˛˛+ 3
,
˛˛3 4
int
˛˛5 8
?
˛˛8 9
	pageIndex
˛˛: C
,
ˇˇ 	

TDbContext
ˇˇ
 
_context
ˇˇ 
=
ˇˇ 
null
ˇˇ  $
,
ˇˇ$ %#
IDbContextTransaction
ˇˇ& ;
_transaction
ˇˇ< H
=
ˇˇI J
null
ˇˇK O
)
ˇˇO P
{
ÄÄ 	
UnitOfWorkHelper
ÅÅ 
<
ÅÅ 

TDbContext
ÅÅ '
>
ÅÅ' (
.
ÅÅ( )
InitTransaction
ÅÅ) 8
(
ÅÅ8 9
_context
ÅÅ9 A
,
ÅÅA B
_transaction
ÅÅC O
,
ÅÅO P
out
ÅÅQ T

TDbContext
ÅÅU _
context
ÅÅ` g
,
ÅÅg h
out
ÅÅi l$
IDbContextTransactionÅÅm Ç
transactionÅÅÉ é
,ÅÅé è
outÅÅê ì
boolÅÅî ò
isRootÅÅô ü
)ÅÅü †
;ÅÅ† °
try
ÇÇ 
{
ÉÉ 
var
ÑÑ 
query
ÑÑ 
=
ÑÑ 
context
ÑÑ #
.
ÑÑ# $
Set
ÑÑ$ '
<
ÑÑ' (
TModel
ÑÑ( .
>
ÑÑ. /
(
ÑÑ/ 0
)
ÑÑ0 1
.
ÑÑ1 2
Where
ÑÑ2 7
(
ÑÑ7 8
	predicate
ÑÑ8 A
)
ÑÑA B
;
ÑÑB C
var
ÜÜ 
result
ÜÜ 
=
ÜÜ 
await
ÜÜ "#
ParsePagingQueryAsync
ÜÜ# 8
(
ÜÜ8 9
query
ÜÜ9 >
,
áá !
orderByPropertyName
áá %
,
áá% &
	direction
áá' 0
,
àà 
pageSize
àà 
,
àà 
	pageIndex
àà %
,
ââ 
context
ââ 
,
ââ 
transaction
ââ &
)
ââ& '
.
ââ' (
ConfigureAwait
ââ( 6
(
ââ6 7
false
ââ7 <
)
ââ< =
;
ââ= >
return
ää 
new
ää  
RepositoryResponse
ää -
<
ää- .
PaginationModel
ää. =
<
ää= >
TView
ää> C
>
ääC D
>
ääD E
(
ääE F
)
ääF G
{
ãã 
	IsSucceed
åå 
=
åå 
true
åå  $
,
åå$ %
Data
çç 
=
çç 
result
çç !
}
éé 
;
éé 
}
èè 
catch
êê 
(
êê 
	Exception
êê 
ex
êê 
)
êê  
{
ëë 
return
íí 
HandleException
íí &
<
íí& '
PaginationModel
íí' 6
<
íí6 7
TView
íí7 <
>
íí< =
>
íí= >
(
íí> ?
ex
íí? A
,
ííA B
isRoot
ííC I
,
ííI J
transaction
ííK V
)
ííV W
;
ííW X
}
ìì 
finally
îî 
{
ïï 
if
ññ 
(
ññ 
isRoot
ññ 
)
ññ 
{
óó 
context
ôô 
.
ôô 
Dispose
ôô #
(
ôô# $
)
ôô$ %
;
ôô% &
}
öö 
}
õõ 
}
úú 	
public
®® 
virtual
®®  
RepositoryResponse
®® )
<
®®) *
List
®®* .
<
®®. /
TModel
®®/ 5
>
®®5 6
>
®®6 7
RemoveListModel
®®8 G
(
®®G H

Expression
®®H R
<
®®R S
Func
®®S W
<
®®W X
TModel
®®X ^
,
®®^ _
bool
®®` d
>
®®d e
>
®®e f
	predicate
®®g p
,
©© 	

TDbContext
©©
 
_context
©© 
=
©© 
null
©©  $
,
©©$ %#
IDbContextTransaction
©©& ;
_transaction
©©< H
=
©©I J
null
©©K O
)
©©O P
{
™™ 	
UnitOfWorkHelper
´´ 
<
´´ 

TDbContext
´´ '
>
´´' (
.
´´( )
InitTransaction
´´) 8
(
´´8 9
_context
´´9 A
,
´´A B
_transaction
´´C O
,
´´O P
out
´´Q T

TDbContext
´´U _
context
´´` g
,
´´g h
out
´´i l$
IDbContextTransaction´´m Ç
transaction´´É é
,´´é è
out´´ê ì
bool´´î ò
isRoot´´ô ü
)´´ü †
;´´† °
try
¨¨ 
{
≠≠ 
var
ÆÆ 
Items
ÆÆ 
=
ÆÆ 
context
ÆÆ #
.
ÆÆ# $
Set
ÆÆ$ '
<
ÆÆ' (
TModel
ÆÆ( .
>
ÆÆ. /
(
ÆÆ/ 0
)
ÆÆ0 1
.
ÆÆ1 2
Where
ÆÆ2 7
(
ÆÆ7 8
	predicate
ÆÆ8 A
)
ÆÆA B
.
ÆÆB C
ToList
ÆÆC I
(
ÆÆI J
)
ÆÆJ K
;
ÆÆK L
bool
ØØ 
result
ØØ 
=
ØØ 
true
ØØ "
;
ØØ" #
if
∞∞ 
(
∞∞ 
Items
∞∞ 
!=
∞∞ 
null
∞∞ !
)
∞∞! "
{
±± 
foreach
≤≤ 
(
≤≤ 
var
≤≤  
model
≤≤! &
in
≤≤' )
Items
≤≤* /
)
≤≤/ 0
{
≥≥ 
if
¥¥ 
(
¥¥ 
result
¥¥ "
)
¥¥" #
{
µµ 
var
∂∂ 
r
∂∂  !
=
∂∂" #
RemoveModel
∂∂$ /
(
∂∂/ 0
model
∂∂0 5
,
∂∂5 6
context
∂∂7 >
,
∂∂> ?
transaction
∂∂@ K
)
∂∂K L
;
∂∂L M
result
∑∑ "
=
∑∑# $
result
∑∑% +
&&
∑∑, .
r
∑∑/ 0
.
∑∑0 1
	IsSucceed
∑∑1 :
;
∑∑: ;
}
∏∏ 
else
ππ 
{
∫∫ 
break
ªª !
;
ªª! "
}
ºº 
}
ΩΩ 
UnitOfWorkHelper
øø $
<
øø$ %

TDbContext
øø% /
>
øø/ 0
.
øø0 1
HandleTransaction
øø1 B
(
øøB C
result
øøC I
,
øøI J
isRoot
øøK Q
,
øøQ R
transaction
øøS ^
)
øø^ _
;
øø_ `
return
¡¡ 
new
¡¡  
RepositoryResponse
¡¡ 1
<
¡¡1 2
List
¡¡2 6
<
¡¡6 7
TModel
¡¡7 =
>
¡¡= >
>
¡¡> ?
(
¡¡? @
)
¡¡@ A
{
¬¬ 
	IsSucceed
√√ !
=
√√" #
result
√√$ *
,
√√* +
Data
ƒƒ 
=
ƒƒ 
Items
ƒƒ $
}
≈≈ 
;
≈≈ 
}
∆∆ 
else
«« 
{
»» 
return
…… 
new
……  
RepositoryResponse
…… 1
<
……1 2
List
……2 6
<
……6 7
TModel
……7 =
>
……= >
>
……> ?
(
……? @
)
……@ A
{
   
	IsSucceed
ÀÀ !
=
ÀÀ" #
result
ÀÀ$ *
,
ÀÀ* +
Data
ÃÃ 
=
ÃÃ 
Items
ÃÃ $
}
ÕÕ 
;
ÕÕ 
}
ŒŒ 
}
œœ 
catch
–– 
(
–– 
	Exception
–– 
ex
–– 
)
––  
{
—— 
return
““ 
HandleException
““ &
<
““& '
List
““' +
<
““+ ,
TModel
““, 2
>
““2 3
>
““3 4
(
““4 5
ex
““5 7
,
““7 8
isRoot
““9 ?
,
““? @
transaction
““A L
)
““L M
;
““M N
}
”” 
finally
‘‘ 
{
’’ 
if
÷÷ 
(
÷÷ 
isRoot
÷÷ 
)
÷÷ 
{
◊◊ 
context
ŸŸ 
.
ŸŸ 
Dispose
ŸŸ #
(
ŸŸ# $
)
ŸŸ$ %
;
ŸŸ% &
}
⁄⁄ 
}
€€ 
}
‹‹ 	
public
ÊÊ 
virtual
ÊÊ 
async
ÊÊ 
Task
ÊÊ !
<
ÊÊ! " 
RepositoryResponse
ÊÊ" 4
<
ÊÊ4 5
List
ÊÊ5 9
<
ÊÊ9 :
TModel
ÊÊ: @
>
ÊÊ@ A
>
ÊÊA B
>
ÊÊB C"
RemoveListModelAsync
ÊÊD X
(
ÊÊX Y

Expression
ÊÊY c
<
ÊÊc d
Func
ÊÊd h
<
ÊÊh i
TModel
ÊÊi o
,
ÊÊo p
bool
ÊÊq u
>
ÊÊu v
>
ÊÊv w
	predicateÊÊx Å
,
ÁÁ 	

TDbContext
ÁÁ
 
_context
ÁÁ 
=
ÁÁ 
null
ÁÁ  $
,
ÁÁ$ %#
IDbContextTransaction
ÁÁ& ;
_transaction
ÁÁ< H
=
ÁÁI J
null
ÁÁK O
)
ÁÁO P
{
ËË 	
UnitOfWorkHelper
ÈÈ 
<
ÈÈ 

TDbContext
ÈÈ '
>
ÈÈ' (
.
ÈÈ( )
InitTransaction
ÈÈ) 8
(
ÈÈ8 9
_context
ÈÈ9 A
,
ÈÈA B
_transaction
ÈÈC O
,
ÈÈO P
out
ÈÈQ T

TDbContext
ÈÈU _
context
ÈÈ` g
,
ÈÈg h
out
ÈÈi l$
IDbContextTransactionÈÈm Ç
transactionÈÈÉ é
,ÈÈé è
outÈÈê ì
boolÈÈî ò
isRootÈÈô ü
)ÈÈü †
;ÈÈ† °
try
ÍÍ 
{
ÎÎ 
var
ÏÏ 
Items
ÏÏ 
=
ÏÏ 
await
ÏÏ !
context
ÏÏ" )
.
ÏÏ) *
Set
ÏÏ* -
<
ÏÏ- .
TModel
ÏÏ. 4
>
ÏÏ4 5
(
ÏÏ5 6
)
ÏÏ6 7
.
ÏÏ7 8
Where
ÏÏ8 =
(
ÏÏ= >
	predicate
ÏÏ> G
)
ÏÏG H
.
ÏÏH I
ToListAsync
ÏÏI T
(
ÏÏT U
)
ÏÏU V
.
ÏÏV W
ConfigureAwait
ÏÏW e
(
ÏÏe f
false
ÏÏf k
)
ÏÏk l
;
ÏÏl m
bool
ÌÌ 
result
ÌÌ 
=
ÌÌ 
true
ÌÌ "
;
ÌÌ" #
if
ÓÓ 
(
ÓÓ 
Items
ÓÓ 
!=
ÓÓ 
null
ÓÓ !
)
ÓÓ! "
{
ÔÔ 
foreach
 
(
 
var
  
model
! &
in
' )
Items
* /
)
/ 0
{
ÒÒ 
if
ÚÚ 
(
ÚÚ 
result
ÚÚ "
)
ÚÚ" #
{
ÛÛ 
var
ÙÙ 
r
ÙÙ  !
=
ÙÙ" #
await
ÙÙ$ )
RemoveModelAsync
ÙÙ* :
(
ÙÙ: ;
model
ÙÙ; @
,
ÙÙ@ A
context
ÙÙB I
,
ÙÙI J
transaction
ÙÙK V
)
ÙÙV W
.
ÙÙW X
ConfigureAwait
ÙÙX f
(
ÙÙf g
false
ÙÙg l
)
ÙÙl m
;
ÙÙm n
result
ıı "
=
ıı# $
result
ıı% +
&&
ıı, .
r
ıı/ 0
.
ıı0 1
	IsSucceed
ıı1 :
;
ıı: ;
}
ˆˆ 
else
˜˜ 
{
¯¯ 
break
˘˘ !
;
˘˘! "
}
˙˙ 
}
˚˚ 
UnitOfWorkHelper
˝˝ $
<
˝˝$ %

TDbContext
˝˝% /
>
˝˝/ 0
.
˝˝0 1
HandleTransaction
˝˝1 B
(
˝˝B C
result
˝˝C I
,
˝˝I J
isRoot
˝˝K Q
,
˝˝Q R
transaction
˝˝S ^
)
˝˝^ _
;
˝˝_ `
return
ˇˇ 
new
ˇˇ  
RepositoryResponse
ˇˇ 1
<
ˇˇ1 2
List
ˇˇ2 6
<
ˇˇ6 7
TModel
ˇˇ7 =
>
ˇˇ= >
>
ˇˇ> ?
(
ˇˇ? @
)
ˇˇ@ A
{
ÄÄ 
	IsSucceed
ÅÅ !
=
ÅÅ" #
result
ÅÅ$ *
,
ÅÅ* +
Data
ÇÇ 
=
ÇÇ 
Items
ÇÇ $
}
ÉÉ 
;
ÉÉ 
}
ÑÑ 
else
ÖÖ 
{
ÜÜ 
return
áá 
new
áá  
RepositoryResponse
áá 1
<
áá1 2
List
áá2 6
<
áá6 7
TModel
áá7 =
>
áá= >
>
áá> ?
(
áá? @
)
áá@ A
{
àà 
	IsSucceed
ââ !
=
ââ" #
true
ââ$ (
,
ââ( )
Data
ää 
=
ää 
Items
ää $
}
ãã 
;
ãã 
}
åå 
}
çç 
catch
éé 
(
éé 
	Exception
éé 
ex
éé 
)
éé  
{
èè 
return
êê 
HandleException
êê &
<
êê& '
List
êê' +
<
êê+ ,
TModel
êê, 2
>
êê2 3
>
êê3 4
(
êê4 5
ex
êê5 7
,
êê7 8
isRoot
êê9 ?
,
êê? @
transaction
êêA L
)
êêL M
;
êêM N
}
ëë 
finally
íí 
{
ìì 
if
îî 
(
îî 
isRoot
îî 
)
îî 
{
ïï 
context
óó 
.
óó 
Dispose
óó #
(
óó# $
)
óó$ %
;
óó% &
}
òò 
}
ôô 
}
öö 	
public
§§ 
virtual
§§  
RepositoryResponse
§§ )
<
§§) *
TModel
§§* 0
>
§§0 1
RemoveModel
§§2 =
(
§§= >

Expression
§§> H
<
§§H I
Func
§§I M
<
§§M N
TModel
§§N T
,
§§T U
bool
§§V Z
>
§§Z [
>
§§[ \
	predicate
§§] f
,
§§f g

TDbContext
§§h r
_context
§§s {
=
§§| }
null§§~ Ç
,§§Ç É%
IDbContextTransaction§§Ñ ô
_transaction§§ö ¶
=§§ß ®
null§§© ≠
)§§≠ Æ
{
•• 	
UnitOfWorkHelper
¶¶ 
<
¶¶ 

TDbContext
¶¶ '
>
¶¶' (
.
¶¶( )
InitTransaction
¶¶) 8
(
¶¶8 9
_context
¶¶9 A
,
¶¶A B
_transaction
¶¶C O
,
¶¶O P
out
¶¶Q T

TDbContext
¶¶U _
context
¶¶` g
,
¶¶g h
out
¶¶i l$
IDbContextTransaction¶¶m Ç
transaction¶¶É é
,¶¶é è
out¶¶ê ì
bool¶¶î ò
isRoot¶¶ô ü
)¶¶ü †
;¶¶† °
try
ßß 
{
®® 
TModel
©© 
model
©© 
=
©© 
context
©© &
.
©©& '
Set
©©' *
<
©©* +
TModel
©©+ 1
>
©©1 2
(
©©2 3
)
©©3 4
.
©©4 5
FirstOrDefault
©©5 C
(
©©C D
	predicate
©©D M
)
©©M N
;
©©N O
bool
™™ 
result
™™ 
=
™™ 
true
™™ "
;
™™" #
if
´´ 
(
´´ 
model
´´ 
!=
´´ 
null
´´ !
&&
´´" $
CheckIsExists
´´% 2
(
´´2 3
model
´´3 8
,
´´8 9
context
´´: A
,
´´A B
transaction
´´C N
)
´´N O
)
´´O P
{
¨¨ 
context
≠≠ 
.
≠≠ 
Entry
≠≠ !
(
≠≠! "
model
≠≠" '
)
≠≠' (
.
≠≠( )
State
≠≠) .
=
≠≠/ 0
EntityState
≠≠1 <
.
≠≠< =
Deleted
≠≠= D
;
≠≠D E
result
ÆÆ 
=
ÆÆ 
context
ÆÆ $
.
ÆÆ$ %
SaveChanges
ÆÆ% 0
(
ÆÆ0 1
)
ÆÆ1 2
>
ÆÆ3 4
$num
ÆÆ5 6
;
ÆÆ6 7
}
ØØ 
UnitOfWorkHelper
±±  
<
±±  !

TDbContext
±±! +
>
±±+ ,
.
±±, -
HandleTransaction
±±- >
(
±±> ?
result
±±? E
,
±±E F
isRoot
±±G M
,
±±M N
transaction
±±O Z
)
±±Z [
;
±±[ \
return
≥≥ 
new
≥≥  
RepositoryResponse
≥≥ -
<
≥≥- .
TModel
≥≥. 4
>
≥≥4 5
(
≥≥5 6
)
≥≥6 7
{
¥¥ 
	IsSucceed
µµ 
=
µµ 
result
µµ  &
,
µµ& '
Data
∂∂ 
=
∂∂ 
model
∂∂  
}
∑∑ 
;
∑∑ 
}
∏∏ 
catch
ππ 
(
ππ 
	Exception
ππ 
ex
ππ 
)
ππ  
{
∫∫ 
return
ªª 
HandleException
ªª &
<
ªª& '
TModel
ªª' -
>
ªª- .
(
ªª. /
ex
ªª/ 1
,
ªª1 2
isRoot
ªª3 9
,
ªª9 :
transaction
ªª; F
)
ªªF G
;
ªªG H
}
ºº 
finally
ΩΩ 
{
ææ 
if
øø 
(
øø 
isRoot
øø 
)
øø 
{
¿¿ 
context
¬¬ 
.
¬¬ 
Dispose
¬¬ #
(
¬¬# $
)
¬¬$ %
;
¬¬% &
}
√√ 
}
ƒƒ 
}
≈≈ 	
public
œœ 
virtual
œœ  
RepositoryResponse
œœ )
<
œœ) *
TModel
œœ* 0
>
œœ0 1
RemoveModel
œœ2 =
(
œœ= >
TModel
œœ> D
model
œœE J
,
œœJ K

TDbContext
œœL V
_context
œœW _
=
œœ` a
null
œœb f
,
œœf g#
IDbContextTransaction
œœh }
_transactionœœ~ ä
=œœã å
nullœœç ë
)œœë í
{
–– 	
UnitOfWorkHelper
—— 
<
—— 

TDbContext
—— '
>
——' (
.
——( )
InitTransaction
——) 8
(
——8 9
_context
——9 A
,
——A B
_transaction
——C O
,
——O P
out
——Q T

TDbContext
——U _
context
——` g
,
——g h
out
——i l$
IDbContextTransaction——m Ç
transaction——É é
,——é è
out——ê ì
bool——î ò
isRoot——ô ü
)——ü †
;——† °
try
““ 
{
”” 
bool
‘‘ 
result
‘‘ 
=
‘‘ 
true
‘‘ "
;
‘‘" #
if
’’ 
(
’’ 
model
’’ 
!=
’’ 
null
’’ !
&&
’’" $
CheckIsExists
’’% 2
(
’’2 3
model
’’3 8
,
’’8 9
context
’’: A
,
’’A B
transaction
’’C N
)
’’N O
)
’’O P
{
÷÷ 
context
◊◊ 
.
◊◊ 
Entry
◊◊ !
(
◊◊! "
model
◊◊" '
)
◊◊' (
.
◊◊( )
State
◊◊) .
=
◊◊/ 0
EntityState
◊◊1 <
.
◊◊< =
Deleted
◊◊= D
;
◊◊D E
result
ÿÿ 
=
ÿÿ 
context
ÿÿ $
.
ÿÿ$ %
SaveChanges
ÿÿ% 0
(
ÿÿ0 1
)
ÿÿ1 2
>
ÿÿ3 4
$num
ÿÿ5 6
;
ÿÿ6 7
}
ŸŸ 
UnitOfWorkHelper
€€  
<
€€  !

TDbContext
€€! +
>
€€+ ,
.
€€, -
HandleTransaction
€€- >
(
€€> ?
result
€€? E
,
€€E F
isRoot
€€G M
,
€€M N
transaction
€€O Z
)
€€Z [
;
€€[ \
return
›› 
new
››  
RepositoryResponse
›› -
<
››- .
TModel
››. 4
>
››4 5
(
››5 6
)
››6 7
{
ﬁﬁ 
	IsSucceed
ﬂﬂ 
=
ﬂﬂ 
result
ﬂﬂ  &
,
ﬂﬂ& '
Data
‡‡ 
=
‡‡ 
model
‡‡  
}
·· 
;
·· 
}
‚‚ 
catch
„„ 
(
„„ 
	Exception
„„ 
ex
„„ 
)
„„  
{
‰‰ 
return
ÂÂ 
HandleException
ÂÂ &
<
ÂÂ& '
TModel
ÂÂ' -
>
ÂÂ- .
(
ÂÂ. /
ex
ÂÂ/ 1
,
ÂÂ1 2
isRoot
ÂÂ3 9
,
ÂÂ9 :
transaction
ÂÂ; F
)
ÂÂF G
;
ÂÂG H
}
ÊÊ 
finally
ÁÁ 
{
ËË 
if
ÈÈ 
(
ÈÈ 
isRoot
ÈÈ 
)
ÈÈ 
{
ÍÍ 
context
ÏÏ 
.
ÏÏ 
Dispose
ÏÏ #
(
ÏÏ# $
)
ÏÏ$ %
;
ÏÏ% &
}
ÌÌ 
}
ÓÓ 
}
ÔÔ 	
public
˘˘ 
virtual
˘˘ 
async
˘˘ 
Task
˘˘ !
<
˘˘! " 
RepositoryResponse
˘˘" 4
<
˘˘4 5
TModel
˘˘5 ;
>
˘˘; <
>
˘˘< =
RemoveModelAsync
˘˘> N
(
˘˘N O

Expression
˘˘O Y
<
˘˘Y Z
Func
˘˘Z ^
<
˘˘^ _
TModel
˘˘_ e
,
˘˘e f
bool
˘˘g k
>
˘˘k l
>
˘˘l m
	predicate
˘˘n w
,
˘˘w x

TDbContext˘˘y É
_context˘˘Ñ å
=˘˘ç é
null˘˘è ì
,˘˘ì î%
IDbContextTransaction˘˘ï ™
_transaction˘˘´ ∑
=˘˘∏ π
null˘˘∫ æ
)˘˘æ ø
{
˙˙ 	
UnitOfWorkHelper
˚˚ 
<
˚˚ 

TDbContext
˚˚ '
>
˚˚' (
.
˚˚( )
InitTransaction
˚˚) 8
(
˚˚8 9
_context
˚˚9 A
,
˚˚A B
_transaction
˚˚C O
,
˚˚O P
out
˚˚Q T

TDbContext
˚˚U _
context
˚˚` g
,
˚˚g h
out
˚˚i l$
IDbContextTransaction˚˚m Ç
transaction˚˚É é
,˚˚é è
out˚˚ê ì
bool˚˚î ò
isRoot˚˚ô ü
)˚˚ü †
;˚˚† °
try
¸¸ 
{
˝˝ 
TModel
˛˛ 
model
˛˛ 
=
˛˛ 
await
˛˛ $
context
˛˛% ,
.
˛˛, -
Set
˛˛- 0
<
˛˛0 1
TModel
˛˛1 7
>
˛˛7 8
(
˛˛8 9
)
˛˛9 :
.
˛˛: ;!
FirstOrDefaultAsync
˛˛; N
(
˛˛N O
	predicate
˛˛O X
)
˛˛X Y
.
˛˛Y Z
ConfigureAwait
˛˛Z h
(
˛˛h i
false
˛˛i n
)
˛˛n o
;
˛˛o p
bool
ˇˇ 
result
ˇˇ 
=
ˇˇ 
true
ˇˇ "
;
ˇˇ" #
if
Ä	Ä	 
(
Ä	Ä	 
model
Ä	Ä	 
!=
Ä	Ä	 
null
Ä	Ä	 !
&&
Ä	Ä	" $
CheckIsExists
Ä	Ä	% 2
(
Ä	Ä	2 3
model
Ä	Ä	3 8
,
Ä	Ä	8 9
context
Ä	Ä	: A
,
Ä	Ä	A B
transaction
Ä	Ä	C N
)
Ä	Ä	N O
)
Ä	Ä	O P
{
Å	Å	 
context
Ç	Ç	 
.
Ç	Ç	 
Entry
Ç	Ç	 !
(
Ç	Ç	! "
model
Ç	Ç	" '
)
Ç	Ç	' (
.
Ç	Ç	( )
State
Ç	Ç	) .
=
Ç	Ç	/ 0
EntityState
Ç	Ç	1 <
.
Ç	Ç	< =
Deleted
Ç	Ç	= D
;
Ç	Ç	D E
result
É	É	 
=
É	É	 
await
É	É	 "
context
É	É	# *
.
É	É	* +
SaveChangesAsync
É	É	+ ;
(
É	É	; <
)
É	É	< =
.
É	É	= >
ConfigureAwait
É	É	> L
(
É	É	L M
false
É	É	M R
)
É	É	R S
>
É	É	T U
$num
É	É	V W
;
É	É	W X
}
Ñ	Ñ	 
UnitOfWorkHelper
Ü	Ü	  
<
Ü	Ü	  !

TDbContext
Ü	Ü	! +
>
Ü	Ü	+ ,
.
Ü	Ü	, -
HandleTransaction
Ü	Ü	- >
(
Ü	Ü	> ?
result
Ü	Ü	? E
,
Ü	Ü	E F
isRoot
Ü	Ü	G M
,
Ü	Ü	M N
transaction
Ü	Ü	O Z
)
Ü	Ü	Z [
;
Ü	Ü	[ \
return
à	à	 
new
à	à	  
RepositoryResponse
à	à	 -
<
à	à	- .
TModel
à	à	. 4
>
à	à	4 5
(
à	à	5 6
)
à	à	6 7
{
â	â	 
	IsSucceed
ä	ä	 
=
ä	ä	 
result
ä	ä	  &
,
ä	ä	& '
Data
ã	ã	 
=
ã	ã	 
model
ã	ã	  
}
å	å	 
;
å	å	 
}
ç	ç	 
catch
é	é	 
(
é	é	 
	Exception
é	é	 
ex
é	é	 
)
é	é	  
{
è	è	 
return
ê	ê	 
HandleException
ê	ê	 &
<
ê	ê	& '
TModel
ê	ê	' -
>
ê	ê	- .
(
ê	ê	. /
ex
ê	ê	/ 1
,
ê	ê	1 2
isRoot
ê	ê	3 9
,
ê	ê	9 :
transaction
ê	ê	; F
)
ê	ê	F G
;
ê	ê	G H
}
ë	ë	 
finally
í	í	 
{
ì	ì	 
if
î	î	 
(
î	î	 
isRoot
î	î	 
)
î	î	 
{
ï	ï	 
context
ó	ó	 
.
ó	ó	 
Dispose
ó	ó	 #
(
ó	ó	# $
)
ó	ó	$ %
;
ó	ó	% &
}
ò	ò	 
}
ô	ô	 
}
ö	ö	 	
public
§	§	 
virtual
§	§	 
async
§	§	 
Task
§	§	 !
<
§	§	! " 
RepositoryResponse
§	§	" 4
<
§	§	4 5
TModel
§	§	5 ;
>
§	§	; <
>
§	§	< =
RemoveModelAsync
§	§	> N
(
§	§	N O
TModel
§	§	O U
model
§	§	V [
,
§	§	[ \

TDbContext
§	§	] g
_context
§	§	h p
=
§	§	q r
null
§	§	s w
,
§	§	w x$
IDbContextTransaction§	§	y é
_transaction§	§	è õ
=§	§	ú ù
null§	§	û ¢
)§	§	¢ £
{
•	•	 	
UnitOfWorkHelper
¶	¶	 
<
¶	¶	 

TDbContext
¶	¶	 '
>
¶	¶	' (
.
¶	¶	( )
InitTransaction
¶	¶	) 8
(
¶	¶	8 9
_context
¶	¶	9 A
,
¶	¶	A B
_transaction
¶	¶	C O
,
¶	¶	O P
out
¶	¶	Q T

TDbContext
¶	¶	U _
context
¶	¶	` g
,
¶	¶	g h
out
¶	¶	i l$
IDbContextTransaction¶	¶	m Ç
transaction¶	¶	É é
,¶	¶	é è
out¶	¶	ê ì
bool¶	¶	î ò
isRoot¶	¶	ô ü
)¶	¶	ü †
;¶	¶	† °
try
ß	ß	 
{
®	®	 
bool
©	©	 
result
©	©	 
=
©	©	 
true
©	©	 "
;
©	©	" #
if
™	™	 
(
™	™	 
model
™	™	 
!=
™	™	 
null
™	™	 !
&&
™	™	" $
CheckIsExists
™	™	% 2
(
™	™	2 3
model
™	™	3 8
,
™	™	8 9
context
™	™	: A
,
™	™	A B
transaction
™	™	C N
)
™	™	N O
)
™	™	O P
{
´	´	 
context
¨	¨	 
.
¨	¨	 
Entry
¨	¨	 !
(
¨	¨	! "
model
¨	¨	" '
)
¨	¨	' (
.
¨	¨	( )
State
¨	¨	) .
=
¨	¨	/ 0
EntityState
¨	¨	1 <
.
¨	¨	< =
Deleted
¨	¨	= D
;
¨	¨	D E
result
≠	≠	 
=
≠	≠	 
await
≠	≠	 "
context
≠	≠	# *
.
≠	≠	* +
SaveChangesAsync
≠	≠	+ ;
(
≠	≠	; <
)
≠	≠	< =
.
≠	≠	= >
ConfigureAwait
≠	≠	> L
(
≠	≠	L M
false
≠	≠	M R
)
≠	≠	R S
>
≠	≠	T U
$num
≠	≠	V W
;
≠	≠	W X
}
Æ	Æ	 
UnitOfWorkHelper
∞	∞	  
<
∞	∞	  !

TDbContext
∞	∞	! +
>
∞	∞	+ ,
.
∞	∞	, -
HandleTransaction
∞	∞	- >
(
∞	∞	> ?
result
∞	∞	? E
,
∞	∞	E F
isRoot
∞	∞	G M
,
∞	∞	M N
transaction
∞	∞	O Z
)
∞	∞	Z [
;
∞	∞	[ \
return
≤	≤	 
new
≤	≤	  
RepositoryResponse
≤	≤	 -
<
≤	≤	- .
TModel
≤	≤	. 4
>
≤	≤	4 5
(
≤	≤	5 6
)
≤	≤	6 7
{
≥	≥	 
	IsSucceed
¥	¥	 
=
¥	¥	 
result
¥	¥	  &
,
¥	¥	& '
Data
µ	µ	 
=
µ	µ	 
model
µ	µ	  
}
∂	∂	 
;
∂	∂	 
}
∑	∑	 
catch
∏	∏	 
(
∏	∏	 
	Exception
∏	∏	 
ex
∏	∏	 
)
∏	∏	  
{
π	π	 
return
∫	∫	 
HandleException
∫	∫	 &
<
∫	∫	& '
TModel
∫	∫	' -
>
∫	∫	- .
(
∫	∫	. /
ex
∫	∫	/ 1
,
∫	∫	1 2
isRoot
∫	∫	3 9
,
∫	∫	9 :
transaction
∫	∫	; F
)
∫	∫	F G
;
∫	∫	G H
}
ª	ª	 
finally
º	º	 
{
Ω	Ω	 
if
æ	æ	 
(
æ	æ	 
isRoot
æ	æ	 
)
æ	æ	 
{
ø	ø	 
context
¡	¡	 
.
¡	¡	 
Dispose
¡	¡	 #
(
¡	¡	# $
)
¡	¡	$ %
;
¡	¡	% &
}
¬	¬	 
}
√	√	 
}
ƒ	ƒ	 	
public
Œ	Œ	 
virtual
Œ	Œ	  
RepositoryResponse
Œ	Œ	 )
<
Œ	Œ	) *
TView
Œ	Œ	* /
>
Œ	Œ	/ 0
	SaveModel
Œ	Œ	1 :
(
Œ	Œ	: ;
TView
Œ	Œ	; @
view
Œ	Œ	A E
,
Œ	Œ	E F
bool
Œ	Œ	G K
isSaveSubModels
Œ	Œ	L [
=
Œ	Œ	\ ]
false
Œ	Œ	^ c
,
œ	œ	 	

TDbContext
œ	œ	
 
_context
œ	œ	 
=
œ	œ	 
null
œ	œ	  $
,
œ	œ	$ %#
IDbContextTransaction
œ	œ	& ;
_transaction
œ	œ	< H
=
œ	œ	I J
null
œ	œ	K O
)
œ	œ	O P
{
–	–	 	
if
—	—	 
(
—	—	 
CheckIsExists
—	—	 
(
—	—	 
view
—	—	 "
.
—	—	" #
Model
—	—	# (
,
—	—	( )
_context
—	—	* 2
,
—	—	2 3
_transaction
—	—	4 @
)
—	—	@ A
)
—	—	A B
{
“	“	 
return
”	”	 
	EditModel
”	”	  
(
”	”	  !
view
”	”	! %
,
”	”	% &
_context
”	”	' /
,
”	”	/ 0
_transaction
”	”	1 =
)
”	”	= >
;
”	”	> ?
}
‘	‘	 
else
’	’	 
{
÷	÷	 
return
◊	◊	 
CreateModel
◊	◊	 "
(
◊	◊	" #
view
◊	◊	# '
,
◊	◊	' (
_context
◊	◊	) 1
,
◊	◊	1 2
_transaction
◊	◊	3 ?
)
◊	◊	? @
;
◊	◊	@ A
}
ÿ	ÿ	 
}
Ÿ	Ÿ	 	
public
„	„	 
virtual
„	„	 
Task
„	„	 
<
„	„	  
RepositoryResponse
„	„	 .
<
„	„	. /
TView
„	„	/ 4
>
„	„	4 5
>
„	„	5 6
SaveModelAsync
„	„	7 E
(
„	„	E F
TView
„	„	F K
view
„	„	L P
,
„	„	P Q
bool
„	„	R V
isSaveSubModels
„	„	W f
=
„	„	g h
false
„	„	i n
,
‰	‰	 	

TDbContext
‰	‰	
 
_context
‰	‰	 
=
‰	‰	 
null
‰	‰	  $
,
‰	‰	$ %#
IDbContextTransaction
‰	‰	& ;
_transaction
‰	‰	< H
=
‰	‰	I J
null
‰	‰	K O
)
‰	‰	O P
{
Â	Â	 	
if
Ê	Ê	 
(
Ê	Ê	 
CheckIsExists
Ê	Ê	 
(
Ê	Ê	 
view
Ê	Ê	 "
.
Ê	Ê	" #
Model
Ê	Ê	# (
,
Ê	Ê	( )
_context
Ê	Ê	* 2
,
Ê	Ê	2 3
_transaction
Ê	Ê	4 @
)
Ê	Ê	@ A
)
Ê	Ê	A B
{
Á	Á	 
return
Ë	Ë	 
EditModelAsync
Ë	Ë	 %
(
Ë	Ë	% &
view
Ë	Ë	& *
,
Ë	Ë	* +
_context
Ë	Ë	, 4
,
Ë	Ë	4 5
_transaction
Ë	Ë	6 B
)
Ë	Ë	B C
;
Ë	Ë	C D
}
È	È	 
else
Í	Í	 
{
Î	Î	 
return
Ï	Ï	 
CreateModelAsync
Ï	Ï	 '
(
Ï	Ï	' (
view
Ï	Ï	( ,
,
Ï	Ï	, -
_context
Ï	Ï	. 6
,
Ï	Ï	6 7
_transaction
Ï	Ï	8 D
)
Ï	Ï	D E
;
Ï	Ï	E F
}
Ì	Ì	 
}
Ó	Ó	 	
public
¯	¯	 
virtual
¯	¯	 
Task
¯	¯	 
<
¯	¯	 
bool
¯	¯	  
>
¯	¯	  !
SaveSubModelAsync
¯	¯	" 3
(
¯	¯	3 4
TModel
¯	¯	4 :
model
¯	¯	; @
,
¯	¯	@ A

TDbContext
¯	¯	B L
context
¯	¯	M T
,
¯	¯	T U#
IDbContextTransaction
¯	¯	V k
_transaction
¯	¯	l x
)
¯	¯	x y
{
˘	˘	 	
throw
˙	˙	 
new
˙	˙	 %
NotImplementedException
˙	˙	 -
(
˙	˙	- .
)
˙	˙	. /
;
˙	˙	/ 0
}
˚	˚	 	
public
Ü
Ü
 
virtual
Ü
Ü
  
RepositoryResponse
Ü
Ü
 )
<
Ü
Ü
) *
int
Ü
Ü
* -
>
Ü
Ü
- .
Max
Ü
Ü
/ 2
(
Ü
Ü
2 3

Expression
Ü
Ü
3 =
<
Ü
Ü
= >
Func
Ü
Ü
> B
<
Ü
Ü
B C
TModel
Ü
Ü
C I
,
Ü
Ü
I J
int
Ü
Ü
K N
>
Ü
Ü
N O
>
Ü
Ü
O P
	predicate
Ü
Ü
Q Z
,
á
á
 	

TDbContext
á
á

 
_context
á
á
 
=
á
á
 
null
á
á
  $
,
á
á
$ %#
IDbContextTransaction
á
á
& ;
_transaction
á
á
< H
=
á
á
I J
null
á
á
K O
)
á
á
O P
{
à
à
 	
UnitOfWorkHelper
â
â
 
<
â
â
 

TDbContext
â
â
 '
>
â
â
' (
.
â
â
( )
InitTransaction
â
â
) 8
(
â
â
8 9
_context
â
â
9 A
,
â
â
A B
_transaction
â
â
C O
,
â
â
O P
out
â
â
Q T

TDbContext
â
â
U _
context
â
â
` g
,
â
â
g h
out
â
â
i l$
IDbContextTransactionâ
â
m Ç
transactionâ
â
É é
,â
â
é è
outâ
â
ê ì
boolâ
â
î ò
isRootâ
â
ô ü
)â
â
ü †
;â
â
† °
int
ä
ä
 
total
ä
ä
 
=
ä
ä
 
$num
ä
ä
 
;
ä
ä
 
try
ã
ã
 
{
å
å
 
total
ç
ç
 
=
ç
ç
 
context
ç
ç
 
.
ç
ç
  
Set
ç
ç
  #
<
ç
ç
# $
TModel
ç
ç
$ *
>
ç
ç
* +
(
ç
ç
+ ,
)
ç
ç
, -
.
ç
ç
- .
Max
ç
ç
. 1
(
ç
ç
1 2
	predicate
ç
ç
2 ;
)
ç
ç
; <
;
ç
ç
< =
return
é
é
 
new
é
é
  
RepositoryResponse
é
é
 -
<
é
é
- .
int
é
é
. 1
>
é
é
1 2
(
é
é
2 3
)
é
é
3 4
{
è
è
 
	IsSucceed
ê
ê
 
=
ê
ê
 
true
ê
ê
  $
,
ê
ê
$ %
Data
ë
ë
 
=
ë
ë
 
total
ë
ë
  
}
í
í
 
;
í
í
 
}
ì
ì
 
catch
î
î
 
(
î
î
 
	Exception
î
î
 
ex
î
î
 
)
î
î
  
{
ï
ï
 
HandleException
ñ
ñ
 
<
ñ
ñ
  
List
ñ
ñ
  $
<
ñ
ñ
$ %
TModel
ñ
ñ
% +
>
ñ
ñ
+ ,
>
ñ
ñ
, -
(
ñ
ñ
- .
ex
ñ
ñ
. 0
,
ñ
ñ
0 1
isRoot
ñ
ñ
2 8
,
ñ
ñ
8 9
transaction
ñ
ñ
: E
)
ñ
ñ
E F
;
ñ
ñ
F G
return
ó
ó
 
new
ó
ó
  
RepositoryResponse
ó
ó
 -
<
ó
ó
- .
int
ó
ó
. 1
>
ó
ó
1 2
(
ó
ó
2 3
)
ó
ó
3 4
{
ò
ò
 
	IsSucceed
ô
ô
 
=
ô
ô
 
true
ô
ô
  $
,
ô
ô
$ %
Data
ö
ö
 
=
ö
ö
 
total
ö
ö
  
}
õ
õ
 
;
õ
õ
 
}
ú
ú
 
finally
ù
ù
 
{
û
û
 
if
ü
ü
 
(
ü
ü
 
isRoot
ü
ü
 
)
ü
ü
 
{
†
†
 
context
¢
¢
 
.
¢
¢
 
Dispose
¢
¢
 #
(
¢
¢
# $
)
¢
¢
$ %
;
¢
¢
% &
}
£
£
 
}
§
§
 
}
•
•
 	
public
Æ
Æ
 
virtual
Æ
Æ
 
async
Æ
Æ
 
Task
Æ
Æ
 !
<
Æ
Æ
! " 
RepositoryResponse
Æ
Æ
" 4
<
Æ
Æ
4 5
int
Æ
Æ
5 8
>
Æ
Æ
8 9
>
Æ
Æ
9 :
MaxAsync
Æ
Æ
; C
(
Æ
Æ
C D

Expression
Æ
Æ
D N
<
Æ
Æ
N O
Func
Æ
Æ
O S
<
Æ
Æ
S T
TModel
Æ
Æ
T Z
,
Æ
Æ
Z [
int
Æ
Æ
\ _
>
Æ
Æ
_ `
>
Æ
Æ
` a
	predicate
Æ
Æ
b k
,
Ø
Ø
 	

TDbContext
Ø
Ø

 
_context
Ø
Ø
 
=
Ø
Ø
 
null
Ø
Ø
  $
,
Ø
Ø
$ %#
IDbContextTransaction
Ø
Ø
& ;
_transaction
Ø
Ø
< H
=
Ø
Ø
I J
null
Ø
Ø
K O
)
Ø
Ø
O P
{
∞
∞
 	
UnitOfWorkHelper
±
±
 
<
±
±
 

TDbContext
±
±
 '
>
±
±
' (
.
±
±
( )
InitTransaction
±
±
) 8
(
±
±
8 9
_context
±
±
9 A
,
±
±
A B
_transaction
±
±
C O
,
±
±
O P
out
±
±
Q T

TDbContext
±
±
U _
context
±
±
` g
,
±
±
g h
out
±
±
i l$
IDbContextTransaction±
±
m Ç
transaction±
±
É é
,±
±
é è
out±
±
ê ì
bool±
±
î ò
isRoot±
±
ô ü
)±
±
ü †
;±
±
† °
int
≤
≤
 
total
≤
≤
 
=
≤
≤
 
$num
≤
≤
 
;
≤
≤
 
try
≥
≥
 
{
¥
¥
 
total
µ
µ
 
=
µ
µ
 
await
µ
µ
 
context
µ
µ
 %
.
µ
µ
% &
Set
µ
µ
& )
<
µ
µ
) *
TModel
µ
µ
* 0
>
µ
µ
0 1
(
µ
µ
1 2
)
µ
µ
2 3
.
µ
µ
3 4
MaxAsync
µ
µ
4 <
(
µ
µ
< =
	predicate
µ
µ
= F
)
µ
µ
F G
.
µ
µ
G H
ConfigureAwait
µ
µ
H V
(
µ
µ
V W
false
µ
µ
W \
)
µ
µ
\ ]
;
µ
µ
] ^
return
∂
∂
 
new
∂
∂
  
RepositoryResponse
∂
∂
 -
<
∂
∂
- .
int
∂
∂
. 1
>
∂
∂
1 2
(
∂
∂
2 3
)
∂
∂
3 4
{
∑
∑
 
	IsSucceed
∏
∏
 
=
∏
∏
 
true
∏
∏
  $
,
∏
∏
$ %
Data
π
π
 
=
π
π
 
total
π
π
  
}
∫
∫
 
;
∫
∫
 
}
ª
ª
 
catch
º
º
 
(
º
º
 
	Exception
º
º
 
ex
º
º
 
)
º
º
  
{
Ω
Ω
 
HandleException
æ
æ
 
<
æ
æ
  
List
æ
æ
  $
<
æ
æ
$ %
TModel
æ
æ
% +
>
æ
æ
+ ,
>
æ
æ
, -
(
æ
æ
- .
ex
æ
æ
. 0
,
æ
æ
0 1
isRoot
æ
æ
2 8
,
æ
æ
8 9
transaction
æ
æ
: E
)
æ
æ
E F
;
æ
æ
F G
return
ø
ø
 
new
ø
ø
  
RepositoryResponse
ø
ø
 -
<
ø
ø
- .
int
ø
ø
. 1
>
ø
ø
1 2
(
ø
ø
2 3
)
ø
ø
3 4
{
¿
¿
 
	IsSucceed
¡
¡
 
=
¡
¡
 
true
¡
¡
  $
,
¡
¡
$ %
Data
¬
¬
 
=
¬
¬
 
total
¬
¬
  
}
√
√
 
;
√
√
 
}
ƒ
ƒ
 
finally
≈
≈
 
{
∆
∆
 
if
«
«
 
(
«
«
 
isRoot
«
«
 
)
«
«
 
{
»
»
 
context
 
 
 
.
 
 
 
Dispose
 
 
 #
(
 
 
# $
)
 
 
$ %
;
 
 
% &
}
À
À
 
}
Ã
Ã
 
}
Õ
Õ
 	
public
⁄
⁄
 
virtual
⁄
⁄
  
RepositoryResponse
⁄
⁄
 )
<
⁄
⁄
) *
int
⁄
⁄
* -
>
⁄
⁄
- .
Count
⁄
⁄
/ 4
(
⁄
⁄
4 5

Expression
⁄
⁄
5 ?
<
⁄
⁄
? @
Func
⁄
⁄
@ D
<
⁄
⁄
D E
TModel
⁄
⁄
E K
,
⁄
⁄
K L
bool
⁄
⁄
M Q
>
⁄
⁄
Q R
>
⁄
⁄
R S
	predicate
⁄
⁄
T ]
,
€
€
 	

TDbContext
€
€

 
_context
€
€
 
=
€
€
 
null
€
€
  $
,
€
€
$ %#
IDbContextTransaction
€
€
& ;
_transaction
€
€
< H
=
€
€
I J
null
€
€
K O
)
€
€
O P
{
‹
‹
 	
UnitOfWorkHelper
›
›
 
<
›
›
 

TDbContext
›
›
 '
>
›
›
' (
.
›
›
( )
InitTransaction
›
›
) 8
(
›
›
8 9
_context
›
›
9 A
,
›
›
A B
_transaction
›
›
C O
,
›
›
O P
out
›
›
Q T

TDbContext
›
›
U _
context
›
›
` g
,
›
›
g h
out
›
›
i l$
IDbContextTransaction›
›
m Ç
transaction›
›
É é
,›
›
é è
out›
›
ê ì
bool›
›
î ò
isRoot›
›
ô ü
)›
›
ü †
;›
›
† °
int
ﬁ
ﬁ
 
total
ﬁ
ﬁ
 
=
ﬁ
ﬁ
 
$num
ﬁ
ﬁ
 
;
ﬁ
ﬁ
 
try
ﬂ
ﬂ
 
{
‡
‡
 
total
·
·
 
=
·
·
 
context
·
·
 
.
·
·
  
Set
·
·
  #
<
·
·
# $
TModel
·
·
$ *
>
·
·
* +
(
·
·
+ ,
)
·
·
, -
.
·
·
- .
Count
·
·
. 3
(
·
·
3 4
	predicate
·
·
4 =
)
·
·
= >
;
·
·
> ?
return
‚
‚
 
new
‚
‚
  
RepositoryResponse
‚
‚
 -
<
‚
‚
- .
int
‚
‚
. 1
>
‚
‚
1 2
(
‚
‚
2 3
)
‚
‚
3 4
{
„
„
 
	IsSucceed
‰
‰
 
=
‰
‰
 
true
‰
‰
  $
,
‰
‰
$ %
Data
Â
Â
 
=
Â
Â
 
total
Â
Â
  
}
Ê
Ê
 
;
Ê
Ê
 
}
Á
Á
 
catch
Ë
Ë
 
(
Ë
Ë
 
	Exception
Ë
Ë
 
ex
Ë
Ë
 
)
Ë
Ë
  
{
È
È
 
HandleException
Í
Í
 
<
Í
Í
  
List
Í
Í
  $
<
Í
Í
$ %
TModel
Í
Í
% +
>
Í
Í
+ ,
>
Í
Í
, -
(
Í
Í
- .
ex
Í
Í
. 0
,
Í
Í
0 1
isRoot
Í
Í
2 8
,
Í
Í
8 9
transaction
Í
Í
: E
)
Í
Í
E F
;
Í
Í
F G
return
Î
Î
 
new
Î
Î
  
RepositoryResponse
Î
Î
 -
<
Î
Î
- .
int
Î
Î
. 1
>
Î
Î
1 2
(
Î
Î
2 3
)
Î
Î
3 4
{
Ï
Ï
 
	IsSucceed
Ì
Ì
 
=
Ì
Ì
 
true
Ì
Ì
  $
,
Ì
Ì
$ %
Data
Ó
Ó
 
=
Ó
Ó
 
total
Ó
Ó
  
}
Ô
Ô
 
;
Ô
Ô
 
}


 
finally
Ò
Ò
 
{
Ú
Ú
 
if
Û
Û
 
(
Û
Û
 
isRoot
Û
Û
 
)
Û
Û
 
{
Ù
Ù
 
context
ˆ
ˆ
 
.
ˆ
ˆ
 
Dispose
ˆ
ˆ
 #
(
ˆ
ˆ
# $
)
ˆ
ˆ
$ %
;
ˆ
ˆ
% &
}
˜
˜
 
}
¯
¯
 
}
˘
˘
 	
public
ÇÇ 
virtual
ÇÇ 
async
ÇÇ 
Task
ÇÇ !
<
ÇÇ! " 
RepositoryResponse
ÇÇ" 4
<
ÇÇ4 5
int
ÇÇ5 8
>
ÇÇ8 9
>
ÇÇ9 :

CountAsync
ÇÇ; E
(
ÇÇE F

Expression
ÇÇF P
<
ÇÇP Q
Func
ÇÇQ U
<
ÇÇU V
TModel
ÇÇV \
,
ÇÇ\ ]
bool
ÇÇ^ b
>
ÇÇb c
>
ÇÇc d
	predicate
ÇÇe n
,
ÉÉ 	

TDbContext
ÉÉ
 
_context
ÉÉ 
=
ÉÉ 
null
ÉÉ  $
,
ÉÉ$ %#
IDbContextTransaction
ÉÉ& ;
_transaction
ÉÉ< H
=
ÉÉI J
null
ÉÉK O
)
ÉÉO P
{
ÑÑ 	
UnitOfWorkHelper
ÖÖ 
<
ÖÖ 

TDbContext
ÖÖ '
>
ÖÖ' (
.
ÖÖ( )
InitTransaction
ÖÖ) 8
(
ÖÖ8 9
_context
ÖÖ9 A
,
ÖÖA B
_transaction
ÖÖC O
,
ÖÖO P
out
ÖÖQ T

TDbContext
ÖÖU _
context
ÖÖ` g
,
ÖÖg h
out
ÖÖi l$
IDbContextTransactionÖÖm Ç
transactionÖÖÉ é
,ÖÖé è
outÖÖê ì
boolÖÖî ò
isRootÖÖô ü
)ÖÖü †
;ÖÖ† °
int
ÜÜ 
total
ÜÜ 
=
ÜÜ 
$num
ÜÜ 
;
ÜÜ 
try
áá 
{
àà 
total
ââ 
=
ââ 
await
ââ 
context
ââ %
.
ââ% &
Set
ââ& )
<
ââ) *
TModel
ââ* 0
>
ââ0 1
(
ââ1 2
)
ââ2 3
.
ââ3 4

CountAsync
ââ4 >
(
ââ> ?
	predicate
ââ? H
)
ââH I
.
ââI J
ConfigureAwait
ââJ X
(
ââX Y
false
ââY ^
)
ââ^ _
;
ââ_ `
return
ää 
new
ää  
RepositoryResponse
ää -
<
ää- .
int
ää. 1
>
ää1 2
(
ää2 3
)
ää3 4
{
ãã 
	IsSucceed
åå 
=
åå 
true
åå  $
,
åå$ %
Data
çç 
=
çç 
total
çç  
}
éé 
;
éé 
}
èè 
catch
êê 
(
êê 
	Exception
êê 
ex
êê 
)
êê  
{
ëë 
HandleException
íí 
<
íí  
List
íí  $
<
íí$ %
TModel
íí% +
>
íí+ ,
>
íí, -
(
íí- .
ex
íí. 0
,
íí0 1
isRoot
íí2 8
,
íí8 9
transaction
íí: E
)
ííE F
;
ííF G
return
ìì 
new
ìì  
RepositoryResponse
ìì -
<
ìì- .
int
ìì. 1
>
ìì1 2
(
ìì2 3
)
ìì3 4
{
îî 
	IsSucceed
ïï 
=
ïï 
true
ïï  $
,
ïï$ %
Data
ññ 
=
ññ 
total
ññ  
}
óó 
;
óó 
}
òò 
finally
ôô 
{
öö 
if
õõ 
(
õõ 
isRoot
õõ 
)
õõ 
{
úú 
context
ûû 
.
ûû 
Dispose
ûû #
(
ûû# $
)
ûû$ %
;
ûû% &
}
üü 
}
†† 
}
°° 	
public
≠≠ 
virtual
≠≠  
RepositoryResponse
≠≠ )
<
≠≠) *
int
≠≠* -
>
≠≠- .
Count
≠≠/ 4
(
≠≠4 5

TDbContext
≠≠5 ?
_context
≠≠@ H
=
≠≠I J
null
≠≠K O
,
≠≠O P#
IDbContextTransaction
≠≠Q f
_transaction
≠≠g s
=
≠≠t u
null
≠≠v z
)
≠≠z {
{
ÆÆ 	
UnitOfWorkHelper
ØØ 
<
ØØ 

TDbContext
ØØ '
>
ØØ' (
.
ØØ( )
InitTransaction
ØØ) 8
(
ØØ8 9
_context
ØØ9 A
,
ØØA B
_transaction
ØØC O
,
ØØO P
out
ØØQ T

TDbContext
ØØU _
context
ØØ` g
,
ØØg h
out
ØØi l$
IDbContextTransactionØØm Ç
transactionØØÉ é
,ØØé è
outØØê ì
boolØØî ò
isRootØØô ü
)ØØü †
;ØØ† °
int
∞∞ 
total
∞∞ 
=
∞∞ 
$num
∞∞ 
;
∞∞ 
try
±± 
{
≤≤ 
total
≥≥ 
=
≥≥ 
context
≥≥ 
.
≥≥  
Set
≥≥  #
<
≥≥# $
TModel
≥≥$ *
>
≥≥* +
(
≥≥+ ,
)
≥≥, -
.
≥≥- .
Count
≥≥. 3
(
≥≥3 4
)
≥≥4 5
;
≥≥5 6
return
¥¥ 
new
¥¥  
RepositoryResponse
¥¥ -
<
¥¥- .
int
¥¥. 1
>
¥¥1 2
(
¥¥2 3
)
¥¥3 4
{
µµ 
	IsSucceed
∂∂ 
=
∂∂ 
true
∂∂  $
,
∂∂$ %
Data
∑∑ 
=
∑∑ 
total
∑∑  
}
∏∏ 
;
∏∏ 
}
ππ 
catch
∫∫ 
(
∫∫ 
	Exception
∫∫ 
ex
∫∫ 
)
∫∫  
{
ªª 
HandleException
ºº 
<
ºº  
List
ºº  $
<
ºº$ %
TModel
ºº% +
>
ºº+ ,
>
ºº, -
(
ºº- .
ex
ºº. 0
,
ºº0 1
isRoot
ºº2 8
,
ºº8 9
transaction
ºº: E
)
ººE F
;
ººF G
return
ΩΩ 
new
ΩΩ  
RepositoryResponse
ΩΩ -
<
ΩΩ- .
int
ΩΩ. 1
>
ΩΩ1 2
(
ΩΩ2 3
)
ΩΩ3 4
{
ææ 
	IsSucceed
øø 
=
øø 
true
øø  $
,
øø$ %
Data
¿¿ 
=
¿¿ 
total
¿¿  
}
¡¡ 
;
¡¡ 
}
¬¬ 
finally
√√ 
{
ƒƒ 
if
≈≈ 
(
≈≈ 
isRoot
≈≈ 
)
≈≈ 
{
∆∆ 
context
»» 
.
»» 
Dispose
»» #
(
»»# $
)
»»$ %
;
»»% &
}
…… 
}
   
}
ÀÀ 	
public
”” 
virtual
”” 
async
”” 
Task
”” !
<
””! " 
RepositoryResponse
””" 4
<
””4 5
int
””5 8
>
””8 9
>
””9 :

CountAsync
””; E
(
””E F

TDbContext
””F P
_context
””Q Y
=
””Z [
null
””\ `
,
””` a#
IDbContextTransaction
””b w
_transaction””x Ñ
=””Ö Ü
null””á ã
)””ã å
{
‘‘ 	
UnitOfWorkHelper
’’ 
<
’’ 

TDbContext
’’ '
>
’’' (
.
’’( )
InitTransaction
’’) 8
(
’’8 9
_context
’’9 A
,
’’A B
_transaction
’’C O
,
’’O P
out
’’Q T

TDbContext
’’U _
context
’’` g
,
’’g h
out
’’i l$
IDbContextTransaction’’m Ç
transaction’’É é
,’’é è
out’’ê ì
bool’’î ò
isRoot’’ô ü
)’’ü †
;’’† °
int
÷÷ 
total
÷÷ 
=
÷÷ 
$num
÷÷ 
;
÷÷ 
try
◊◊ 
{
ÿÿ 
total
ŸŸ 
=
ŸŸ 
await
ŸŸ 
context
ŸŸ %
.
ŸŸ% &
Set
ŸŸ& )
<
ŸŸ) *
TModel
ŸŸ* 0
>
ŸŸ0 1
(
ŸŸ1 2
)
ŸŸ2 3
.
ŸŸ3 4

CountAsync
ŸŸ4 >
(
ŸŸ> ?
)
ŸŸ? @
.
ŸŸ@ A
ConfigureAwait
ŸŸA O
(
ŸŸO P
false
ŸŸP U
)
ŸŸU V
;
ŸŸV W
return
⁄⁄ 
new
⁄⁄  
RepositoryResponse
⁄⁄ -
<
⁄⁄- .
int
⁄⁄. 1
>
⁄⁄1 2
(
⁄⁄2 3
)
⁄⁄3 4
{
€€ 
	IsSucceed
‹‹ 
=
‹‹ 
true
‹‹  $
,
‹‹$ %
Data
›› 
=
›› 
total
››  
}
ﬁﬁ 
;
ﬁﬁ 
}
ﬂﬂ 
catch
‡‡ 
(
‡‡ 
	Exception
‡‡ 
ex
‡‡ 
)
‡‡  
{
·· 
HandleException
‚‚ 
<
‚‚  
List
‚‚  $
<
‚‚$ %
TModel
‚‚% +
>
‚‚+ ,
>
‚‚, -
(
‚‚- .
ex
‚‚. 0
,
‚‚0 1
isRoot
‚‚2 8
,
‚‚8 9
transaction
‚‚: E
)
‚‚E F
;
‚‚F G
return
„„ 
new
„„  
RepositoryResponse
„„ -
<
„„- .
int
„„. 1
>
„„1 2
(
„„2 3
)
„„3 4
{
‰‰ 
	IsSucceed
ÂÂ 
=
ÂÂ 
true
ÂÂ  $
,
ÂÂ$ %
Data
ÊÊ 
=
ÊÊ 
total
ÊÊ  
}
ÁÁ 
;
ÁÁ 
}
ËË 
finally
ÈÈ 
{
ÍÍ 
if
ÎÎ 
(
ÎÎ 
isRoot
ÎÎ 
)
ÎÎ 
{
ÏÏ 
context
ÓÓ 
.
ÓÓ 
Dispose
ÓÓ #
(
ÓÓ# $
)
ÓÓ$ %
;
ÓÓ% &
}
ÔÔ 
}
 
}
ÒÒ 	
public
ˇˇ  
RepositoryResponse
ˇˇ !
<
ˇˇ! "
TModel
ˇˇ" (
>
ˇˇ( )
UpdateFields
ˇˇ* 6
(
ˇˇ6 7

Expression
ˇˇ7 A
<
ˇˇA B
Func
ˇˇB F
<
ˇˇF G
TModel
ˇˇG M
,
ˇˇM N
bool
ˇˇO S
>
ˇˇS T
>
ˇˇT U
	predicate
ˇˇV _
,
ÄÄ 	
List
ÄÄ
 
<
ÄÄ 
EntityField
ÄÄ 
>
ÄÄ 
fields
ÄÄ "
,
ÅÅ 	

TDbContext
ÅÅ
 
_context
ÅÅ 
=
ÅÅ 
null
ÅÅ  $
,
ÅÅ$ %#
IDbContextTransaction
ÅÅ& ;
_transaction
ÅÅ< H
=
ÅÅI J
null
ÅÅK O
)
ÅÅO P
{
ÇÇ 	
UnitOfWorkHelper
ÉÉ 
<
ÉÉ 

TDbContext
ÉÉ '
>
ÉÉ' (
.
ÉÉ( )
InitTransaction
ÉÉ) 8
(
ÉÉ8 9
_context
ÉÉ9 A
,
ÉÉA B
_transaction
ÉÉC O
,
ÉÉO P
out
ÉÉQ T

TDbContext
ÉÉU _
context
ÉÉ` g
,
ÉÉg h
out
ÉÉi l$
IDbContextTransactionÉÉm Ç
transactionÉÉÉ é
,ÉÉé è
outÉÉê ì
boolÉÉî ò
isRootÉÉô ü
)ÉÉü †
;ÉÉ† °
try
ÑÑ 
{
ÖÖ 
bool
ÜÜ 
result
ÜÜ 
=
ÜÜ 
false
ÜÜ #
;
ÜÜ# $
TModel
áá 
model
áá 
=
áá 
context
áá &
.
áá& '
Set
áá' *
<
áá* +
TModel
áá+ 1
>
áá1 2
(
áá2 3
)
áá3 4
.
áá4 5
FirstOrDefault
áá5 C
(
ááC D
	predicate
ááD M
)
ááM N
;
ááN O
if
àà 
(
àà 
model
àà 
!=
àà 
null
àà !
)
àà! "
{
ââ 
foreach
ää 
(
ää 
var
ää  
field
ää! &
in
ää' )
fields
ää* 0
)
ää0 1
{
ãã 
var
åå 
lamda
åå !
=
åå" #
	GetLambda
åå$ -
(
åå- .
field
åå. 3
.
åå3 4
PropertyName
åå4 @
,
åå@ A
false
ååB G
)
ååG H
;
ååH I
if
çç 
(
çç 
lamda
çç !
!=
çç" $
null
çç% )
)
çç) *
{
éé 
var
èè 
prop
èè  $
=
èè% &
context
èè' .
.
èè. /
Entry
èè/ 4
(
èè4 5
model
èè5 :
)
èè: ;
.
èè; <
Property
èè< D
(
èèD E
field
èèE J
.
èèJ K
PropertyName
èèK W
)
èèW X
;
èèX Y
if
êê 
(
êê  
DateTime
êê  (
.
êê( )
TryParse
êê) 1
(
êê1 2
field
êê2 7
.
êê7 8
PropertyValue
êê8 E
,
êêE F
out
êêG J
DateTime
êêK S
	dateValue
êêT ]
)
êê] ^
)
êê^ _
{
ëë 
prop
íí  $
.
íí$ %
CurrentValue
íí% 1
=
íí2 3
	dateValue
íí4 =
;
íí= >
}
ìì 
else
îî  
if
îî! #
(
îî$ %
int
îî% (
.
îî( )
TryParse
îî) 1
(
îî1 2
field
îî2 7
.
îî7 8
PropertyValue
îî8 E
,
îîE F
out
îîG J
int
îîK N
integerValue
îîO [
)
îî[ \
)
îî\ ]
{
ïï 
prop
ññ  $
.
ññ$ %
CurrentValue
ññ% 1
=
ññ2 3
integerValue
ññ4 @
;
ññ@ A
}
óó 
else
òò  
{
ôô 
prop
öö  $
.
öö$ %
CurrentValue
öö% 1
=
öö2 3
field
öö4 9
.
öö9 :
PropertyValue
öö: G
;
ööG H
}
õõ 
context
ùù #
.
ùù# $
SaveChanges
ùù$ /
(
ùù/ 0
)
ùù0 1
;
ùù1 2
result
ûû "
=
ûû# $
true
ûû% )
;
ûû) *
}
üü 
else
†† 
{
°° 
result
¢¢ "
=
¢¢# $
false
¢¢% *
;
¢¢* +
break
££ !
;
££! "
}
§§ 
}
•• 
}
¶¶ 
UnitOfWorkHelper
®®  
<
®®  !

TDbContext
®®! +
>
®®+ ,
.
®®, -
HandleTransaction
®®- >
(
®®> ?
result
®®? E
,
®®E F
isRoot
®®G M
,
®®M N
transaction
®®O Z
)
®®Z [
;
®®[ \
return
™™ 
new
™™  
RepositoryResponse
™™ -
<
™™- .
TModel
™™. 4
>
™™4 5
(
™™5 6
)
™™6 7
{
´´ 
	IsSucceed
¨¨ 
=
¨¨ 
result
¨¨  &
,
¨¨& '
Data
≠≠ 
=
≠≠ 
model
≠≠  
}
ÆÆ 
;
ÆÆ 
}
ØØ 
catch
∞∞ 
(
∞∞ 
	Exception
∞∞ 
ex
∞∞ 
)
∞∞  
{
±± 
return
≤≤ 
HandleException
≤≤ &
<
≤≤& '
TModel
≤≤' -
>
≤≤- .
(
≤≤. /
ex
≤≤/ 1
,
≤≤1 2
isRoot
≤≤3 9
,
≤≤9 :
transaction
≤≤; F
)
≤≤F G
;
≤≤G H
}
≥≥ 
finally
¥¥ 
{
µµ 
if
∂∂ 
(
∂∂ 
isRoot
∂∂ 
)
∂∂ 
{
∑∑ 
context
ππ 
.
ππ 
Dispose
ππ #
(
ππ# $
)
ππ$ %
;
ππ% &
}
∫∫ 
}
ªª 
}
ºº 	
public
∆∆ 
async
∆∆ 
Task
∆∆ 
<
∆∆  
RepositoryResponse
∆∆ ,
<
∆∆, -
TModel
∆∆- 3
>
∆∆3 4
>
∆∆4 5
UpdateFieldsAsync
∆∆6 G
(
∆∆G H

Expression
∆∆H R
<
∆∆R S
Func
∆∆S W
<
∆∆W X
TModel
∆∆X ^
,
∆∆^ _
bool
∆∆` d
>
∆∆d e
>
∆∆e f
	predicate
∆∆g p
,
«« 	
List
««
 
<
«« 
EntityField
«« 
>
«« 
fields
«« "
,
»» 	

TDbContext
»»
 
_context
»» 
=
»» 
null
»»  $
,
»»$ %#
IDbContextTransaction
»»& ;
_transaction
»»< H
=
»»I J
null
»»K O
)
»»O P
{
…… 	
UnitOfWorkHelper
   
<
   

TDbContext
   '
>
  ' (
.
  ( )
InitTransaction
  ) 8
(
  8 9
_context
  9 A
,
  A B
_transaction
  C O
,
  O P
out
  Q T

TDbContext
  U _
context
  ` g
,
  g h
out
  i l$
IDbContextTransaction  m Ç
transaction  É é
,  é è
out  ê ì
bool  î ò
isRoot  ô ü
)  ü †
;  † °
try
ÀÀ 
{
ÃÃ 
bool
ÕÕ 
result
ÕÕ 
=
ÕÕ 
false
ÕÕ #
;
ÕÕ# $
TModel
ŒŒ 
model
ŒŒ 
=
ŒŒ 
await
ŒŒ $
context
ŒŒ% ,
.
ŒŒ, -
Set
ŒŒ- 0
<
ŒŒ0 1
TModel
ŒŒ1 7
>
ŒŒ7 8
(
ŒŒ8 9
)
ŒŒ9 :
.
ŒŒ: ;!
FirstOrDefaultAsync
ŒŒ; N
(
ŒŒN O
	predicate
ŒŒO X
)
ŒŒX Y
.
ŒŒY Z
ConfigureAwait
ŒŒZ h
(
ŒŒh i
false
ŒŒi n
)
ŒŒn o
;
ŒŒo p
if
œœ 
(
œœ 
model
œœ 
!=
œœ 
null
œœ !
)
œœ! "
{
–– 
foreach
—— 
(
—— 
var
——  
field
——! &
in
——' )
fields
——* 0
)
——0 1
{
““ 
var
”” 
lamda
”” !
=
””" #
	GetLambda
””$ -
(
””- .
field
””. 3
.
””3 4
PropertyName
””4 @
,
””@ A
false
””B G
)
””G H
;
””H I
if
‘‘ 
(
‘‘ 
lamda
‘‘ !
!=
‘‘" $
null
‘‘% )
)
‘‘) *
{
’’ 
var
÷÷ 
prop
÷÷  $
=
÷÷% &
context
÷÷' .
.
÷÷. /
Entry
÷÷/ 4
(
÷÷4 5
model
÷÷5 :
)
÷÷: ;
.
÷÷; <
Property
÷÷< D
(
÷÷D E
field
÷÷E J
.
÷÷J K
PropertyName
÷÷K W
)
÷÷W X
;
÷÷X Y
if
◊◊ 
(
◊◊  
DateTime
◊◊  (
.
◊◊( )
TryParse
◊◊) 1
(
◊◊1 2
field
◊◊2 7
.
◊◊7 8
PropertyValue
◊◊8 E
,
◊◊E F
out
◊◊G J
DateTime
◊◊K S
	dateValue
◊◊T ]
)
◊◊] ^
)
◊◊^ _
{
ÿÿ 
prop
ŸŸ  $
.
ŸŸ$ %
CurrentValue
ŸŸ% 1
=
ŸŸ2 3
	dateValue
ŸŸ4 =
;
ŸŸ= >
}
⁄⁄ 
else
€€  
if
€€! #
(
€€$ %
int
€€% (
.
€€( )
TryParse
€€) 1
(
€€1 2
field
€€2 7
.
€€7 8
PropertyValue
€€8 E
,
€€E F
out
€€G J
int
€€K N
integerValue
€€O [
)
€€[ \
)
€€\ ]
{
‹‹ 
prop
››  $
.
››$ %
CurrentValue
››% 1
=
››2 3
integerValue
››4 @
;
››@ A
}
ﬁﬁ 
else
ﬂﬂ  
{
‡‡ 
prop
··  $
.
··$ %
CurrentValue
··% 1
=
··2 3
field
··4 9
.
··9 :
PropertyValue
··: G
;
··G H
}
‚‚ 
await
‰‰ !
context
‰‰" )
.
‰‰) *
SaveChangesAsync
‰‰* :
(
‰‰: ;
)
‰‰; <
.
‰‰< =
ConfigureAwait
‰‰= K
(
‰‰K L
false
‰‰L Q
)
‰‰Q R
;
‰‰R S
result
ÂÂ "
=
ÂÂ# $
true
ÂÂ% )
;
ÂÂ) *
}
ÊÊ 
else
ÁÁ 
{
ËË 
result
ÈÈ "
=
ÈÈ# $
false
ÈÈ% *
;
ÈÈ* +
break
ÍÍ !
;
ÍÍ! "
}
ÎÎ 
}
ÏÏ 
}
ÌÌ 
UnitOfWorkHelper
ÔÔ  
<
ÔÔ  !

TDbContext
ÔÔ! +
>
ÔÔ+ ,
.
ÔÔ, -
HandleTransaction
ÔÔ- >
(
ÔÔ> ?
result
ÔÔ? E
,
ÔÔE F
isRoot
ÔÔG M
,
ÔÔM N
transaction
ÔÔO Z
)
ÔÔZ [
;
ÔÔ[ \
return
ÒÒ 
new
ÒÒ  
RepositoryResponse
ÒÒ -
<
ÒÒ- .
TModel
ÒÒ. 4
>
ÒÒ4 5
{
ÚÚ 
	IsSucceed
ÛÛ 
=
ÛÛ 
result
ÛÛ  &
,
ÛÛ& '
Data
ÙÙ 
=
ÙÙ 
model
ÙÙ  
}
ıı 
;
ıı 
}
ˆˆ 
catch
˜˜ 
(
˜˜ 
	Exception
˜˜ 
ex
˜˜ 
)
˜˜  
{
¯¯ 
return
˘˘ 
HandleException
˘˘ &
<
˘˘& '
TModel
˘˘' -
>
˘˘- .
(
˘˘. /
ex
˘˘/ 1
,
˘˘1 2
isRoot
˘˘3 9
,
˘˘9 :
transaction
˘˘; F
)
˘˘F G
;
˘˘G H
}
˙˙ 
finally
˚˚ 
{
¸¸ 
if
˝˝ 
(
˝˝ 
isRoot
˝˝ 
)
˝˝ 
{
˛˛ 
context
ÄÄ 
.
ÄÄ 
Dispose
ÄÄ #
(
ÄÄ# $
)
ÄÄ$ %
;
ÄÄ% &
}
ÅÅ 
}
ÇÇ 
}
ÉÉ 	
private
áá  
RepositoryResponse
áá "
<
áá" #
TResult
áá# *
>
áá* +
HandleException
áá, ;
<
áá; <
TResult
áá< C
>
ááC D
(
ááD E
	Exception
ááE N
ex
ááO Q
,
ááQ R
bool
ááS W
isRoot
ááX ^
,
áá^ _#
IDbContextTransaction
áá` u
transactionááv Å
)ááÅ Ç
where
àà 
TResult
àà 
:
àà 
class
àà !
{
ââ 	
LogErrorMessage
ää 
(
ää 
ex
ää 
)
ää 
;
ää  
if
ãã 
(
ãã 
isRoot
ãã 
)
ãã 
{
åå 
transaction
éé 
.
éé 
Rollback
éé $
(
éé$ %
)
éé% &
;
éé& '
}
èè 
List
êê 
<
êê 
string
êê 
>
êê 
errors
êê 
=
êê  !
new
êê" %
List
êê& *
<
êê* +
string
êê+ 1
>
êê1 2
(
êê2 3
)
êê3 4
;
êê4 5
errors
ëë 
.
ëë 
Add
ëë 
(
ëë 
ex
ëë 
.
ëë 
InnerException
ëë (
!=
ëë) +
null
ëë, 0
?
ëë1 2
ex
ëë3 5
.
ëë5 6
InnerException
ëë6 D
.
ëëD E
Message
ëëE L
:
ëëM N
ex
ëëO Q
.
ëëQ R
Message
ëëR Y
)
ëëY Z
;
ëëZ [
return
íí 
new
íí  
RepositoryResponse
íí )
<
íí) *
TResult
íí* 1
>
íí1 2
(
íí2 3
)
íí3 4
{
ìì 
	IsSucceed
îî 
=
îî 
false
îî !
,
îî! "
Data
ïï 
=
ïï 
null
ïï 
,
ïï 
	Exception
ññ 
=
ññ 
(
ññ 
ex
ññ 
.
ññ  
InnerException
ññ  .
!=
ññ/ 1
null
ññ2 6
?
ññ7 8
ex
ññ9 ;
.
ññ; <
InnerException
ññ< J
:
ññK L
ex
ññM O
)
ññO P
,
ññP Q
Errors
óó 
=
óó 
errors
óó 
}
òò 
;
òò 
}
ôô 	
	protected
¢¢ 
LambdaExpression
¢¢ "
	GetLambda
¢¢# ,
(
¢¢, -
string
¢¢- 3
propName
¢¢4 <
,
¢¢< =
bool
¢¢> B
isGetDefault
¢¢C O
=
¢¢P Q
true
¢¢R V
)
¢¢V W
{
££ 	
var
§§ 
	parameter
§§ 
=
§§ 

Expression
§§ &
.
§§& '
	Parameter
§§' 0
(
§§0 1
typeof
§§1 7
(
§§7 8
TModel
§§8 >
)
§§> ?
)
§§? @
;
§§@ A
var
•• 
type
•• 
=
•• 
typeof
•• 
(
•• 
TModel
•• $
)
••$ %
;
••% &
var
¶¶ 
prop
¶¶ 
=
¶¶ 
Array
¶¶ 
.
¶¶ 
Find
¶¶ !
(
¶¶! "
type
¶¶" &
.
¶¶& '
GetProperties
¶¶' 4
(
¶¶4 5
)
¶¶5 6
,
¶¶6 7
p
¶¶8 9
=>
¶¶: <
p
¶¶= >
.
¶¶> ?
Name
¶¶? C
==
¶¶D F
propName
¶¶G O
)
¶¶O P
;
¶¶P Q
if
ßß 
(
ßß 
prop
ßß 
==
ßß 
null
ßß 
&&
ßß 
isGetDefault
ßß  ,
)
ßß, -
{
®® 
propName
©© 
=
©© 
type
©© 
.
©©  
GetProperties
©©  -
(
©©- .
)
©©. /
.
©©/ 0
FirstOrDefault
©©0 >
(
©©> ?
)
©©? @
?
©©@ A
.
©©A B
Name
©©B F
;
©©F G
}
™™ 
var
´´ 
memberExpression
´´  
=
´´! "

Expression
´´# -
.
´´- .
Property
´´. 6
(
´´6 7
	parameter
´´7 @
,
´´@ A
propName
´´B J
)
´´J K
;
´´K L
return
¨¨ 

Expression
¨¨ 
.
¨¨ 
Lambda
¨¨ $
(
¨¨$ %
memberExpression
¨¨% 5
,
¨¨5 6
	parameter
¨¨7 @
)
¨¨@ A
;
¨¨A B
}
≠≠ 	
}
ÆÆ 
}ØØ ⁄t
QG:\_github\Swastika-Heart\src\Swastika\Domain\Core\ViewModels\CommonViewModels.cs
	namespace 	
Swastika
 
. 
Domain 
. 
Core 
. 

ViewModels )
{ 
public 

class 
	ApiResult 
< 
T 
> 
{ 
[ 	
JsonProperty	 
( 
$str 
) 
] 
public 
T 
Data 
{ 
get 
; 
set  
;  !
}" #
["" 	
JsonProperty""	 
("" 
$str"" 
)"" 
]""  
public## 
List## 
<## 
string## 
>## 
Errors## "
{### $
get##% (
;##( )
set##* -
;##- .
}##/ 0
=##1 2
new##3 6
List##7 ;
<##; <
string##< B
>##B C
(##C D
)##D E
;##E F
[++ 	
JsonProperty++	 
(++ 
$str++ !
)++! "
]++" #
public,, 
	Exception,, 
	Exception,, "
{,,# $
get,,% (
;,,( )
set,,* -
;,,- .
},,/ 0
[44 	
JsonProperty44	 
(44 
$str44 #
)44# $
]44$ %
public55 
string55 
ResponseKey55 !
{55" #
get55$ '
;55' (
set55) ,
;55, -
}55. /
[== 	
JsonProperty==	 
(== 
$str== 
)== 
]==  
public>> 
int>> 
Status>> 
{>> 
get>> 
;>>  
set>>! $
;>>$ %
}>>& '
}?? 
publicDD 

classDD 
EntityFieldDD 
{EE 
[LL 	
JsonPropertyLL	 
(LL 
$strLL $
)LL$ %
]LL% &
publicMM 
stringMM 
PropertyNameMM "
{MM# $
getMM% (
;MM( )
setMM* -
;MM- .
}MM/ 0
[UU 	
JsonPropertyUU	 
(UU 
$strUU %
)UU% &
]UU& '
publicVV 
stringVV 
PropertyValueVV #
{VV$ %
getVV& )
;VV) *
setVV+ .
;VV. /
}VV0 1
}WW 
public\\ 

class\\ 
FileStreamViewModel\\ $
{]] 
[dd 	
JsonPropertydd	 
(dd 
$strdd 
)dd 
]dd  
publicee 
stringee 
Base64ee 
{ee 
getee "
;ee" #
setee$ '
;ee' (
}ee) *
[mm 	
JsonPropertymm	 
(mm 
$strmm 
)mm 
]mm 
publicnn 
stringnn 
Namenn 
{nn 
getnn  
;nn  !
setnn" %
;nn% &
}nn' (
[vv 	
JsonPropertyvv	 
(vv 
$strvv 
)vv 
]vv 
publicww 
intww 
Sizeww 
{ww 
getww 
;ww 
setww "
;ww" #
}ww$ %
[ 	
JsonProperty	 
( 
$str 
) 
] 
public
ÄÄ 
string
ÄÄ 
Type
ÄÄ 
{
ÄÄ 
get
ÄÄ  
;
ÄÄ  !
set
ÄÄ" %
;
ÄÄ% &
}
ÄÄ' (
}
ÅÅ 
public
áá 

class
áá 
PaginationModel
áá  
<
áá  !
T
áá! "
>
áá" #
{
àà 
public
åå 
PaginationModel
åå 
(
åå 
)
åå  
{
çç 	
	PageIndex
éé 
=
éé 
$num
éé 
;
éé 
PageSize
èè 
=
èè 
$num
èè 
;
èè 

TotalItems
êê 
=
êê 
$num
êê 
;
êê 
	TotalPage
ëë 
=
ëë 
$num
ëë 
;
ëë 
Items
íí 
=
íí 
new
íí 
List
íí 
<
íí 
T
íí 
>
íí 
(
íí  
)
íí  !
;
íí! "
}
ìì 	
[
õõ 	
JsonProperty
õõ	 
(
õõ 
$str
õõ 
)
õõ 
]
õõ 
public
úú 
List
úú 
<
úú 
T
úú 
>
úú 
Items
úú 
{
úú 
get
úú "
;
úú" #
set
úú$ '
;
úú' (
}
úú) *
[
§§ 	
JsonProperty
§§	 
(
§§ 
$str
§§ !
)
§§! "
]
§§" #
public
•• 
List
•• 
<
•• 
JObject
•• 
>
•• 
	JsonItems
•• &
{
••' (
get
••) ,
;
••, -
set
••. 1
;
••1 2
}
••3 4
=
••5 6
new
••7 :
List
••; ?
<
••? @
JObject
••@ G
>
••G H
(
••H I
)
••I J
;
••J K
[
≠≠ 	
JsonProperty
≠≠	 
(
≠≠ 
$str
≠≠ !
)
≠≠! "
]
≠≠" #
public
ÆÆ 
int
ÆÆ 
	PageIndex
ÆÆ 
{
ÆÆ 
get
ÆÆ "
;
ÆÆ" #
set
ÆÆ$ '
;
ÆÆ' (
}
ÆÆ) *
[
∂∂ 	
JsonProperty
∂∂	 
(
∂∂ 
$str
∂∂ 
)
∂∂ 
]
∂∂ 
public
∑∑ 
int
∑∑ 
Page
∑∑ 
{
∑∑ 
get
∑∑ 
{
∑∑ 
return
∑∑  &
	PageIndex
∑∑' 0
+
∑∑1 2
$num
∑∑3 4
;
∑∑4 5
}
∑∑6 7
}
∑∑8 9
[
øø 	
JsonProperty
øø	 
(
øø 
$str
øø  
)
øø  !
]
øø! "
public
¿¿ 
int
¿¿ 
?
¿¿ 
PageSize
¿¿ 
{
¿¿ 
get
¿¿ "
;
¿¿" #
set
¿¿$ '
;
¿¿' (
}
¿¿) *
[
»» 	
JsonProperty
»»	 
(
»» 
$str
»» "
)
»»" #
]
»»# $
public
…… 
int
…… 

TotalItems
…… 
{
…… 
get
……  #
;
……# $
set
……% (
;
……( )
}
……* +
[
—— 	
JsonProperty
——	 
(
—— 
$str
—— !
)
——! "
]
——" #
public
““ 
int
““ 
	TotalPage
““ 
{
““ 
get
““ "
;
““" #
set
““$ '
;
““' (
}
““) *
}
”” 
public
ŸŸ 

class
ŸŸ  
RepositoryResponse
ŸŸ #
<
ŸŸ# $
TResult
ŸŸ$ +
>
ŸŸ+ ,
{
⁄⁄ 
[
·· 	
JsonProperty
··	 
(
·· 
$str
·· !
)
··! "
]
··" #
public
‚‚ 
bool
‚‚ 
	IsSucceed
‚‚ 
{
‚‚ 
get
‚‚  #
;
‚‚# $
set
‚‚% (
;
‚‚( )
}
‚‚* +
[
ÍÍ 	
JsonProperty
ÍÍ	 
(
ÍÍ 
$str
ÍÍ #
)
ÍÍ# $
]
ÍÍ$ %
public
ÎÎ 
string
ÎÎ 
ResponseKey
ÎÎ !
{
ÎÎ" #
get
ÎÎ$ '
;
ÎÎ' (
set
ÎÎ) ,
;
ÎÎ, -
}
ÎÎ. /
[
ÛÛ 	
JsonProperty
ÛÛ	 
(
ÛÛ 
$str
ÛÛ 
)
ÛÛ 
]
ÛÛ  
public
ÙÙ 
int
ÙÙ 
Status
ÙÙ 
{
ÙÙ 
get
ÙÙ 
;
ÙÙ  
set
ÙÙ! $
;
ÙÙ$ %
}
ÙÙ& '
[
¸¸ 	
JsonProperty
¸¸	 
(
¸¸ 
$str
¸¸ 
)
¸¸ 
]
¸¸  
public
˝˝ 
List
˝˝ 
<
˝˝ 
string
˝˝ 
>
˝˝ 
Errors
˝˝ "
{
˝˝# $
get
˝˝% (
;
˝˝( )
set
˝˝* -
;
˝˝- .
}
˝˝/ 0
=
˝˝1 2
new
˝˝3 6
List
˝˝7 ;
<
˝˝; <
string
˝˝< B
>
˝˝B C
(
˝˝C D
)
˝˝D E
;
˝˝E F
[
ÖÖ 	
JsonProperty
ÖÖ	 
(
ÖÖ 
$str
ÖÖ !
)
ÖÖ! "
]
ÖÖ" #
public
ÜÜ 
	Exception
ÜÜ 
	Exception
ÜÜ "
{
ÜÜ# $
get
ÜÜ% (
;
ÜÜ( )
set
ÜÜ* -
;
ÜÜ- .
}
ÜÜ/ 0
[
éé 	
JsonProperty
éé	 
(
éé 
$str
éé 
)
éé 
]
éé 
public
èè 
TResult
èè 
Data
èè 
{
èè 
get
èè !
;
èè! "
set
èè# &
;
èè& '
}
èè( )
}
êê 
public
ïï 

class
ïï 
RequestObject
ïï 
{
ññ 
[
ùù 	
JsonProperty
ùù	 
(
ùù 
$str
ùù  
)
ùù  !
]
ùù! "
public
ûû 
string
ûû 
ViewType
ûû 
{
ûû  
get
ûû! $
;
ûû$ %
set
ûû& )
;
ûû) *
}
ûû+ ,
[
¶¶ 	
JsonProperty
¶¶	 
(
¶¶ 
$str
¶¶ 
)
¶¶ 
]
¶¶ 
public
ßß 
string
ßß 
Key
ßß 
{
ßß 
get
ßß 
;
ßß  
set
ßß! $
;
ßß$ %
}
ßß& '
[
ØØ 	
JsonProperty
ØØ	 
(
ØØ 
$str
ØØ 
)
ØØ  
]
ØØ  !
public
∞∞ 
string
∞∞ 
Keyword
∞∞ 
{
∞∞ 
get
∞∞  #
;
∞∞# $
set
∞∞% (
;
∞∞( )
}
∞∞* +
[
∏∏ 	
JsonProperty
∏∏	 
(
∏∏ 
$str
∏∏ 
)
∏∏ 
]
∏∏  
public
ππ 
Common
ππ 
.
ππ 
Utility
ππ 
.
ππ 
Enums
ππ #
.
ππ# $
SWStatus
ππ$ ,
?
ππ, -
Status
ππ. 4
{
ππ5 6
get
ππ7 :
;
ππ: ;
set
ππ< ?
;
ππ? @
}
ππA B
}
ªª 
public
¿¿ 

class
¿¿ 
RequestPaging
¿¿ 
{
¡¡ 
[
»» 	
JsonProperty
»»	 
(
»» 
$str
»»  
)
»»  !
]
»»! "
public
…… 
string
…… 
ViewType
…… 
{
……  
get
……! $
;
……$ %
set
……& )
;
……) *
}
……+ ,
[
—— 	
JsonProperty
——	 
(
—— 
$str
—— !
)
——! "
]
——" #
public
““ 
int
““ 
	CountryId
““ 
{
““ 
get
““ "
;
““" #
set
““$ '
;
““' (
}
““) *
[
⁄⁄ 	
JsonProperty
⁄⁄	 
(
⁄⁄ 
$str
⁄⁄ 
)
⁄⁄  
]
⁄⁄  !
public
€€ 
string
€€ 
Culture
€€ 
{
€€ 
get
€€  #
;
€€# $
set
€€% (
;
€€( )
}
€€* +
[
„„ 	
JsonProperty
„„	 
(
„„ 
$str
„„ !
)
„„! "
]
„„" #
public
‰‰ 
OrderByDirection
‰‰ 
	Direction
‰‰  )
{
‰‰* +
get
‰‰, /
;
‰‰/ 0
set
‰‰1 4
;
‰‰4 5
}
‰‰6 7
=
‰‰8 9
OrderByDirection
‰‰: J
.
‰‰J K
	Ascending
‰‰K T
;
‰‰T U
[
ÏÏ 	
JsonProperty
ÏÏ	 
(
ÏÏ 
$str
ÏÏ 
)
ÏÏ 
]
ÏÏ 
public
ÌÌ 
string
ÌÌ 
Key
ÌÌ 
{
ÌÌ 
get
ÌÌ 
;
ÌÌ  
set
ÌÌ! $
;
ÌÌ$ %
}
ÌÌ& '
[
ıı 	
JsonProperty
ıı	 
(
ıı 
$str
ıı 
)
ıı  
]
ıı  !
public
ˆˆ 
string
ˆˆ 
Keyword
ˆˆ 
{
ˆˆ 
get
ˆˆ  #
;
ˆˆ# $
set
ˆˆ% (
;
ˆˆ( )
}
ˆˆ* +
[
˛˛ 	
JsonProperty
˛˛	 
(
˛˛ 
$str
˛˛ 
)
˛˛ 
]
˛˛  
public
ˇˇ 
Common
ˇˇ 
.
ˇˇ 
Utility
ˇˇ 
.
ˇˇ 
Enums
ˇˇ #
.
ˇˇ# $
SWStatus
ˇˇ$ ,
?
ˇˇ, -
Status
ˇˇ. 4
{
ˇˇ5 6
get
ˇˇ7 :
;
ˇˇ: ;
set
ˇˇ< ?
;
ˇˇ? @
}
ˇˇA B
[
áá 	
JsonProperty
áá	 
(
áá 
$str
áá 
)
áá  
]
áá  !
public
àà 
string
àà 
OrderBy
àà 
{
àà 
get
àà  #
;
àà# $
set
àà% (
;
àà( )
}
àà* +
=
àà, -
$str
àà. 2
;
àà2 3
[
êê 	
JsonProperty
êê	 
(
êê 
$str
êê !
)
êê! "
]
êê" #
public
ëë 
int
ëë 
	PageIndex
ëë 
{
ëë 
get
ëë "
;
ëë" #
set
ëë$ '
;
ëë' (
}
ëë) *
=
ëë+ ,
$num
ëë- .
;
ëë. /
[
ôô 	
JsonProperty
ôô	 
(
ôô 
$str
ôô  
)
ôô  !
]
ôô! "
public
öö 
int
öö 
?
öö 
PageSize
öö 
{
öö 
get
öö "
;
öö" #
set
öö$ '
;
öö' (
}
öö) *
=
öö+ ,
$num
öö- /
;
öö/ 0
[
¢¢ 	
JsonProperty
¢¢	 
(
¢¢ 
$str
¢¢ !
)
¢¢! "
]
¢¢" #
public
££ 
string
££ 
	UserAgent
££ 
{
££  !
get
££" %
;
££% &
set
££' *
;
££* +
}
££, -
[
´´ 	
JsonProperty
´´	 
(
´´ 
$str
´´ 
)
´´ 
]
´´  
public
¨¨ 
string
¨¨ 
UserId
¨¨ 
{
¨¨ 
get
¨¨ "
;
¨¨" #
set
¨¨$ '
;
¨¨' (
}
¨¨) *
[
ÆÆ 	
JsonProperty
ÆÆ	 
(
ÆÆ 
$str
ÆÆ  
)
ÆÆ  !
]
ÆÆ! "
public
ØØ 
DateTime
ØØ 
?
ØØ 
FromDate
ØØ !
{
ØØ" #
get
ØØ$ '
;
ØØ' (
set
ØØ) ,
;
ØØ, -
}
ØØ. /
[
±± 	
JsonProperty
±±	 
(
±± 
$str
±± 
)
±± 
]
±±  
public
≤≤ 
DateTime
≤≤ 
?
≤≤ 
ToDate
≤≤ 
{
≤≤  !
get
≤≤" %
;
≤≤% &
set
≤≤' *
;
≤≤* +
}
≤≤, -
}
≥≥ 
}¥¥ °Î
NG:\_github\Swastika-Heart\src\Swastika\Domain\Core\ViewModels\ViewModelBase.cs
	namespace 	
Swastika
 
. 
Domain 
. 
Data 
. 

ViewModels )
{ 
public 

abstract 
class 
ViewModelBase '
<' (

TDbContext( 2
,2 3
TModel4 :
,: ;
TView< A
>A B
where 

TDbContext 
: 
	DbContext $
where 
TModel 
: 
class 
where   
TView   
:   
ViewModelBase   #
<  # $

TDbContext  $ .
,  . /
TModel  0 6
,  6 7
TView  8 =
>  = >
{!! 
private'' 
bool'' 
isValid'' 
='' 
true'' #
;''# $
private,, 
static,, 
DefaultRepository,, (
<,,( )

TDbContext,,) 3
,,,3 4
TModel,,5 ;
,,,; <
TView,,= B
>,,B C
_repo,,D I
;,,I J
private11 
IMapper11 
_mapper11 
;11  
private66 
TModel66 
_model66 
;66 
private;; 
IMapper;; 
_modelMapper;; $
;;;$ %
[== 	

JsonIgnore==	 
]== 
public>> 
static>> 
DefaultRepository>> '
<>>' (

TDbContext>>( 2
,>>2 3
TModel>>4 :
,>>: ;
TView>>< A
>>>A B

Repository>>C M
{>>N O
get?? 
{?? 
return?? 
_repo?? 
???? !
(??" #
_repo??# (
=??) *
DefaultRepository??+ <
<??< =

TDbContext??= G
,??G H
TModel??I O
,??O P
TView??Q V
>??V W
.??W X
Instance??X `
)??` a
;??a b
}??c d
set@@ 
=>@@ 
_repo@@ 
=@@ 
value@@  
;@@  !
}AA 	
[II 	

JsonIgnoreII	 
]II 
publicJJ 
	ExceptionJJ 
	ExceptionJJ "
{JJ# $
getJJ% (
;JJ( )
setJJ* -
;JJ- .
}JJ/ 0
[RR 	
JsonPropertyRR	 
(RR 
$strRR 
)RR  
]RR  !
publicSS 
boolSS 
IsCloneSS 
{SS 
getSS !
;SS! "
setSS# &
;SS& '
}SS( )
[[[ 	

JsonIgnore[[	 
][[ 
public\\ 
bool\\ 

IsLazyLoad\\ 
{\\  
get\\! $
;\\$ %
set\\& )
;\\) *
}\\+ ,
=\\- .
true\\/ 3
;\\3 4
[dd 	
JsonPropertydd	 
(dd 
$strdd  
)dd  !
]dd! "
publicee 
Listee 
<ee 
SupportedCultureee $
>ee$ % 
ListSupportedCultureee& :
{ee; <
getee= @
;ee@ A
seteeB E
;eeE F
}eeG H
[mm 	

JsonIgnoremm	 
]mm 
publicnn 
IMappernn 
Mappernn 
{nn 
getoo 
{oo 
returnoo 
_mapperoo  
??oo! #
(oo$ %
_mapperoo% ,
=oo- .
thisoo/ 3
.oo3 4
CreateMapperoo4 @
(oo@ A
)ooA B
)ooB C
;ooC D
}ooE F
setpp 
=>pp 
_mapperpp 
=pp 
valuepp "
;pp" #
}qq 	
[yy 	

JsonIgnoreyy	 
]yy 
publiczz 
TModelzz 
Modelzz 
{zz 
get{{ 
{{{ 
if|| 
(|| 
_model|| 
==|| 
null|| "
)||" #
{}} 
Type~~ 
	classType~~ "
=~~# $
typeof~~% +
(~~+ ,
TModel~~, 2
)~~2 3
;~~3 4
ConstructorInfo #
classConstructor$ 4
=5 6
	classType7 @
.@ A
GetConstructorA O
(O P
newP S
TypeT X
[X Y
]Y Z
{[ \
}] ^
)^ _
;_ `
_model
ÄÄ 
=
ÄÄ 
(
ÄÄ 
TModel
ÄÄ $
)
ÄÄ$ %
classConstructor
ÄÄ% 5
.
ÄÄ5 6
Invoke
ÄÄ6 <
(
ÄÄ< =
new
ÄÄ= @
object
ÄÄA G
[
ÄÄG H
]
ÄÄH I
{
ÄÄJ K
}
ÄÄL M
)
ÄÄM N
;
ÄÄN O
}
ÅÅ 
return
ÇÇ 
_model
ÇÇ 
;
ÇÇ 
}
ÉÉ 
set
ÑÑ 
=>
ÑÑ 
_model
ÑÑ 
=
ÑÑ 
value
ÑÑ !
;
ÑÑ! "
}
ÖÖ 	
[
çç 	

JsonIgnore
çç	 
]
çç 
public
éé 
IMapper
éé 
ModelMapper
éé "
{
éé# $
get
èè 
{
èè 
return
èè 
_modelMapper
èè %
??
èè& (
(
èè) *
_modelMapper
èè* 6
=
èè7 8
this
èè9 =
.
èè= >
CreateModelMapper
èè> O
(
èèO P
)
èèP Q
)
èèQ R
;
èèR S
}
èèT U
set
êê 
=>
êê 
_modelMapper
êê 
=
êê  !
value
êê" '
;
êê' (
}
ëë 	
[
ôô 	
JsonProperty
ôô	 
(
ôô 
$str
ôô  
)
ôô  !
]
ôô! "
public
öö 
int
öö 
?
öö 
Priority
öö 
{
öö 
get
öö "
;
öö" #
set
öö$ '
;
öö' (
}
öö) *
=
öö+ ,
$num
öö- .
;
öö. /
[
¢¢ 	
JsonProperty
¢¢	 
(
¢¢ 
$str
¢¢ 
)
¢¢ 
]
¢¢  
public
££ 
SWStatus
££ 
Status
££ 
{
££  
get
££! $
;
££$ %
set
££& )
;
££) *
}
££+ ,
=
££- .
SWStatus
££/ 7
.
££7 8
Preview
££8 ?
;
££? @
[
´´ 	
JsonProperty
´´	 
(
´´ 
$str
´´ &
)
´´& '
]
´´' (
public
¨¨ 
string
¨¨ 
Specificulture
¨¨ $
{
¨¨% &
get
¨¨' *
;
¨¨* +
set
¨¨, /
;
¨¨/ 0
}
¨¨1 2
private
≤≤ 
IMapper
≤≤ 
CreateMapper
≤≤ $
(
≤≤$ %
)
≤≤% &
{
≥≥ 	
var
¥¥ 
config
¥¥ 
=
¥¥ 
new
¥¥ !
MapperConfiguration
¥¥ 0
(
¥¥0 1
cfg
¥¥1 4
=>
¥¥5 7
cfg
¥¥8 ;
.
¥¥; <
	CreateMap
¥¥< E
<
¥¥E F
TModel
¥¥F L
,
¥¥L M
TView
¥¥N S
>
¥¥S T
(
¥¥T U
)
¥¥U V
.
¥¥V W

ReverseMap
¥¥W a
(
¥¥a b
)
¥¥b c
)
¥¥c d
;
¥¥d e
var
µµ 
mapper
µµ 
=
µµ 
new
µµ 
Mapper
µµ #
(
µµ# $
config
µµ$ *
)
µµ* +
;
µµ+ ,
return
∂∂ 
mapper
∂∂ 
;
∂∂ 
}
∑∑ 	
private
ΩΩ 
IMapper
ΩΩ 
CreateModelMapper
ΩΩ )
(
ΩΩ) *
)
ΩΩ* +
{
ææ 	
var
øø 
config
øø 
=
øø 
new
øø !
MapperConfiguration
øø 0
(
øø0 1
cfg
øø1 4
=>
øø5 7
cfg
øø8 ;
.
øø; <
	CreateMap
øø< E
<
øøE F
TModel
øøF L
,
øøL M
TModel
øøN T
>
øøT U
(
øøU V
)
øøV W
.
øøW X

ReverseMap
øøX b
(
øøb c
)
øøc d
)
øød e
;
øøe f
var
¿¿ 
mapper
¿¿ 
=
¿¿ 
new
¿¿ 
Mapper
¿¿ #
(
¿¿# $
config
¿¿$ *
)
¿¿* +
;
¿¿+ ,
return
¡¡ 
mapper
¡¡ 
;
¡¡ 
}
¬¬ 	
[
ƒƒ 	

JsonIgnore
ƒƒ	 
]
ƒƒ 
public
≈≈ 
List
≈≈ 
<
≈≈ 
string
≈≈ 
>
≈≈ 
Errors
≈≈ "
{
≈≈# $
get
≈≈% (
;
≈≈( )
set
≈≈* -
;
≈≈- .
}
≈≈/ 0
=
≈≈1 2
new
≈≈3 6
List
≈≈7 ;
<
≈≈; <
string
≈≈< B
>
≈≈B C
(
≈≈C D
)
≈≈D E
;
≈≈E F
[
«« 	

JsonIgnore
««	 
]
«« 
[
»» 	
JsonProperty
»»	 
(
»» 
$str
»» 
)
»»  
]
»»  !
public
…… 
bool
…… 
IsValid
…… 
{
…… 
get
…… !
=>
……" $
isValid
……% ,
;
……, -
set
……. 1
=>
……2 4
isValid
……5 <
=
……= >
value
……? D
;
……D E
}
……F G
public
‘‘ 
virtual
‘‘ 
void
‘‘ 

ExpandView
‘‘ &
(
‘‘& '

TDbContext
‘‘' 1
_context
‘‘2 :
=
‘‘; <
null
‘‘= A
,
‘‘A B#
IDbContextTransaction
‘‘C X
_transaction
‘‘Y e
=
‘‘f g
null
‘‘h l
)
‘‘l m
{
’’ 	
}
÷÷ 	
public
›› 
virtual
›› 
Task
›› 
<
›› 
bool
››  
>
››  !
ExpandViewAsync
››" 1
(
››1 2

TDbContext
››2 <
_context
››= E
=
››F G
null
››H L
,
››L M#
IDbContextTransaction
››N c
_transaction
››d p
=
››q r
null
››s w
)
››w x
{
ﬁﬁ 	
var
ﬂﬂ 

taskSource
ﬂﬂ 
=
ﬂﬂ 
new
ﬂﬂ  "
TaskCompletionSource
ﬂﬂ! 5
<
ﬂﬂ5 6
bool
ﬂﬂ6 :
>
ﬂﬂ: ;
(
ﬂﬂ; <
)
ﬂﬂ< =
;
ﬂﬂ= >

taskSource
‡‡ 
.
‡‡ 
	SetResult
‡‡  
(
‡‡  !
true
‡‡! %
)
‡‡% &
;
‡‡& '
return
·· 

taskSource
·· 
.
·· 
Task
·· "
;
··" #
}
‚‚ 	
public
ËË 
virtual
ËË 
TModel
ËË 
	InitModel
ËË '
(
ËË' (
)
ËË( )
{
ÈÈ 	
Type
ÍÍ 
	classType
ÍÍ 
=
ÍÍ 
typeof
ÍÍ #
(
ÍÍ# $
TModel
ÍÍ$ *
)
ÍÍ* +
;
ÍÍ+ ,
ConstructorInfo
ÎÎ 
classConstructor
ÎÎ ,
=
ÎÎ- .
	classType
ÎÎ/ 8
.
ÎÎ8 9
GetConstructor
ÎÎ9 G
(
ÎÎG H
new
ÎÎH K
Type
ÎÎL P
[
ÎÎP Q
]
ÎÎQ R
{
ÎÎS T
}
ÎÎU V
)
ÎÎV W
;
ÎÎW X
TModel
ÏÏ 
context
ÏÏ 
=
ÏÏ 
(
ÏÏ 
TModel
ÏÏ $
)
ÏÏ$ %
classConstructor
ÏÏ% 5
.
ÏÏ5 6
Invoke
ÏÏ6 <
(
ÏÏ< =
new
ÏÏ= @
object
ÏÏA G
[
ÏÏG H
]
ÏÏH I
{
ÏÏJ K
}
ÏÏL M
)
ÏÏM N
;
ÏÏN O
return
ÓÓ 
context
ÓÓ 
;
ÓÓ 
}
ÔÔ 	
public
˘˘ 
virtual
˘˘ 
TView
˘˘ 
InitView
˘˘ %
(
˘˘% &
TModel
˘˘& ,
model
˘˘- 2
=
˘˘3 4
null
˘˘5 9
,
˘˘9 :
bool
˘˘; ?

isLazyLoad
˘˘@ J
=
˘˘K L
true
˘˘M Q
,
˘˘Q R

TDbContext
˘˘S ]
_context
˘˘^ f
=
˘˘g h
null
˘˘i m
,
˘˘m n$
IDbContextTransaction˘˘o Ñ
_transaction˘˘Ö ë
=˘˘í ì
null˘˘î ò
)˘˘ò ô
{
˙˙ 	
Type
˚˚ 
	classType
˚˚ 
=
˚˚ 
typeof
˚˚ #
(
˚˚# $
TView
˚˚$ )
)
˚˚) *
;
˚˚* +
ConstructorInfo
˝˝ 
classConstructor
˝˝ ,
=
˝˝- .
	classType
˝˝/ 8
.
˝˝8 9
GetConstructor
˝˝9 G
(
˝˝G H
new
˝˝H K
Type
˝˝L P
[
˝˝P Q
]
˝˝Q R
{
˝˝S T
}
˝˝U V
)
˝˝V W
;
˝˝W X
if
˛˛ 
(
˛˛ 
model
˛˛ 
==
˛˛ 
null
˛˛ 
&&
˛˛  
classConstructor
˛˛! 1
!=
˛˛2 4
null
˛˛5 9
)
˛˛9 :
{
ˇˇ 
return
ÄÄ 
(
ÄÄ 
TView
ÄÄ 
)
ÄÄ 
classConstructor
ÄÄ .
.
ÄÄ. /
Invoke
ÄÄ/ 5
(
ÄÄ5 6
new
ÄÄ6 9
object
ÄÄ: @
[
ÄÄ@ A
]
ÄÄA B
{
ÄÄC D
}
ÄÄE F
)
ÄÄF G
;
ÄÄG H
}
ÅÅ 
else
ÇÇ 
{
ÉÉ 
classConstructor
ÑÑ  
=
ÑÑ! "
	classType
ÑÑ# ,
.
ÑÑ, -
GetConstructor
ÑÑ- ;
(
ÑÑ; <
new
ÑÑ< ?
Type
ÑÑ@ D
[
ÑÑD E
]
ÑÑE F
{
ÑÑG H
typeof
ÑÑI O
(
ÑÑO P
TModel
ÑÑP V
)
ÑÑV W
,
ÑÑW X
typeof
ÑÑY _
(
ÑÑ_ `
bool
ÑÑ` d
)
ÑÑd e
,
ÑÑe f
typeof
ÑÑg m
(
ÑÑm n

TDbContext
ÑÑn x
)
ÑÑx y
,
ÑÑy z
typeofÑÑ{ Å
(ÑÑÅ Ç%
IDbContextTransactionÑÑÇ ó
)ÑÑó ò
}ÑÑô ö
)ÑÑö õ
;ÑÑõ ú
if
ÖÖ 
(
ÖÖ 
classConstructor
ÖÖ $
!=
ÖÖ% '
null
ÖÖ( ,
)
ÖÖ, -
{
ÜÜ 
return
áá 
(
áá 
TView
áá !
)
áá! "
classConstructor
áá" 2
.
áá2 3
Invoke
áá3 9
(
áá9 :
new
áá: =
object
áá> D
[
ááD E
]
ááE F
{
ááG H
model
ááI N
,
ááN O

isLazyLoad
ááP Z
,
ááZ [
_context
áá\ d
,
áád e
_transaction
ááf r
}
áás t
)
áát u
;
ááu v
}
àà 
else
ââ 
{
ää 
classConstructor
ãã $
=
ãã% &
	classType
ãã' 0
.
ãã0 1
GetConstructor
ãã1 ?
(
ãã? @
new
ãã@ C
Type
ããD H
[
ããH I
]
ããI J
{
ããK L
typeof
ããM S
(
ããS T
TModel
ããT Z
)
ããZ [
,
ãã[ \
typeof
ãã] c
(
ããc d

TDbContext
ããd n
)
ããn o
,
ãão p
typeof
ããq w
(
ããw x$
IDbContextTransactionããx ç
)ããç é
}ããè ê
)ããê ë
;ããë í
return
åå 
(
åå 
TView
åå !
)
åå! "
classConstructor
åå" 2
.
åå2 3
Invoke
åå3 9
(
åå9 :
new
åå: =
object
åå> D
[
ååD E
]
ååE F
{
ååG H
model
ååI N
,
ååN O
_context
ååP X
,
ååX Y
_transaction
ååZ f
}
ååg h
)
ååh i
;
ååi j
}
çç 
}
éé 
}
èè 	
public
ôô 
static
ôô 
async
ôô 
Task
ôô  
<
ôô  !
TView
ôô! &
>
ôô& '
	InitAsync
ôô( 1
(
ôô1 2
TModel
ôô2 8
model
ôô9 >
=
ôô? @
null
ôôA E
,
ôôE F
bool
ôôG K

isLazyLoad
ôôL V
=
ôôW X
true
ôôY ]
,
ôô] ^

TDbContext
ôô_ i
_context
ôôj r
=
ôôs t
null
ôôu y
,
ôôy z$
IDbContextTransactionôô{ ê
_transactionôôë ù
=ôôû ü
nullôô† §
)ôô§ •
{
öö 	
Type
õõ 
	classType
õõ 
=
õõ 
typeof
õõ #
(
õõ# $
TView
õõ$ )
)
õõ) *
;
õõ* +
ConstructorInfo
ùù 
classConstructor
ùù ,
=
ùù- .
	classType
ùù/ 8
.
ùù8 9
GetConstructor
ùù9 G
(
ùùG H
new
ùùH K
Type
ùùL P
[
ùùP Q
]
ùùQ R
{
ùùS T
}
ùùU V
)
ùùV W
;
ùùW X
if
ûû 
(
ûû 
model
ûû 
==
ûû 
null
ûû 
&&
ûû  
classConstructor
ûû! 1
!=
ûû2 4
null
ûû5 9
)
ûû9 :
{
üü 
var
†† 
view
†† 
=
†† 
(
†† 
TView
†† !
)
††! "
classConstructor
††" 2
.
††2 3
Invoke
††3 9
(
††9 :
new
††: =
object
††> D
[
††D E
]
††E F
{
††G H
}
††I J
)
††J K
;
††K L
await
°° 
view
°° 
.
°° 
ParseViewAsync
°° )
(
°°) *
true
°°* .
,
°°. /
_context
°°0 8
,
°°8 9
_transaction
°°: F
)
°°F G
;
°°G H
return
¢¢ 
view
¢¢ 
;
¢¢ 
}
££ 
else
§§ 
{
•• 
classConstructor
¶¶  
=
¶¶! "
	classType
¶¶# ,
.
¶¶, -
GetConstructor
¶¶- ;
(
¶¶; <
new
¶¶< ?
Type
¶¶@ D
[
¶¶D E
]
¶¶E F
{
¶¶G H
typeof
¶¶I O
(
¶¶O P
TModel
¶¶P V
)
¶¶V W
,
¶¶W X
typeof
¶¶Y _
(
¶¶_ `
bool
¶¶` d
)
¶¶d e
,
¶¶e f
typeof
¶¶g m
(
¶¶m n

TDbContext
¶¶n x
)
¶¶x y
,
¶¶y z
typeof¶¶{ Å
(¶¶Å Ç%
IDbContextTransaction¶¶Ç ó
)¶¶ó ò
}¶¶ô ö
)¶¶ö õ
;¶¶õ ú
if
ßß 
(
ßß 
classConstructor
ßß $
!=
ßß% '
null
ßß( ,
)
ßß, -
{
®® 
var
©© 
view
©© 
=
©© 
(
©©  
TView
©©  %
)
©©% &
classConstructor
©©& 6
.
©©6 7
Invoke
©©7 =
(
©©= >
new
©©> A
object
©©B H
[
©©H I
]
©©I J
{
©©K L
model
©©M R
,
©©R S

isLazyLoad
©©T ^
,
©©^ _
_context
©©` h
,
©©h i
_transaction
©©j v
}
©©w x
)
©©x y
;
©©y z
await
™™ 
view
™™ 
.
™™ 
ParseViewAsync
™™ -
(
™™- .

isLazyLoad
™™. 8
,
™™8 9
_context
™™: B
,
™™B C
_transaction
™™D P
)
™™P Q
;
™™Q R
return
´´ 
view
´´ 
;
´´  
}
¨¨ 
else
≠≠ 
{
ÆÆ 
classConstructor
ØØ $
=
ØØ% &
	classType
ØØ' 0
.
ØØ0 1
GetConstructor
ØØ1 ?
(
ØØ? @
new
ØØ@ C
Type
ØØD H
[
ØØH I
]
ØØI J
{
ØØK L
typeof
ØØM S
(
ØØS T
TModel
ØØT Z
)
ØØZ [
,
ØØ[ \
typeof
ØØ] c
(
ØØc d

TDbContext
ØØd n
)
ØØn o
,
ØØo p
typeof
ØØq w
(
ØØw x$
IDbContextTransactionØØx ç
)ØØç é
}ØØè ê
)ØØê ë
;ØØë í
var
∞∞ 
view
∞∞ 
=
∞∞ 
(
∞∞  
TView
∞∞  %
)
∞∞% &
classConstructor
∞∞& 6
.
∞∞6 7
Invoke
∞∞7 =
(
∞∞= >
new
∞∞> A
object
∞∞B H
[
∞∞H I
]
∞∞I J
{
∞∞K L
model
∞∞M R
,
∞∞R S
_context
∞∞T \
,
∞∞\ ]
_transaction
∞∞^ j
}
∞∞k l
)
∞∞l m
;
∞∞m n
await
±± 
view
±± 
.
±± 
ParseViewAsync
±± -
(
±±- .

isLazyLoad
±±. 8
,
±±8 9
_context
±±: B
,
±±B C
_transaction
±±D P
)
±±P Q
;
±±Q R
return
≤≤ 
view
≤≤ 
;
≤≤  
}
≥≥ 
}
¥¥ 
}
µµ 	
public
«« 
virtual
«« 
TModel
«« 

ParseModel
«« (
(
««( )

TDbContext
««) 3
_context
««4 <
=
««= >
null
««? C
,
««C D#
IDbContextTransaction
««E Z
_transaction
««[ g
=
««h i
null
««j n
)
««n o
{
»» 	
this
   
.
   
Model
   
=
   
	InitModel
   "
(
  " #
)
  # $
;
  $ %
Mapper
ÀÀ 
.
ÀÀ 
Map
ÀÀ 
<
ÀÀ 
TView
ÀÀ 
,
ÀÀ 
TModel
ÀÀ $
>
ÀÀ$ %
(
ÀÀ% &
(
ÀÀ& '
TView
ÀÀ' ,
)
ÀÀ, -
this
ÀÀ- 1
,
ÀÀ1 2
Model
ÀÀ3 8
)
ÀÀ8 9
;
ÀÀ9 :
return
ÃÃ 
this
ÃÃ 
.
ÃÃ 
Model
ÃÃ 
;
ÃÃ 
}
ÕÕ 	
public
÷÷ 
virtual
÷÷ 
TView
÷÷ 
	ParseView
÷÷ &
(
÷÷& '
bool
÷÷' +
isExpand
÷÷, 4
=
÷÷5 6
true
÷÷7 ;
,
÷÷; <

TDbContext
÷÷= G
_context
÷÷H P
=
÷÷Q R
null
÷÷S W
,
÷÷W X#
IDbContextTransaction
÷÷Y n
_transaction
÷÷o {
=
÷÷| }
null÷÷~ Ç
)
◊◊4 5
{
ÿÿ 	
Mapper
⁄⁄ 
.
⁄⁄ 
Map
⁄⁄ 
<
⁄⁄ 
TModel
⁄⁄ 
,
⁄⁄ 
TView
⁄⁄ $
>
⁄⁄$ %
(
⁄⁄% &
Model
⁄⁄& +
,
⁄⁄+ ,
(
⁄⁄- .
TView
⁄⁄. 3
)
⁄⁄3 4
this
⁄⁄4 8
)
⁄⁄8 9
;
⁄⁄9 :
if
€€ 
(
€€ 
isExpand
€€ 
)
€€ 
{
‹‹ 
UnitOfWorkHelper
››  
<
››  !

TDbContext
››! +
>
››+ ,
.
››, -
InitTransaction
››- <
(
››< =
_context
››= E
,
››E F
_transaction
››G S
,
››S T
out
››U X

TDbContext
››Y c
context
››d k
,
››k l
out
››m p$
IDbContextTransaction››q Ü
transaction››á í
,››í ì
out››î ó
bool››ò ú
isRoot››ù £
)››£ §
;››§ •
try
ﬁﬁ 
{
ﬂﬂ 

ExpandView
‡‡ 
(
‡‡ 
context
‡‡ &
,
‡‡& '
transaction
‡‡( 3
)
‡‡3 4
;
‡‡4 5
}
·· 
catch
‚‚ 
(
‚‚ 
	Exception
‚‚  
ex
‚‚! #
)
‚‚# $
{
„„ 

Repository
‰‰ 
.
‰‰ 
LogErrorMessage
‰‰ .
(
‰‰. /
ex
‰‰/ 1
)
‰‰1 2
;
‰‰2 3
if
ÂÂ 
(
ÂÂ 
isRoot
ÂÂ 
)
ÂÂ 
{
ÊÊ 
transaction
ËË #
.
ËË# $
Rollback
ËË$ ,
(
ËË, -
)
ËË- .
;
ËË. /
}
ÈÈ 
}
ÍÍ 
finally
ÎÎ 
{
ÏÏ 
if
ÌÌ 
(
ÌÌ 
isRoot
ÌÌ 
)
ÌÌ 
{
ÓÓ 
context
 
.
  
Dispose
  '
(
' (
)
( )
;
) *
}
ÒÒ 
}
ÚÚ 
}
ÛÛ 
return
ÙÙ 
(
ÙÙ 
TView
ÙÙ 
)
ÙÙ 
this
ÙÙ 
;
ÙÙ 
}
ıı 	
public
˛˛ 
virtual
˛˛ 
async
˛˛ 
Task
˛˛ !
<
˛˛! "
TView
˛˛" '
>
˛˛' (
ParseViewAsync
˛˛) 7
(
˛˛7 8
bool
˛˛8 <
isExpand
˛˛= E
=
˛˛F G
true
˛˛H L
,
˛˛L M

TDbContext
˛˛N X
_context
˛˛Y a
=
˛˛b c
null
˛˛d h
,
˛˛h i#
IDbContextTransaction
˛˛j 
_transaction˛˛Ä å
=˛˛ç é
null˛˛è ì
)
ˇˇ4 5
{
ÄÄ 	
Mapper
ÅÅ 
.
ÅÅ 
Map
ÅÅ 
<
ÅÅ 
TModel
ÅÅ 
,
ÅÅ 
TView
ÅÅ $
>
ÅÅ$ %
(
ÅÅ% &
Model
ÅÅ& +
,
ÅÅ+ ,
(
ÅÅ- .
TView
ÅÅ. 3
)
ÅÅ3 4
this
ÅÅ4 8
)
ÅÅ8 9
;
ÅÅ9 :
if
ÇÇ 
(
ÇÇ 
isExpand
ÇÇ 
)
ÇÇ 
{
ÉÉ 
UnitOfWorkHelper
ÑÑ  
<
ÑÑ  !

TDbContext
ÑÑ! +
>
ÑÑ+ ,
.
ÑÑ, -
InitTransaction
ÑÑ- <
(
ÑÑ< =
_context
ÑÑ= E
,
ÑÑE F
_transaction
ÑÑG S
,
ÑÑS T
out
ÑÑU X

TDbContext
ÑÑY c
context
ÑÑd k
,
ÑÑk l
out
ÑÑm p$
IDbContextTransactionÑÑq Ü
transactionÑÑá í
,ÑÑí ì
outÑÑî ó
boolÑÑò ú
isRootÑÑù £
)ÑÑ£ §
;ÑÑ§ •
try
ÖÖ 
{
ÜÜ 
var
áá 
expandResult
áá %
=
áá& '
await
áá( -
ExpandViewAsync
áá. =
(
áá= >
context
áá> E
,
ááE F
transaction
ááG R
)
ááR S
;
ááS T
if
àà 
(
àà 
expandResult
àà $
)
àà$ %
{
ââ 
return
ää 
this
ää #
as
ää$ &
TView
ää' ,
;
ää, -
}
ãã 
else
åå 
{
çç 
return
éé 
null
éé #
;
éé# $
}
èè 
}
êê 
catch
ëë 
(
ëë 
	Exception
ëë  
ex
ëë! #
)
ëë# $
{
íí 

Repository
ìì 
.
ìì 
LogErrorMessage
ìì .
(
ìì. /
ex
ìì/ 1
)
ìì1 2
;
ìì2 3
if
îî 
(
îî 
isRoot
îî 
)
îî 
{
ïï 
transaction
óó #
.
óó# $
Rollback
óó$ ,
(
óó, -
)
óó- .
;
óó. /
}
òò 
}
ôô 
finally
öö 
{
õõ 
if
úú 
(
úú 
isRoot
úú 
)
úú 
{
ùù 
context
üü 
.
üü  
Dispose
üü  '
(
üü' (
)
üü( )
;
üü) *
}
†† 
}
°° 
}
¢¢ 
return
££ 
(
££ 
TView
££ 
)
££ 
this
££ 
;
££ 
}
§§ 	
public
´´ 
virtual
´´ 
void
´´ 
Validate
´´ $
(
´´$ %

TDbContext
´´% /
_context
´´0 8
=
´´9 :
null
´´; ?
,
´´? @#
IDbContextTransaction
´´A V
_transaction
´´W c
=
´´d e
null
´´f j
)
´´j k
{
¨¨ 	
var
≠≠ 
validateContext
≠≠ 
=
≠≠  !
new
≠≠" %
System
≠≠& ,
.
≠≠, -
ComponentModel
≠≠- ;
.
≠≠; <
DataAnnotations
≠≠< K
.
≠≠K L
ValidationContext
≠≠L ]
(
≠≠] ^
this
≠≠^ b
,
≠≠b c
serviceProvider
≠≠d s
:
≠≠s t
null
≠≠u y
,
≠≠y z
items≠≠{ Ä
:≠≠Ä Å
null≠≠Ç Ü
)≠≠Ü á
;≠≠á à
var
ÆÆ 
results
ÆÆ 
=
ÆÆ 
new
ÆÆ 
List
ÆÆ "
<
ÆÆ" #
ValidationResult
ÆÆ# 3
>
ÆÆ3 4
(
ÆÆ4 5
)
ÆÆ5 6
;
ÆÆ6 7
IsValid
∞∞ 
=
∞∞ 
	Validator
∞∞ 
.
∞∞  
TryValidateObject
∞∞  1
(
∞∞1 2
this
∞∞2 6
,
∞∞6 7
validateContext
∞∞8 G
,
∞∞G H
results
∞∞I P
)
∞∞P Q
;
∞∞Q R
if
±± 
(
±± 
!
±± 
IsValid
±± 
)
±± 
{
≤≤ 
Errors
≥≥ 
.
≥≥ 
AddRange
≥≥ 
(
≥≥  
results
≥≥  '
.
≥≥' (
Select
≥≥( .
(
≥≥. /
e
≥≥/ 0
=>
≥≥1 3
e
≥≥4 5
.
≥≥5 6
ErrorMessage
≥≥6 B
)
≥≥B C
)
≥≥C D
;
≥≥D E
}
¥¥ 
}
µµ 	
public
√√ 
virtual
√√ 
async
√√ 
Task
√√ !
<
√√! " 
RepositoryResponse
√√" 4
<
√√4 5
List
√√5 9
<
√√9 :
TView
√√: ?
>
√√? @
>
√√@ A
>
√√A B

CloneAsync
√√C M
(
√√M N
TModel
√√N T
model
√√U Z
,
√√Z [
List
√√\ `
<
√√` a
SupportedCulture
√√a q
>
√√q r
cloneCultures√√s Ä
,
ƒƒ 

TDbContext
ƒƒ 
_context
ƒƒ !
=
ƒƒ" #
null
ƒƒ$ (
,
ƒƒ( )#
IDbContextTransaction
ƒƒ* ?
_transaction
ƒƒ@ L
=
ƒƒM N
null
ƒƒO S
)
ƒƒS T
{
≈≈ 	
UnitOfWorkHelper
∆∆ 
<
∆∆ 

TDbContext
∆∆ '
>
∆∆' (
.
∆∆( )
InitTransaction
∆∆) 8
(
∆∆8 9
_context
∆∆9 A
,
∆∆A B
_transaction
∆∆C O
,
∆∆O P
out
∆∆Q T

TDbContext
∆∆U _
context
∆∆` g
,
∆∆g h
out
∆∆i l$
IDbContextTransaction∆∆m Ç
transaction∆∆É é
,∆∆é è
out∆∆ê ì
bool∆∆î ò
isRoot∆∆ô ü
)∆∆ü †
;∆∆† ° 
RepositoryResponse
«« 
<
«« 
List
«« #
<
««# $
TView
««$ )
>
««) *
>
««* +
result
««, 2
=
««3 4
new
««5 8 
RepositoryResponse
««9 K
<
««K L
List
««L P
<
««P Q
TView
««Q V
>
««V W
>
««W X
(
««X Y
)
««Y Z
{
»» 
	IsSucceed
…… 
=
…… 
true
……  
,
……  !
Data
   
=
   
new
   
List
   
<
    
TView
    %
>
  % &
(
  & '
)
  ' (
}
ÀÀ 
;
ÀÀ 
try
ÕÕ 
{
ŒŒ 
if
œœ 
(
œœ 
cloneCultures
œœ !
!=
œœ" $
null
œœ% )
)
œœ) *
{
–– 
foreach
—— 
(
—— 
var
——  
culture
——! (
in
——) +
cloneCultures
——, 9
)
——9 :
{
““ 
string
”” 
desSpecificulture
”” 0
=
””1 2
culture
””3 :
.
””: ;
Specificulture
””; I
;
””I J
TView
’’ 
view
’’ "
=
’’# $
InitView
’’% -
(
’’- .
)
’’. /
;
’’/ 0
view
÷÷ 
.
÷÷ 
Model
÷÷ "
=
÷÷# $
model
÷÷% *
;
÷÷* +
view
◊◊ 
.
◊◊ 
	ParseView
◊◊ &
(
◊◊& '
isExpand
◊◊' /
:
◊◊/ 0
false
◊◊1 6
,
◊◊6 7
_context
◊◊8 @
:
◊◊@ A
context
◊◊B I
,
◊◊I J
_transaction
◊◊K W
:
◊◊W X
transaction
◊◊Y d
)
◊◊d e
;
◊◊e f
view
ÿÿ 
.
ÿÿ 
Specificulture
ÿÿ +
=
ÿÿ, -
desSpecificulture
ÿÿ. ?
;
ÿÿ? @
bool
⁄⁄ 
isExist
⁄⁄ $
=
⁄⁄% &

Repository
⁄⁄' 1
.
⁄⁄1 2
CheckIsExists
⁄⁄2 ?
(
⁄⁄? @
view
⁄⁄@ D
.
⁄⁄D E

ParseModel
⁄⁄E O
(
⁄⁄O P
context
⁄⁄P W
,
⁄⁄W X
transaction
⁄⁄Y d
)
⁄⁄d e
,
⁄⁄e f
_context
⁄⁄g o
:
⁄⁄o p
context
⁄⁄q x
,
⁄⁄x y
_transaction⁄⁄z Ü
:⁄⁄Ü á
transaction⁄⁄à ì
)⁄⁄ì î
;⁄⁄î ï
if
‹‹ 
(
‹‹ 
isExist
‹‹ #
)
‹‹# $
{
›› 
result
ﬁﬁ "
.
ﬁﬁ" #
	IsSucceed
ﬁﬁ# ,
=
ﬁﬁ- .
true
ﬁﬁ/ 3
;
ﬁﬁ3 4
result
ﬂﬂ "
.
ﬂﬂ" #
Data
ﬂﬂ# '
.
ﬂﬂ' (
Add
ﬂﬂ( +
(
ﬂﬂ+ ,
view
ﬂﬂ, 0
)
ﬂﬂ0 1
;
ﬂﬂ1 2
}
‡‡ 
else
·· 
{
‚‚ 
var
„„ 
cloneResult
„„  +
=
„„, -
await
„„. 3
view
„„4 8
.
„„8 9
SaveModelAsync
„„9 G
(
„„G H
false
„„H M
,
„„M N
context
„„O V
,
„„V W
transaction
„„X c
)
„„c d
.
„„d e
ConfigureAwait
„„e s
(
„„s t
false
„„t y
)
„„y z
;
„„z {
if
‰‰ 
(
‰‰  
cloneResult
‰‰  +
.
‰‰+ ,
	IsSucceed
‰‰, 5
)
‰‰5 6
{
ÂÂ 
var
ÊÊ  #
cloneSubResult
ÊÊ$ 2
=
ÊÊ3 4
await
ÊÊ5 :!
CloneSubModelsAsync
ÊÊ; N
(
ÊÊN O
cloneResult
ÊÊO Z
.
ÊÊZ [
Data
ÊÊ[ _
,
ÊÊ_ `
cloneCultures
ÊÊa n
,
ÊÊn o
context
ÊÊp w
,
ÊÊw x
transactionÊÊy Ñ
)ÊÊÑ Ö
.ÊÊÖ Ü
ConfigureAwaitÊÊÜ î
(ÊÊî ï
falseÊÊï ö
)ÊÊö õ
;ÊÊõ ú
if
ÁÁ  "
(
ÁÁ# $
!
ÁÁ$ %
cloneSubResult
ÁÁ% 3
.
ÁÁ3 4
	IsSucceed
ÁÁ4 =
)
ÁÁ= >
{
ËË  !
cloneResult
ÈÈ$ /
.
ÈÈ/ 0
Errors
ÈÈ0 6
.
ÈÈ6 7
AddRange
ÈÈ7 ?
(
ÈÈ? @
cloneSubResult
ÈÈ@ N
.
ÈÈN O
Errors
ÈÈO U
)
ÈÈU V
;
ÈÈV W
cloneResult
ÍÍ$ /
.
ÍÍ/ 0
	Exception
ÍÍ0 9
=
ÍÍ: ;
cloneSubResult
ÍÍ< J
.
ÍÍJ K
	Exception
ÍÍK T
;
ÍÍT U
}
ÎÎ  !
result
ÌÌ  &
.
ÌÌ& '
	IsSucceed
ÌÌ' 0
=
ÌÌ1 2
result
ÌÌ3 9
.
ÌÌ9 :
	IsSucceed
ÌÌ: C
&&
ÌÌD F
cloneResult
ÌÌG R
.
ÌÌR S
	IsSucceed
ÌÌS \
&&
ÌÌ] _
cloneSubResult
ÌÌ` n
.
ÌÌn o
	IsSucceed
ÌÌo x
;
ÌÌx y
}
ÔÔ 
else
  
{
ÒÒ 
result
ÚÚ  &
.
ÚÚ& '
	IsSucceed
ÚÚ' 0
=
ÚÚ1 2
result
ÚÚ3 9
.
ÚÚ9 :
	IsSucceed
ÚÚ: C
&&
ÚÚD F
cloneResult
ÚÚG R
.
ÚÚR S
	IsSucceed
ÚÚS \
;
ÚÚ\ ]
result
ÛÛ  &
.
ÛÛ& '
Errors
ÛÛ' -
.
ÛÛ- .
AddRange
ÛÛ. 6
(
ÛÛ6 7
cloneResult
ÛÛ7 B
.
ÛÛB C
Errors
ÛÛC I
)
ÛÛI J
;
ÛÛJ K
result
ÙÙ  &
.
ÙÙ& '
	Exception
ÙÙ' 0
=
ÙÙ1 2
cloneResult
ÙÙ3 >
.
ÙÙ> ?
	Exception
ÙÙ? H
;
ÙÙH I
}
ıı 
}
ˆˆ 
UnitOfWorkHelper
˜˜ (
<
˜˜( )

TDbContext
˜˜) 3
>
˜˜3 4
.
˜˜4 5
HandleTransaction
˜˜5 F
(
˜˜F G
result
˜˜G M
.
˜˜M N
	IsSucceed
˜˜N W
,
˜˜W X
isRoot
˜˜Y _
,
˜˜_ `
transaction
˜˜a l
)
˜˜l m
;
˜˜m n
}
¯¯ 
return
˘˘ 
result
˘˘ !
;
˘˘! "
}
˙˙ 
else
˚˚ 
{
¸¸ 
return
˝˝ 
result
˝˝ !
;
˝˝! "
}
˛˛ 
}
ˇˇ 
catch
ÄÄ 
(
ÄÄ 
	Exception
ÄÄ 
ex
ÄÄ 
)
ÄÄ  
{
ÅÅ 
result
ÇÇ 
.
ÇÇ 
	IsSucceed
ÇÇ  
=
ÇÇ! "
false
ÇÇ# (
;
ÇÇ( )
result
ÉÉ 
.
ÉÉ 
	Exception
ÉÉ  
=
ÉÉ! "
ex
ÉÉ# %
;
ÉÉ% &
return
ÑÑ 
result
ÑÑ 
;
ÑÑ 
}
ÖÖ 
finally
ÜÜ 
{
áá 
if
àà 
(
àà 
isRoot
àà 
)
àà 
{
ââ 
context
ää 
.
ää 
Dispose
ää #
(
ää# $
)
ää$ %
;
ää% &
}
ãã 
}
åå 
}
çç 	
public
óó 
virtual
óó 
async
óó 
Task
óó !
<
óó! " 
RepositoryResponse
óó" 4
<
óó4 5
bool
óó5 9
>
óó9 :
>
óó: ;!
CloneSubModelsAsync
óó< O
(
óóO P
TView
óóP U
parent
óóV \
,
óó\ ]
List
óó^ b
<
óób c
SupportedCulture
óóc s
>
óós t
cloneCulturesóóu Ç
,óóÇ É

TDbContextóóÑ é
_contextóóè ó
=óóò ô
nullóóö û
,óóû ü%
IDbContextTransactionóó† µ
_transactionóó∂ ¬
=óó√ ƒ
nullóó≈ …
)óó…  
{
òò 	
var
ôô 

taskSource
ôô 
=
ôô 
new
ôô  "
TaskCompletionSource
ôô! 5
<
ôô5 6 
RepositoryResponse
ôô6 H
<
ôôH I
bool
ôôI M
>
ôôM N
>
ôôN O
(
ôôO P
)
ôôP Q
;
ôôQ R

taskSource
öö 
.
öö 
	SetResult
öö  
(
öö  !
new
öö! $ 
RepositoryResponse
öö% 7
<
öö7 8
bool
öö8 <
>
öö< =
(
öö= >
)
öö> ?
{
öö@ A
	IsSucceed
ööB K
=
ööL M
true
ööN R
,
ööR S
Data
ööT X
=
ööY Z
true
öö[ _
}
öö` a
)
ööa b
;
ööb c
return
õõ 
await
õõ 

taskSource
õõ #
.
õõ# $
Task
õõ$ (
;
õõ( )
}
úú 	
public
•• 
virtual
•• 
async
•• 
Task
•• !
<
••! " 
RepositoryResponse
••" 4
<
••4 5
TModel
••5 ;
>
••; <
>
••< =
RemoveModelAsync
••> N
(
••N O
bool
••O S#
isRemoveRelatedModels
••T i
=
••j k
false
••l q
,
••q r

TDbContext
••s }
_context••~ Ü
=••á à
null••â ç
,••ç é%
IDbContextTransaction••è §
_transaction••• ±
=••≤ ≥
null••¥ ∏
)••∏ π
{
¶¶ 	
UnitOfWorkHelper
ßß 
<
ßß 

TDbContext
ßß '
>
ßß' (
.
ßß( )
InitTransaction
ßß) 8
(
ßß8 9
_context
ßß9 A
,
ßßA B
_transaction
ßßC O
,
ßßO P
out
ßßQ T

TDbContext
ßßU _
context
ßß` g
,
ßßg h
out
ßßi l$
IDbContextTransactionßßm Ç
transactionßßÉ é
,ßßé è
outßßê ì
boolßßî ò
isRootßßô ü
)ßßü †
;ßß† ° 
RepositoryResponse
©© 
<
©© 
TModel
©© %
>
©©% &
result
©©' -
=
©©. /
new
©©0 3 
RepositoryResponse
©©4 F
<
©©F G
TModel
©©G M
>
©©M N
(
©©N O
)
©©O P
{
©©Q R
	IsSucceed
©©S \
=
©©] ^
true
©©_ c
}
©©d e
;
©©e f
try
™™ 
{
´´ 

ParseModel
¨¨ 
(
¨¨ 
_context
¨¨ #
,
¨¨# $
_transaction
¨¨% 1
)
¨¨1 2
;
¨¨2 3
if
≠≠ 
(
≠≠ #
isRemoveRelatedModels
≠≠ )
)
≠≠) *
{
ÆÆ 
var
ØØ !
removeRelatedResult
ØØ +
=
ØØ, -
await
ØØ. 3&
RemoveRelatedModelsAsync
ØØ4 L
(
ØØL M
(
ØØM N
TView
ØØN S
)
ØØS T
this
ØØT X
,
ØØX Y
context
ØØZ a
,
ØØa b
transaction
ØØc n
)
ØØn o
.
ØØo p
ConfigureAwait
ØØp ~
(
ØØ~ 
falseØØ Ñ
)ØØÑ Ö
;ØØÖ Ü
if
∞∞ 
(
∞∞ !
removeRelatedResult
∞∞ +
.
∞∞+ ,
	IsSucceed
∞∞, 5
)
∞∞5 6
{
±± 
result
≤≤ 
=
≤≤  
await
≤≤! &

Repository
≤≤' 1
.
≤≤1 2
RemoveModelAsync
≤≤2 B
(
≤≤B C
Model
≤≤C H
,
≤≤H I
context
≤≤J Q
,
≤≤Q R
transaction
≤≤S ^
)
≤≤^ _
.
≤≤_ `
ConfigureAwait
≤≤` n
(
≤≤n o
false
≤≤o t
)
≤≤t u
;
≤≤u v
}
≥≥ 
else
¥¥ 
{
µµ 
result
∂∂ 
.
∂∂ 
	IsSucceed
∂∂ (
=
∂∂) *
result
∂∂+ 1
.
∂∂1 2
	IsSucceed
∂∂2 ;
&&
∂∂< >!
removeRelatedResult
∂∂? R
.
∂∂R S
	IsSucceed
∂∂S \
;
∂∂\ ]
result
∑∑ 
.
∑∑ 
Errors
∑∑ %
.
∑∑% &
AddRange
∑∑& .
(
∑∑. /!
removeRelatedResult
∑∑/ B
.
∑∑B C
Errors
∑∑C I
)
∑∑I J
;
∑∑J K
result
∏∏ 
.
∏∏ 
	Exception
∏∏ (
=
∏∏) *!
removeRelatedResult
∏∏+ >
.
∏∏> ?
	Exception
∏∏? H
;
∏∏H I
}
ππ 
}
∫∫ 
else
ªª 
{
ºº 
result
ΩΩ 
=
ΩΩ 
await
ΩΩ "

Repository
ΩΩ# -
.
ΩΩ- .
RemoveModelAsync
ΩΩ. >
(
ΩΩ> ?
Model
ΩΩ? D
,
ΩΩD E
context
ΩΩF M
,
ΩΩM N
transaction
ΩΩO Z
)
ΩΩZ [
.
ΩΩ[ \
ConfigureAwait
ΩΩ\ j
(
ΩΩj k
false
ΩΩk p
)
ΩΩp q
;
ΩΩq r
}
ææ 
UnitOfWorkHelper
øø  
<
øø  !

TDbContext
øø! +
>
øø+ ,
.
øø, -
HandleTransaction
øø- >
(
øø> ?
result
øø? E
.
øøE F
	IsSucceed
øøF O
,
øøO P
isRoot
øøQ W
,
øøW X
transaction
øøY d
)
øød e
;
øøe f
return
¿¿ 
result
¿¿ 
;
¿¿ 
}
¡¡ 
catch
¬¬ 
(
¬¬ 
	Exception
¬¬ 
ex
¬¬ 
)
¬¬  
{
√√ 
if
ƒƒ 
(
ƒƒ 
isRoot
ƒƒ 
)
ƒƒ 
{
≈≈ 
transaction
«« 
.
««  
Rollback
««  (
(
««( )
)
««) *
;
««* +
}
»» 
result
…… 
.
…… 
	IsSucceed
……  
=
……! "
false
……# (
;
……( )
result
   
.
   
	Exception
    
=
  ! "
ex
  # %
;
  % &
return
ÀÀ 
result
ÀÀ 
;
ÀÀ 
}
ÃÃ 
finally
ÕÕ 
{
ŒŒ 
if
œœ 
(
œœ 
isRoot
œœ 
)
œœ 
{
–– 
context
““ 
.
““ 
Dispose
““ #
(
““# $
)
““$ %
;
““% &
}
”” 
}
‘‘ 
}
’’ 	
public
ﬁﬁ 
virtual
ﬁﬁ 
async
ﬁﬁ 
Task
ﬁﬁ !
<
ﬁﬁ! " 
RepositoryResponse
ﬁﬁ" 4
<
ﬁﬁ4 5
bool
ﬁﬁ5 9
>
ﬁﬁ9 :
>
ﬁﬁ: ;&
RemoveRelatedModelsAsync
ﬁﬁ< T
(
ﬁﬁT U
TView
ﬁﬁU Z
view
ﬁﬁ[ _
,
ﬁﬁ_ `

TDbContext
ﬁﬁa k
_context
ﬁﬁl t
=
ﬁﬁu v
null
ﬁﬁw {
,
ﬁﬁ{ |$
IDbContextTransactionﬁﬁ} í
_transactionﬁﬁì ü
=ﬁﬁ† °
nullﬁﬁ¢ ¶
)ﬁﬁ¶ ß
{
ﬂﬂ 	
var
‡‡ 

taskSource
‡‡ 
=
‡‡ 
new
‡‡  "
TaskCompletionSource
‡‡! 5
<
‡‡5 6 
RepositoryResponse
‡‡6 H
<
‡‡H I
bool
‡‡I M
>
‡‡M N
>
‡‡N O
(
‡‡O P
)
‡‡P Q
;
‡‡Q R

taskSource
·· 
.
·· 
	SetResult
··  
(
··  !
new
··! $ 
RepositoryResponse
··% 7
<
··7 8
bool
··8 <
>
··< =
(
··= >
)
··> ?
{
··@ A
	IsSucceed
··B K
=
··L M
true
··N R
}
··S T
)
··T U
;
··U V
return
‚‚ 
await
‚‚ 

taskSource
‚‚ #
.
‚‚# $
Task
‚‚$ (
;
‚‚( )
}
„„ 	
public
ÏÏ 
virtual
ÏÏ 
async
ÏÏ 
Task
ÏÏ !
<
ÏÏ! " 
RepositoryResponse
ÏÏ" 4
<
ÏÏ4 5
TView
ÏÏ5 :
>
ÏÏ: ;
>
ÏÏ; <
SaveModelAsync
ÏÏ= K
(
ÏÏK L
bool
ÏÏL P
isSaveSubModels
ÏÏQ `
=
ÏÏa b
false
ÏÏc h
,
ÏÏh i

TDbContext
ÏÏj t
_context
ÏÏu }
=
ÏÏ~ 
nullÏÏÄ Ñ
,ÏÏÑ Ö%
IDbContextTransactionÏÏÜ õ
_transactionÏÏú ®
=ÏÏ© ™
nullÏÏ´ Ø
)ÏÏØ ∞
{
ÌÌ 	
UnitOfWorkHelper
ÓÓ 
<
ÓÓ 

TDbContext
ÓÓ '
>
ÓÓ' (
.
ÓÓ( )
InitTransaction
ÓÓ) 8
(
ÓÓ8 9
_context
ÓÓ9 A
,
ÓÓA B
_transaction
ÓÓC O
,
ÓÓO P
out
ÓÓQ T

TDbContext
ÓÓU _
context
ÓÓ` g
,
ÓÓg h
out
ÓÓi l$
IDbContextTransactionÓÓm Ç
transactionÓÓÉ é
,ÓÓé è
outÓÓê ì
boolÓÓî ò
isRootÓÓô ü
)ÓÓü †
;ÓÓ† ° 
RepositoryResponse
ÔÔ 
<
ÔÔ 
TView
ÔÔ $
>
ÔÔ$ %
result
ÔÔ& ,
=
ÔÔ- .
new
ÔÔ/ 2 
RepositoryResponse
ÔÔ3 E
<
ÔÔE F
TView
ÔÔF K
>
ÔÔK L
(
ÔÔL M
)
ÔÔM N
{
ÔÔO P
	IsSucceed
ÔÔQ Z
=
ÔÔ[ \
true
ÔÔ] a
}
ÔÔb c
;
ÔÔc d
Validate
 
(
 
)
 
;
 
if
ÒÒ 
(
ÒÒ 
IsValid
ÒÒ 
)
ÒÒ 
{
ÚÚ 
try
ÛÛ 
{
ÙÙ 

ParseModel
ıı 
(
ıı 
_context
ıı '
,
ıı' (
_transaction
ıı) 5
)
ıı5 6
;
ıı6 7
result
ˆˆ 
=
ˆˆ 
await
ˆˆ "

Repository
ˆˆ# -
.
ˆˆ- .
SaveModelAsync
ˆˆ. <
(
ˆˆ< =
(
ˆˆ= >
TView
ˆˆ> C
)
ˆˆC D
this
ˆˆD H
,
ˆˆH I
_context
ˆˆJ R
:
ˆˆR S
context
ˆˆT [
,
ˆˆ[ \
_transaction
ˆˆ] i
:
ˆˆi j
transaction
ˆˆk v
)
ˆˆv w
.
ˆˆw x
ConfigureAwaitˆˆx Ü
(ˆˆÜ á
falseˆˆá å
)ˆˆå ç
;ˆˆç é
if
˘˘ 
(
˘˘ 
result
˘˘ 
.
˘˘ 
	IsSucceed
˘˘ (
&&
˘˘) +
isSaveSubModels
˘˘, ;
)
˘˘; <
{
˙˙ 
var
˚˚ 

saveResult
˚˚ &
=
˚˚' (
await
˚˚) . 
SaveSubModelsAsync
˚˚/ A
(
˚˚A B
Model
˚˚B G
,
˚˚G H
context
˚˚I P
,
˚˚P Q
transaction
˚˚R ]
)
˚˚] ^
.
˚˚^ _
ConfigureAwait
˚˚_ m
(
˚˚m n
false
˚˚n s
)
˚˚s t
;
˚˚t u
if
¸¸ 
(
¸¸ 
!
¸¸ 

saveResult
¸¸ '
.
¸¸' (
	IsSucceed
¸¸( 1
)
¸¸1 2
{
˝˝ 
result
˛˛ "
.
˛˛" #
Errors
˛˛# )
.
˛˛) *
AddRange
˛˛* 2
(
˛˛2 3

saveResult
˛˛3 =
.
˛˛= >
Errors
˛˛> D
)
˛˛D E
;
˛˛E F
result
ˇˇ "
.
ˇˇ" #
	Exception
ˇˇ# ,
=
ˇˇ- .

saveResult
ˇˇ/ 9
.
ˇˇ9 :
	Exception
ˇˇ: C
;
ˇˇC D
}
ÄÄ 
result
ÅÅ 
.
ÅÅ 
	IsSucceed
ÅÅ (
=
ÅÅ) *
result
ÅÅ+ 1
.
ÅÅ1 2
	IsSucceed
ÅÅ2 ;
&&
ÅÅ< >

saveResult
ÅÅ? I
.
ÅÅI J
	IsSucceed
ÅÅJ S
;
ÅÅS T
}
ÇÇ 
if
ÖÖ 
(
ÖÖ 
result
ÖÖ 
.
ÖÖ 
	IsSucceed
ÖÖ (
&&
ÖÖ) +
IsClone
ÖÖ, 3
&&
ÖÖ4 6
isRoot
ÖÖ7 =
)
ÖÖ= >
{
ÜÜ 
var
áá 
cloneCultures
áá )
=
áá* +"
ListSupportedCulture
áá, @
.
áá@ A
Where
ááA F
(
ááF G
c
ááG H
=>
ááI K
c
ááL M
.
ááM N
Specificulture
ááN \
!=
áá] _
Specificulture
áá` n
&&
ááo q
c
áár s
.
áás t
IsSupported
áát 
)áá Ä
.ááÄ Å
ToListááÅ á
(ááá à
)ááà â
;ááâ ä
var
àà 
cloneResult
àà '
=
àà( )
await
àà* /

CloneAsync
àà0 :
(
àà: ;
Model
àà; @
,
àà@ A
cloneCultures
ààB O
,
ààO P
_context
ààQ Y
:
ààY Z
context
àà[ b
,
ààb c
_transaction
ààd p
:
ààp q
transaction
ààr }
)
àà} ~
.
àà~ 
ConfigureAwaitàà ç
(ààç é
falseààé ì
)ààì î
;ààî ï
if
ââ 
(
ââ 
!
ââ 
cloneResult
ââ (
.
ââ( )
	IsSucceed
ââ) 2
)
ââ2 3
{
ää 
result
ãã "
.
ãã" #
Errors
ãã# )
.
ãã) *
AddRange
ãã* 2
(
ãã2 3
cloneResult
ãã3 >
.
ãã> ?
Errors
ãã? E
)
ããE F
;
ããF G
result
åå "
.
åå" #
	Exception
åå# ,
=
åå- .
cloneResult
åå/ :
.
åå: ;
	Exception
åå; D
;
ååD E
}
çç 
result
éé 
.
éé 
	IsSucceed
éé (
=
éé) *
result
éé+ 1
.
éé1 2
	IsSucceed
éé2 ;
&&
éé< >
cloneResult
éé? J
.
ééJ K
	IsSucceed
ééK T
;
ééT U
}
èè 
UnitOfWorkHelper
ëë $
<
ëë$ %

TDbContext
ëë% /
>
ëë/ 0
.
ëë0 1
HandleTransaction
ëë1 B
(
ëëB C
result
ëëC I
.
ëëI J
	IsSucceed
ëëJ S
,
ëëS T
isRoot
ëëU [
,
ëë[ \
transaction
ëë] h
)
ëëh i
;
ëëi j
return
íí 
result
íí !
;
íí! "
}
ìì 
catch
îî 
(
îî 
	Exception
îî  
ex
îî! #
)
îî# $
{
ïï 

Repository
ññ 
.
ññ 
LogErrorMessage
ññ .
(
ññ. /
ex
ññ/ 1
)
ññ1 2
;
ññ2 3
if
óó 
(
óó 
isRoot
óó 
)
óó 
{
òò 
transaction
öö #
.
öö# $
Rollback
öö$ ,
(
öö, -
)
öö- .
;
öö. /
}
õõ 
result
úú 
.
úú 
	IsSucceed
úú $
=
úú% &
false
úú' ,
;
úú, -
result
ùù 
.
ùù 
	Exception
ùù $
=
ùù% &
ex
ùù' )
;
ùù) *
return
ûû 
result
ûû !
;
ûû! "
}
üü 
finally
†† 
{
°° 
if
¢¢ 
(
¢¢ 
isRoot
¢¢ 
)
¢¢ 
{
££ 
context
•• 
.
••  
Dispose
••  '
(
••' (
)
••( )
;
••) *
}
¶¶ 
}
ßß 
}
®® 
else
©© 
{
™™ 
return
´´ 
new
´´  
RepositoryResponse
´´ -
<
´´- .
TView
´´. 3
>
´´3 4
(
´´4 5
)
´´5 6
{
¨¨ 
	IsSucceed
≠≠ 
=
≠≠ 
false
≠≠  %
,
≠≠% &
Data
ÆÆ 
=
ÆÆ 
null
ÆÆ 
,
ÆÆ  
Errors
ØØ 
=
ØØ 
Errors
ØØ #
}
∞∞ 
;
∞∞ 
}
±± 
}
≤≤ 	
public
ªª 
virtual
ªª 
async
ªª 
Task
ªª !
<
ªª! " 
RepositoryResponse
ªª" 4
<
ªª4 5
bool
ªª5 9
>
ªª9 :
>
ªª: ; 
SaveSubModelsAsync
ªª< N
(
ªªN O
TModel
ªªO U
parent
ªªV \
,
ªª\ ]

TDbContext
ªª^ h
_context
ªªi q
=
ªªr s
null
ªªt x
,
ªªx y$
IDbContextTransactionªªz è
_transactionªªê ú
=ªªù û
nullªªü £
)ªª£ §
{
ºº 	
var
ΩΩ 

taskSource
ΩΩ 
=
ΩΩ 
new
ΩΩ  "
TaskCompletionSource
ΩΩ! 5
<
ΩΩ5 6 
RepositoryResponse
ΩΩ6 H
<
ΩΩH I
bool
ΩΩI M
>
ΩΩM N
>
ΩΩN O
(
ΩΩO P
)
ΩΩP Q
;
ΩΩQ R

taskSource
ææ 
.
ææ 
	SetResult
ææ  
(
ææ  !
new
ææ! $ 
RepositoryResponse
ææ% 7
<
ææ7 8
bool
ææ8 <
>
ææ< =
(
ææ= >
)
ææ> ?
{
ææ@ A
	IsSucceed
ææB K
=
ææL M
true
ææN R
}
ææS T
)
ææT U
;
ææU V
return
øø 
await
øø 

taskSource
øø #
.
øø# $
Task
øø$ (
;
øø( )
}
¿¿ 	
public
ŒŒ 
virtual
ŒŒ  
RepositoryResponse
ŒŒ )
<
ŒŒ) *
List
ŒŒ* .
<
ŒŒ. /
TView
ŒŒ/ 4
>
ŒŒ4 5
>
ŒŒ5 6
Clone
ŒŒ7 <
(
ŒŒ< =
TModel
ŒŒ= C
model
ŒŒD I
,
ŒŒI J
List
ŒŒK O
<
ŒŒO P
SupportedCulture
ŒŒP `
>
ŒŒ` a
cloneCultures
ŒŒb o
,
ŒŒo p

TDbContext
ŒŒq {
_contextŒŒ| Ñ
=ŒŒÖ Ü
nullŒŒá ã
,ŒŒã å%
IDbContextTransactionŒŒç ¢
_transactionŒŒ£ Ø
=ŒŒ∞ ±
nullŒŒ≤ ∂
)ŒŒ∂ ∑
{
œœ 	
UnitOfWorkHelper
–– 
<
–– 

TDbContext
–– '
>
––' (
.
––( )
InitTransaction
––) 8
(
––8 9
_context
––9 A
,
––A B
_transaction
––C O
,
––O P
out
––Q T

TDbContext
––U _
context
––` g
,
––g h
out
––i l$
IDbContextTransaction––m Ç
transaction––É é
,––é è
out––ê ì
bool––î ò
isRoot––ô ü
)––ü †
;––† ° 
RepositoryResponse
““ 
<
““ 
List
““ #
<
““# $
TView
““$ )
>
““) *
>
““* +
result
““, 2
=
““3 4
new
““5 8 
RepositoryResponse
““9 K
<
““K L
List
““L P
<
““P Q
TView
““Q V
>
““V W
>
““W X
(
““X Y
)
““Y Z
{
”” 
	IsSucceed
‘‘ 
=
‘‘ 
true
‘‘  
,
‘‘  !
Data
’’ 
=
’’ 
new
’’ 
List
’’ 
<
’’  
TView
’’  %
>
’’% &
(
’’& '
)
’’' (
}
÷÷ 
;
÷÷ 
try
ÿÿ 
{
ŸŸ 
if
⁄⁄ 
(
⁄⁄ 
cloneCultures
⁄⁄ !
!=
⁄⁄" $
null
⁄⁄% )
)
⁄⁄) *
{
€€ 
foreach
‹‹ 
(
‹‹ 
var
‹‹  
culture
‹‹! (
in
‹‹) +
cloneCultures
‹‹, 9
)
‹‹9 :
{
›› 
string
ﬁﬁ 
desSpecificulture
ﬁﬁ 0
=
ﬁﬁ1 2
culture
ﬁﬁ3 :
.
ﬁﬁ: ;
Specificulture
ﬁﬁ; I
;
ﬁﬁI J
TView
‡‡ 
view
‡‡ "
=
‡‡# $
InitView
‡‡% -
(
‡‡- .
)
‡‡. /
;
‡‡/ 0
view
·· 
.
·· 
Model
·· "
=
··# $
model
··% *
;
··* +
view
‚‚ 
.
‚‚ 
	ParseView
‚‚ &
(
‚‚& '
isExpand
‚‚' /
:
‚‚/ 0
false
‚‚1 6
,
‚‚6 7
_context
‚‚8 @
:
‚‚@ A
context
‚‚B I
,
‚‚I J
_transaction
‚‚K W
:
‚‚W X
transaction
‚‚Y d
)
‚‚d e
;
‚‚e f
view
„„ 
.
„„ 
Specificulture
„„ +
=
„„, -
desSpecificulture
„„. ?
;
„„? @
bool
ÂÂ 
isExist
ÂÂ $
=
ÂÂ% &

Repository
ÂÂ' 1
.
ÂÂ1 2
CheckIsExists
ÂÂ2 ?
(
ÂÂ? @
view
ÂÂ@ D
.
ÂÂD E

ParseModel
ÂÂE O
(
ÂÂO P
_context
ÂÂP X
,
ÂÂX Y
_transaction
ÂÂZ f
)
ÂÂf g
,
ÂÂg h
_context
ÂÂi q
:
ÂÂq r
context
ÂÂs z
,
ÂÂz {
_transactionÂÂ| à
:ÂÂà â
transactionÂÂä ï
)ÂÂï ñ
;ÂÂñ ó
if
ÁÁ 
(
ÁÁ 
isExist
ÁÁ #
)
ÁÁ# $
{
ËË 
result
ÈÈ "
.
ÈÈ" #
	IsSucceed
ÈÈ# ,
=
ÈÈ- .
true
ÈÈ/ 3
;
ÈÈ3 4
result
ÍÍ "
.
ÍÍ" #
Data
ÍÍ# '
.
ÍÍ' (
Add
ÍÍ( +
(
ÍÍ+ ,
view
ÍÍ, 0
)
ÍÍ0 1
;
ÍÍ1 2
}
ÎÎ 
else
ÏÏ 
{
ÌÌ 
var
ÓÓ 
cloneResult
ÓÓ  +
=
ÓÓ, -
view
ÓÓ. 2
.
ÓÓ2 3
	SaveModel
ÓÓ3 <
(
ÓÓ< =
false
ÓÓ= B
,
ÓÓB C
context
ÓÓD K
,
ÓÓK L
transaction
ÓÓM X
)
ÓÓX Y
;
ÓÓY Z
if
ÔÔ 
(
ÔÔ  
cloneResult
ÔÔ  +
.
ÔÔ+ ,
	IsSucceed
ÔÔ, 5
)
ÔÔ5 6
{
 
var
ÒÒ  #
cloneSubResult
ÒÒ$ 2
=
ÒÒ3 4
CloneSubModels
ÒÒ5 C
(
ÒÒC D
cloneResult
ÒÒD O
.
ÒÒO P
Data
ÒÒP T
,
ÒÒT U
cloneCultures
ÒÒV c
,
ÒÒc d
context
ÒÒe l
,
ÒÒl m
transaction
ÒÒn y
)
ÒÒy z
;
ÒÒz {
if
ÚÚ  "
(
ÚÚ# $
!
ÚÚ$ %
cloneSubResult
ÚÚ% 3
.
ÚÚ3 4
	IsSucceed
ÚÚ4 =
)
ÚÚ= >
{
ÛÛ  !
cloneResult
ÙÙ$ /
.
ÙÙ/ 0
Errors
ÙÙ0 6
.
ÙÙ6 7
AddRange
ÙÙ7 ?
(
ÙÙ? @
cloneSubResult
ÙÙ@ N
.
ÙÙN O
Errors
ÙÙO U
)
ÙÙU V
;
ÙÙV W
cloneResult
ıı$ /
.
ıı/ 0
	Exception
ıı0 9
=
ıı: ;
cloneSubResult
ıı< J
.
ııJ K
	Exception
ııK T
;
ııT U
}
ˆˆ  !
result
¯¯  &
.
¯¯& '
	IsSucceed
¯¯' 0
=
¯¯1 2
result
¯¯3 9
.
¯¯9 :
	IsSucceed
¯¯: C
&&
¯¯D F
cloneResult
¯¯G R
.
¯¯R S
	IsSucceed
¯¯S \
&&
¯¯] _
cloneSubResult
¯¯` n
.
¯¯n o
	IsSucceed
¯¯o x
;
¯¯x y
result
˘˘  &
.
˘˘& '
Data
˘˘' +
.
˘˘+ ,
Add
˘˘, /
(
˘˘/ 0
cloneResult
˘˘0 ;
.
˘˘; <
Data
˘˘< @
)
˘˘@ A
;
˘˘A B
}
˙˙ 
else
˚˚  
{
¸¸ 
result
˝˝  &
.
˝˝& '
	IsSucceed
˝˝' 0
=
˝˝1 2
result
˝˝3 9
.
˝˝9 :
	IsSucceed
˝˝: C
&&
˝˝D F
cloneResult
˝˝G R
.
˝˝R S
	IsSucceed
˝˝S \
;
˝˝\ ]
result
˛˛  &
.
˛˛& '
Errors
˛˛' -
.
˛˛- .
AddRange
˛˛. 6
(
˛˛6 7
cloneResult
˛˛7 B
.
˛˛B C
Errors
˛˛C I
)
˛˛I J
;
˛˛J K
result
ˇˇ  &
.
ˇˇ& '
	Exception
ˇˇ' 0
=
ˇˇ1 2
cloneResult
ˇˇ3 >
.
ˇˇ> ?
	Exception
ˇˇ? H
;
ˇˇH I
}
ÄÄ 
}
ÅÅ 
}
ÇÇ 
UnitOfWorkHelper
ÉÉ $
<
ÉÉ$ %

TDbContext
ÉÉ% /
>
ÉÉ/ 0
.
ÉÉ0 1
HandleTransaction
ÉÉ1 B
(
ÉÉB C
result
ÉÉC I
.
ÉÉI J
	IsSucceed
ÉÉJ S
,
ÉÉS T
isRoot
ÉÉU [
,
ÉÉ[ \
transaction
ÉÉ] h
)
ÉÉh i
;
ÉÉi j
return
ÑÑ 
result
ÑÑ !
;
ÑÑ! "
}
ÖÖ 
else
ÜÜ 
{
áá 
return
àà 
result
àà !
;
àà! "
}
ââ 
}
ää 
catch
ãã 
(
ãã 
	Exception
ãã 
ex
ãã 
)
ãã  
{
åå 
result
çç 
.
çç 
	IsSucceed
çç  
=
çç! "
false
çç# (
;
çç( )
result
éé 
.
éé 
	Exception
éé  
=
éé! "
ex
éé# %
;
éé% &
return
èè 
result
èè 
;
èè 
}
êê 
finally
ëë 
{
íí 
if
ìì 
(
ìì 
isRoot
ìì 
)
ìì 
{
îî 
context
ïï 
.
ïï 
Dispose
ïï #
(
ïï# $
)
ïï$ %
;
ïï% &
}
ññ 
}
óó 
}
òò 	
public
¢¢ 
virtual
¢¢  
RepositoryResponse
¢¢ )
<
¢¢) *
bool
¢¢* .
>
¢¢. /
CloneSubModels
¢¢0 >
(
¢¢> ?
TView
¢¢? D
parent
¢¢E K
,
¢¢K L
List
¢¢M Q
<
¢¢Q R
SupportedCulture
¢¢R b
>
¢¢b c
cloneCultures
¢¢d q
,
¢¢q r

TDbContext
¢¢s }
_context¢¢~ Ü
=¢¢á à
null¢¢â ç
,¢¢ç é%
IDbContextTransaction¢¢è §
_transaction¢¢• ±
=¢¢≤ ≥
null¢¢¥ ∏
)¢¢∏ π
{
££ 	
return
§§ 
new
§§  
RepositoryResponse
§§ )
<
§§) *
bool
§§* .
>
§§. /
(
§§/ 0
)
§§0 1
{
§§2 3
	IsSucceed
§§4 =
=
§§> ?
true
§§@ D
}
§§E F
;
§§F G
}
•• 	
public
ÆÆ 
virtual
ÆÆ  
RepositoryResponse
ÆÆ )
<
ÆÆ) *
TModel
ÆÆ* 0
>
ÆÆ0 1
RemoveModel
ÆÆ2 =
(
ÆÆ= >
bool
ÆÆ> B#
isRemoveRelatedModels
ÆÆC X
=
ÆÆY Z
false
ÆÆ[ `
,
ÆÆ` a

TDbContext
ÆÆb l
_context
ÆÆm u
=
ÆÆv w
null
ÆÆx |
,
ÆÆ| }$
IDbContextTransactionÆÆ~ ì
_transactionÆÆî †
=ÆÆ° ¢
nullÆÆ£ ß
)ÆÆß ®
{
ØØ 	
UnitOfWorkHelper
∞∞ 
<
∞∞ 

TDbContext
∞∞ '
>
∞∞' (
.
∞∞( )
InitTransaction
∞∞) 8
(
∞∞8 9
_context
∞∞9 A
,
∞∞A B
_transaction
∞∞C O
,
∞∞O P
out
∞∞Q T

TDbContext
∞∞U _
context
∞∞` g
,
∞∞g h
out
∞∞i l$
IDbContextTransaction∞∞m Ç
transaction∞∞É é
,∞∞é è
out∞∞ê ì
bool∞∞î ò
isRoot∞∞ô ü
)∞∞ü †
;∞∞† ° 
RepositoryResponse
±± 
<
±± 
TModel
±± %
>
±±% &
result
±±' -
=
±±. /
new
±±0 3 
RepositoryResponse
±±4 F
<
±±F G
TModel
±±G M
>
±±M N
(
±±N O
)
±±O P
{
±±Q R
	IsSucceed
±±S \
=
±±] ^
true
±±_ c
}
±±d e
;
±±e f
try
≤≤ 
{
≥≥ 

ParseModel
¥¥ 
(
¥¥ 
_context
¥¥ #
,
¥¥# $
_transaction
¥¥% 1
)
¥¥1 2
;
¥¥2 3
if
µµ 
(
µµ #
isRemoveRelatedModels
µµ )
)
µµ) *
{
∂∂ 
var
∑∑ !
removeRelatedResult
∑∑ +
=
∑∑, -!
RemoveRelatedModels
∑∑. A
(
∑∑A B
(
∑∑B C
TView
∑∑C H
)
∑∑H I
this
∑∑I M
,
∑∑M N
context
∑∑O V
,
∑∑V W
transaction
∑∑X c
)
∑∑c d
;
∑∑d e
if
∏∏ 
(
∏∏ !
removeRelatedResult
∏∏ +
.
∏∏+ ,
	IsSucceed
∏∏, 5
)
∏∏5 6
{
ππ 
result
∫∫ 
=
∫∫  

Repository
∫∫! +
.
∫∫+ ,
RemoveModel
∫∫, 7
(
∫∫7 8
Model
∫∫8 =
,
∫∫= >
context
∫∫? F
,
∫∫F G
transaction
∫∫H S
)
∫∫S T
;
∫∫T U
}
ªª 
else
ºº 
{
ΩΩ 
result
ææ 
.
ææ 
	IsSucceed
ææ (
=
ææ) *
result
ææ+ 1
.
ææ1 2
	IsSucceed
ææ2 ;
&&
ææ< >!
removeRelatedResult
ææ? R
.
ææR S
	IsSucceed
ææS \
;
ææ\ ]
result
øø 
.
øø 
Errors
øø %
.
øø% &
AddRange
øø& .
(
øø. /!
removeRelatedResult
øø/ B
.
øøB C
Errors
øøC I
)
øøI J
;
øøJ K
result
¿¿ 
.
¿¿ 
	Exception
¿¿ (
=
¿¿) *!
removeRelatedResult
¿¿+ >
.
¿¿> ?
	Exception
¿¿? H
;
¿¿H I
}
¡¡ 
}
¬¬ 
else
√√ 
{
ƒƒ 
result
≈≈ 
=
≈≈ 

Repository
≈≈ '
.
≈≈' (
RemoveModel
≈≈( 3
(
≈≈3 4
Model
≈≈4 9
,
≈≈9 :
context
≈≈; B
,
≈≈B C
transaction
≈≈D O
)
≈≈O P
;
≈≈P Q
}
∆∆ 
UnitOfWorkHelper
»»  
<
»»  !

TDbContext
»»! +
>
»»+ ,
.
»», -
HandleTransaction
»»- >
(
»»> ?
result
»»? E
.
»»E F
	IsSucceed
»»F O
,
»»O P
isRoot
»»Q W
,
»»W X
transaction
»»Y d
)
»»d e
;
»»e f
return
…… 
result
…… 
;
…… 
}
   
catch
ÀÀ 
(
ÀÀ 
	Exception
ÀÀ 
ex
ÀÀ 
)
ÀÀ  
{
ÃÃ 
if
ÕÕ 
(
ÕÕ 
isRoot
ÕÕ 
)
ÕÕ 
{
ŒŒ 
transaction
–– 
.
––  
Rollback
––  (
(
––( )
)
––) *
;
––* +
}
—— 
result
““ 
.
““ 
	IsSucceed
““  
=
““! "
false
““# (
;
““( )
result
”” 
.
”” 
	Exception
””  
=
””! "
ex
””# %
;
””% &
return
‘‘ 
result
‘‘ 
;
‘‘ 
}
’’ 
finally
÷÷ 
{
◊◊ 
if
ÿÿ 
(
ÿÿ 
isRoot
ÿÿ 
)
ÿÿ 
{
ŸŸ 
context
€€ 
.
€€ 
Dispose
€€ #
(
€€# $
)
€€$ %
;
€€% &
}
‹‹ 
}
›› 
}
ﬁﬁ 	
public
ÁÁ 
virtual
ÁÁ  
RepositoryResponse
ÁÁ )
<
ÁÁ) *
bool
ÁÁ* .
>
ÁÁ. /!
RemoveRelatedModels
ÁÁ0 C
(
ÁÁC D
TView
ÁÁD I
view
ÁÁJ N
,
ÁÁN O

TDbContext
ÁÁP Z
_context
ÁÁ[ c
=
ÁÁd e
null
ÁÁf j
,
ÁÁj k$
IDbContextTransactionÁÁl Å
_transactionÁÁÇ é
=ÁÁè ê
nullÁÁë ï
)ÁÁï ñ
{
ËË 	
return
ÈÈ 
new
ÈÈ  
RepositoryResponse
ÈÈ )
<
ÈÈ) *
bool
ÈÈ* .
>
ÈÈ. /
(
ÈÈ/ 0
)
ÈÈ0 1
{
ÈÈ2 3
	IsSucceed
ÈÈ4 =
=
ÈÈ> ?
true
ÈÈ@ D
}
ÈÈE F
;
ÈÈF G
}
ÍÍ 	
public
ÛÛ 
virtual
ÛÛ  
RepositoryResponse
ÛÛ )
<
ÛÛ) *
TView
ÛÛ* /
>
ÛÛ/ 0
	SaveModel
ÛÛ1 :
(
ÛÛ: ;
bool
ÛÛ; ?
isSaveSubModels
ÛÛ@ O
=
ÛÛP Q
false
ÛÛR W
,
ÛÛW X

TDbContext
ÛÛY c
_context
ÛÛd l
=
ÛÛm n
null
ÛÛo s
,
ÛÛs t$
IDbContextTransactionÛÛu ä
_transactionÛÛã ó
=ÛÛò ô
nullÛÛö û
)ÛÛû ü
{
ÙÙ 	
UnitOfWorkHelper
ıı 
<
ıı 

TDbContext
ıı '
>
ıı' (
.
ıı( )
InitTransaction
ıı) 8
(
ıı8 9
_context
ıı9 A
,
ııA B
_transaction
ııC O
,
ııO P
out
ııQ T

TDbContext
ııU _
context
ıı` g
,
ııg h
out
ııi l$
IDbContextTransactionıım Ç
transactionııÉ é
,ııé è
outııê ì
boolııî ò
isRootııô ü
)ııü †
;ıı† ° 
RepositoryResponse
ˆˆ 
<
ˆˆ 
TView
ˆˆ $
>
ˆˆ$ %
result
ˆˆ& ,
=
ˆˆ- .
new
ˆˆ/ 2 
RepositoryResponse
ˆˆ3 E
<
ˆˆE F
TView
ˆˆF K
>
ˆˆK L
(
ˆˆL M
)
ˆˆM N
{
ˆˆO P
	IsSucceed
ˆˆQ Z
=
ˆˆ[ \
true
ˆˆ] a
}
ˆˆb c
;
ˆˆc d
Validate
˜˜ 
(
˜˜ 
)
˜˜ 
;
˜˜ 
if
¯¯ 
(
¯¯ 
IsValid
¯¯ 
)
¯¯ 
{
˘˘ 
try
˙˙ 
{
˚˚ 

ParseModel
¸¸ 
(
¸¸ 
context
¸¸ &
,
¸¸& '
transaction
¸¸( 3
)
¸¸3 4
;
¸¸4 5
result
˝˝ 
=
˝˝ 

Repository
˝˝ '
.
˝˝' (
	SaveModel
˝˝( 1
(
˝˝1 2
(
˝˝2 3
TView
˝˝3 8
)
˝˝8 9
this
˝˝9 =
,
˝˝= >
_context
˝˝? G
:
˝˝G H
context
˝˝I P
,
˝˝P Q
_transaction
˝˝R ^
:
˝˝^ _
transaction
˝˝` k
)
˝˝k l
;
˝˝l m
if
ÄÄ 
(
ÄÄ 
result
ÄÄ 
.
ÄÄ 
	IsSucceed
ÄÄ (
&&
ÄÄ) +
isSaveSubModels
ÄÄ, ;
)
ÄÄ; <
{
ÅÅ 
var
ÇÇ 

saveResult
ÇÇ &
=
ÇÇ' (
SaveSubModels
ÇÇ) 6
(
ÇÇ6 7
Model
ÇÇ7 <
,
ÇÇ< =
context
ÇÇ> E
,
ÇÇE F
transaction
ÇÇG R
)
ÇÇR S
;
ÇÇS T
if
ÉÉ 
(
ÉÉ 
!
ÉÉ 

saveResult
ÉÉ '
.
ÉÉ' (
	IsSucceed
ÉÉ( 1
)
ÉÉ1 2
{
ÑÑ 
result
ÖÖ "
.
ÖÖ" #
Errors
ÖÖ# )
.
ÖÖ) *
AddRange
ÖÖ* 2
(
ÖÖ2 3

saveResult
ÖÖ3 =
.
ÖÖ= >
Errors
ÖÖ> D
)
ÖÖD E
;
ÖÖE F
result
ÜÜ "
.
ÜÜ" #
	Exception
ÜÜ# ,
=
ÜÜ- .

saveResult
ÜÜ/ 9
.
ÜÜ9 :
	Exception
ÜÜ: C
;
ÜÜC D
}
áá 
result
àà 
.
àà 
	IsSucceed
àà (
=
àà) *
result
àà+ 1
.
àà1 2
	IsSucceed
àà2 ;
&&
àà< >

saveResult
àà? I
.
ààI J
	IsSucceed
ààJ S
;
ààS T
}
ââ 
if
åå 
(
åå 
result
åå 
.
åå 
	IsSucceed
åå (
&&
åå) +
IsClone
åå, 3
&&
åå4 6
isRoot
åå7 =
)
åå= >
{
çç 
var
éé 
cloneCultures
éé )
=
éé* +"
ListSupportedCulture
éé, @
.
éé@ A
Where
ééA F
(
ééF G
c
ééG H
=>
ééI K
c
ééL M
.
ééM N
Specificulture
ééN \
!=
éé] _
Specificulture
éé` n
&&
ééo q
c
éér s
.
éés t
IsSupported
éét 
)éé Ä
.ééÄ Å
ToListééÅ á
(ééá à
)ééà â
;ééâ ä
var
èè 
cloneResult
èè '
=
èè( )
Clone
èè* /
(
èè/ 0
Model
èè0 5
,
èè5 6
cloneCultures
èè7 D
,
èèD E
_context
èèF N
:
èèN O
context
èèP W
,
èèW X
_transaction
èèY e
:
èèe f
transaction
èèg r
)
èèr s
;
èès t
if
êê 
(
êê 
!
êê 
cloneResult
êê (
.
êê( )
	IsSucceed
êê) 2
)
êê2 3
{
ëë 
result
íí "
.
íí" #
Errors
íí# )
.
íí) *
AddRange
íí* 2
(
íí2 3
cloneResult
íí3 >
.
íí> ?
Errors
íí? E
)
ííE F
;
ííF G
result
ìì "
.
ìì" #
	Exception
ìì# ,
=
ìì- .
cloneResult
ìì/ :
.
ìì: ;
	Exception
ìì; D
;
ììD E
}
îî 
result
ïï 
.
ïï 
	IsSucceed
ïï (
=
ïï) *
result
ïï+ 1
.
ïï1 2
	IsSucceed
ïï2 ;
&&
ïï< >
cloneResult
ïï? J
.
ïïJ K
	IsSucceed
ïïK T
;
ïïT U
}
ññ 
UnitOfWorkHelper
òò $
<
òò$ %

TDbContext
òò% /
>
òò/ 0
.
òò0 1
HandleTransaction
òò1 B
(
òòB C
result
òòC I
.
òòI J
	IsSucceed
òòJ S
,
òòS T
isRoot
òòU [
,
òò[ \
transaction
òò] h
)
òòh i
;
òòi j
return
ôô 
result
ôô !
;
ôô! "
}
öö 
catch
õõ 
(
õõ 
	Exception
õõ  
ex
õõ! #
)
õõ# $
{
úú 

Repository
ùù 
.
ùù 
LogErrorMessage
ùù .
(
ùù. /
ex
ùù/ 1
)
ùù1 2
;
ùù2 3
if
ûû 
(
ûû 
isRoot
ûû 
)
ûû 
{
üü 
transaction
°° #
.
°°# $
Rollback
°°$ ,
(
°°, -
)
°°- .
;
°°. /
}
¢¢ 
result
££ 
.
££ 
	IsSucceed
££ $
=
££% &
false
££' ,
;
££, -
result
§§ 
.
§§ 
	Exception
§§ $
=
§§% &
ex
§§' )
;
§§) *
return
•• 
result
•• !
;
••! "
}
¶¶ 
finally
ßß 
{
®® 
if
©© 
(
©© 
isRoot
©© 
)
©© 
{
™™ 
context
¨¨ 
.
¨¨  
Dispose
¨¨  '
(
¨¨' (
)
¨¨( )
;
¨¨) *
}
≠≠ 
}
ÆÆ 
}
ØØ 
else
∞∞ 
{
±± 
return
≤≤ 
new
≤≤  
RepositoryResponse
≤≤ -
<
≤≤- .
TView
≤≤. 3
>
≤≤3 4
(
≤≤4 5
)
≤≤5 6
{
≥≥ 
	IsSucceed
¥¥ 
=
¥¥ 
false
¥¥  %
,
¥¥% &
Data
µµ 
=
µµ 
null
µµ 
,
µµ  
Errors
∂∂ 
=
∂∂ 
Errors
∂∂ #
}
∑∑ 
;
∑∑ 
}
∏∏ 
}
ππ 	
public
¬¬ 
virtual
¬¬  
RepositoryResponse
¬¬ )
<
¬¬) *
bool
¬¬* .
>
¬¬. /
SaveSubModels
¬¬0 =
(
¬¬= >
TModel
¬¬> D
parent
¬¬E K
,
¬¬K L

TDbContext
¬¬M W
_context
¬¬X `
=
¬¬a b
null
¬¬c g
,
¬¬g h#
IDbContextTransaction
¬¬i ~
_transaction¬¬ ã
=¬¬å ç
null¬¬é í
)¬¬í ì
{
√√ 	
return
ƒƒ 
new
ƒƒ  
RepositoryResponse
ƒƒ )
<
ƒƒ) *
bool
ƒƒ* .
>
ƒƒ. /
(
ƒƒ/ 0
)
ƒƒ0 1
{
ƒƒ2 3
	IsSucceed
ƒƒ4 =
=
ƒƒ> ?
true
ƒƒ@ D
}
ƒƒE F
;
ƒƒF G
}
≈≈ 	
	protected
—— 
ViewModelBase
—— 
(
——  
TModel
——  &
model
——' ,
,
——, -

TDbContext
——. 8
_context
——9 A
=
——B C
null
——D H
,
——H I#
IDbContextTransaction
——J _
_transaction
——` l
=
——m n
null
——o s
)
——s t
{
““ 	
this
”” 
.
”” 
Model
”” 
=
”” 
model
”” 
;
”” 
	ParseView
‘‘ 
(
‘‘ 
_context
‘‘ 
:
‘‘ 
_context
‘‘  (
,
‘‘( )
_transaction
‘‘* 6
:
‘‘6 7
_transaction
‘‘8 D
)
‘‘D E
;
‘‘E F
}
’’ 	
	protected
ﬁﬁ 
ViewModelBase
ﬁﬁ 
(
ﬁﬁ  
TModel
ﬁﬁ  &
model
ﬁﬁ' ,
,
ﬁﬁ, -
bool
ﬁﬁ. 2

isLazyLoad
ﬁﬁ3 =
,
ﬁﬁ= >

TDbContext
ﬁﬁ? I
_context
ﬁﬁJ R
=
ﬁﬁS T
null
ﬁﬁU Y
,
ﬁﬁY Z#
IDbContextTransaction
ﬁﬁ[ p
_transaction
ﬁﬁq }
=
ﬁﬁ~ 
nullﬁﬁÄ Ñ
)ﬁﬁÑ Ö
{
ﬂﬂ 	
this
‡‡ 
.
‡‡ 
Model
‡‡ 
=
‡‡ 
model
‡‡ 
;
‡‡ 

IsLazyLoad
·· 
=
·· 

isLazyLoad
·· #
;
··# $
	ParseView
‚‚ 
(
‚‚ 
isExpand
‚‚ 
:
‚‚ 

isLazyLoad
‚‚  *
,
‚‚* +
_context
‚‚, 4
:
‚‚4 5
_context
‚‚6 >
,
‚‚> ?
_transaction
‚‚@ L
:
‚‚L M
_transaction
‚‚N Z
)
‚‚Z [
;
‚‚[ \
}
„„ 	
	protected
ËË 
ViewModelBase
ËË 
(
ËË  
)
ËË  !
{
ÈÈ 	
this
ÍÍ 
.
ÍÍ 
Model
ÍÍ 
=
ÍÍ 
	InitModel
ÍÍ "
(
ÍÍ" #
)
ÍÍ# $
;
ÍÍ$ %
	ParseView
ÎÎ 
(
ÎÎ 
)
ÎÎ 
;
ÎÎ 
}
ÏÏ 	
}
ÒÒ 
}ÚÚ ˇ
LG:\_github\Swastika-Heart\src\Swastika\UI\Core\Controllers\BaseController.cs
	namespace 	
Swastika
 
. 
UI 
. 
Base 
. 
Controllers &
{ 
public 

class 
BaseController 
:  !

Controller" ,
{ 
public 
BaseController 
( 
) 
{ 	
} 	
public)) 
override)) 
NotFoundResult)) &
NotFound))' /
())/ 0
)))0 1
{** 	
return++ 
base++ 
.++ 
NotFound++  
(++  !
)++! "
;++" #
},, 	
}-- 
}.. µ"
HG:\_github\Swastika-Heart\src\Swastika\UI\Core\SignalR\BaseSignalRHub.cs
	namespace 	
Swastika
 
. 
UI 
. 
Core 
. 
SignalR "
{ 
public 

abstract 
class 
BaseSignalRHub (
:) *
Hub+ .
{ 
	protected 
static 
readonly !
List" &
<& '
SignalRClient' 4
>4 5
Users6 ;
=< =
new> A
ListB F
<F G
SignalRClientG T
>T U
(U V
)V W
;W X
public 
override 
Task 
OnConnectedAsync -
(- .
). /
{ 	!
UpdateGroupConnection !
(! "
)" #
;# $
return   
base   
.   
OnConnectedAsync   (
(  ( )
)  ) *
;  * +
}!! 	
public(( 
override(( 
Task(( 
OnDisconnectedAsync(( 0
(((0 1
	Exception((1 :
	exception((; D
)((D E
{)) 	
Users++ 
.++ 
	RemoveAll++ 
(++ 
u++ 
=>++  
u++! "
.++" #
ConnectionId++# /
==++0 2
Context++3 :
.++: ;
ConnectionId++; G
)++G H
;++H I
return,, 
base,, 
.,, 
OnDisconnectedAsync,, +
(,,+ ,
	exception,,, 5
),,5 6
;,,6 7
}-- 	
public22 
virtual22 
void22 !
UpdateGroupConnection22 1
(221 2
)222 3
{33 	
var44 
user44 
=44 
Users44 
.44 
Find44 !
(44! "
p44" #
=>44$ &
p44' (
.44( )
ConnectionId44) 5
==446 8
Context449 @
.44@ A
ConnectionId44A M
)44M N
;44N O
if55 
(55 
user55 
!=55 
null55 
)55 
{66 
}99 
}:: 	
public@@ 
virtual@@ 
void@@ )
UpdatePlayerConnectionIdAsync@@ 9
(@@9 :
string@@: @
playerId@@A I
)@@I J
{AA 	
varCC 
playerCC 
=CC 
UsersCC 
.CC 
FindCC #
(CC# $
pCC$ %
=>CC& (
pCC) *
.CC* +
UserIdCC+ 1
==CC2 4
playerIdCC5 =
)CC= >
;CC> ?
ifDD 
(DD 
playerDD 
!=DD 
nullDD 
&&DD !
playerDD" (
.DD( )
ConnectionIdDD) 5
!=DD6 8
ContextDD9 @
.DD@ A
ConnectionIdDDA M
)DDM N
{EE 
playerHH 
.HH 
ConnectionIdHH #
=HH$ %
ContextHH& -
.HH- .
ConnectionIdHH. :
;HH: ;
}JJ 
}KK 	
privateRR 
voidRR 

FailResultRR 
(RR  
dynamicRR  '
objDataRR( /
,RR/ 0
stringRR1 7
errorMsgRR8 @
)RR@ A
{SS 	
constTT 
stringTT 
responseKeyTT $
=TT% &
$strTT' /
;TT/ 0
constUU 
intUU 
statusUU 
=UU 
$numUU  
;UU  !
	ApiResultVV 
<VV 
dynamicVV 
>VV 
resultVV %
=VV& '
newVV( +
	ApiResultVV, 5
<VV5 6
dynamicVV6 =
>VV= >
(VV> ?
)VV? @
{WW 
ResponseKeyXX 
=XX 
responseKeyXX )
,XX) *
StatusYY 
=YY 
statusYY 
,YY  
DataZZ 
=ZZ 
objDataZZ 
,ZZ 
}\\ 
;\\ 
Clients]] 
.]] 
Client]] 
(]] 
Context]] "
.]]" #
ConnectionId]]# /
)]]/ 0
.]]0 1
InvokeAsync]]1 <
(]]< =
$str]]= M
,]]M N
result]]O U
)]]U V
;]]V W
}^^ 	
}__ 
}`` 